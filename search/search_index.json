{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tareas de DAW 24/25","text":"<p>Es este apartado encontraremos las pr\u00e1cticas obligatorias y cheatsheets de cada alumnos del m\u00f3dulo.</p> <p>Cada alumno crear\u00e1 una carpeta con las iniciales de su nombre y apellidos en may\u00fasculas, por ejemplo JMJ</p> <p>Dentro incluir\u00e1 2 archivos markdown, uno para la pr\u00e1ctica obligatoria 1 y otro para su cheatsheet de esta unidad.</p>"},{"location":"Ud1/ABM/CABM/","title":"Git Cheatsheet - Andreu Beltran Miralles","text":""},{"location":"Ud1/ABM/CABM/#instalacion-y-configuraciones-globales","title":"Instalaci\u00f3n y configuraciones globales","text":"<ul> <li> <p>Instalar Git: <pre><code>apt-get install git\n</code></pre>   Instala Git en el sistema.</p> </li> <li> <p>Configurar el nombre de usuario global: <pre><code>git config --global user.name \"John Doe\"\n</code></pre>   Configura el nombre de usuario global para los commits.</p> </li> <li> <p>Configurar el email global: <pre><code>git config --global user.email johndoe@example.com\n</code></pre>   Configura el correo electr\u00f3nico global para los commits.</p> </li> <li> <p>Configurar el push simple por defecto: <pre><code>git config --global push.default simple\n</code></pre>   Configura que el <code>git push</code> se realice de manera simplificada.</p> </li> <li> <p>Configurar un archivo <code>.gitignore</code> global: <pre><code>git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre>   Especifica un archivo global <code>.gitignore</code> para excluir ciertos archivos en todos los proyectos.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#estado-de-git-e-historial","title":"Estado de Git e historial","text":"<ul> <li> <p>Ver el estado actual del repositorio: <pre><code>git status\n</code></pre>   Muestra el estado de los archivos en el repositorio (cambios, staged, untracked, etc.).</p> </li> <li> <p>Ver el historial de commits: <pre><code>git log\n</code></pre>   Muestra los commits anteriores en el proyecto.</p> </li> <li> <p>Crear un alias para un historial de commits formateado: <pre><code>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre>   Crea un alias llamado <code>hist</code> que muestra el historial con formato gr\u00e1fico y m\u00e1s informaci\u00f3n concisa.</p> </li> <li> <p>Usar el alias: <pre><code>git hist\n</code></pre>     Muestra el historial con el formato personalizado.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#creacion-y-adicion","title":"Creaci\u00f3n y adici\u00f3n","text":"<ul> <li> <p>Inicializar un repositorio Git: <pre><code>git init\n</code></pre>   Crea un nuevo repositorio de Git en el directorio actual.</p> </li> <li> <p>A\u00f1adir un archivo al \u00e1rea de staging: <pre><code>git add hola.php\n</code></pre>   Mueve el archivo <code>hola.php</code> al \u00e1rea de staging para ser incluido en el pr\u00f3ximo commit.</p> </li> <li> <p>Hacer un commit de los cambios: <pre><code>git commit\n</code></pre>   Crea un commit con los cambios actualmente en el \u00e1rea de staging.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#eliminacion","title":"Eliminaci\u00f3n","text":"<ul> <li>Eliminar un archivo y registrarlo en el pr\u00f3ximo commit: <pre><code>git rm hola.php\n</code></pre>   Elimina <code>hola.php</code> del repositorio y lo a\u00f1ade al \u00e1rea de staging.</li> </ul>"},{"location":"Ud1/ABM/CABM/#deshacer-cambios","title":"Deshacer cambios","text":"<ul> <li> <p>Restaurar los cambios de un archivo: <pre><code>git restore hola.php\n</code></pre>   Deshace los cambios locales en <code>hola.php</code>.</p> </li> <li> <p>Eliminar un archivo del \u00e1rea de staging (sin eliminarlo del repositorio): <pre><code>git restore --staged hola.php\n</code></pre>   Retira <code>hola.php</code> del \u00e1rea de staging pero mantiene los cambios locales.</p> </li> <li> <p>Deshacer el \u00faltimo commit sin modificar los archivos: <pre><code>git revert HEAD --no-edit\n</code></pre>   Crea un commit que deshace los cambios realizados en el commit anterior.</p> </li> <li> <p>Restaurar el estado de un commit anterior: <pre><code>git reset --hard v1\n</code></pre>   Restaura el estado del repositorio al commit etiquetado como <code>v1</code>, eliminando cualquier cambio posterior.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#etiquetas","title":"Etiquetas","text":"<ul> <li> <p>Crear una etiqueta: <pre><code>git tag v1\n</code></pre>   Crea una etiqueta llamada <code>v1</code> en el commit actual.</p> </li> <li> <p>Eliminar una etiqueta: <pre><code>git tag -d v1\n</code></pre>   Elimina la etiqueta <code>v1</code>.</p> </li> <li> <p>Comparar dos etiquetas: <pre><code>git diff v1-beta v1\n</code></pre>   Muestra las diferencias entre las etiquetas <code>v1-beta</code> y <code>v1</code>.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#ramas","title":"Ramas","text":"<ul> <li> <p>Crear una nueva rama: <pre><code>git branch hola\n</code></pre>   Crea una nueva rama llamada <code>hola</code>.</p> </li> <li> <p>Cambiar a una rama: <pre><code>git checkout hola\n</code></pre>   Cambia a la rama <code>hola</code>.</p> </li> <li> <p>Fusionar una rama con la rama actual: <pre><code>git merge master\n</code></pre>   Fusiona los cambios de la rama <code>master</code> en la rama actual.</p> </li> <li> <p>Rebasar la rama actual sobre otra: <pre><code>git rebase master\n</code></pre>   Aplica los commits de la rama actual encima de la rama <code>master</code>.</p> </li> </ul>"},{"location":"Ud1/ABM/CABM/#github","title":"GitHub","text":"<ul> <li> <p>A\u00f1adir un repositorio remoto: <pre><code>git remote add origin git@github.com:sgomez/taller-de-git.git\n</code></pre>   A\u00f1ade un repositorio remoto llamado <code>origin</code>.</p> </li> <li> <p>Renombrar la rama principal a <code>main</code>: <pre><code>git branch -M main\n</code></pre>   Renombra la rama actual a <code>main</code>.</p> </li> <li> <p>Subir cambios al repositorio remoto: <pre><code>git push -u origin main\n</code></pre>   Sube los cambios de la rama <code>main</code> al repositorio remoto <code>origin</code>.</p> </li> <li> <p>Clonar un repositorio: <pre><code>git clone git@github.com:sgomez/taller-de-git.git\n</code></pre>   Descarga una copia del repositorio remoto en el equipo local.</p> </li> <li> <p>Mostrar informaci\u00f3n sobre el repositorio remoto: <pre><code>git remote show origin\n</code></pre>   Muestra detalles sobre el repositorio remoto <code>origin</code>.</p> </li> <li> <p>Obtener datos del repositorio remoto sin fusionar: <pre><code>git fetch\n</code></pre>   Descarga los cambios del repositorio remoto sin aplicarlos a la rama actual.</p> </li> <li> <p>Actualizar la rama actual con los cambios del repositorio remoto: <pre><code>git pull\n</code></pre>   Descarga y fusiona los cambios del repositorio remoto en la rama actual.</p> </li> </ul>"},{"location":"Ud1/ACF/cheatsheet/","title":"GitHub Cheatsheet","text":""},{"location":"Ud1/ACF/cheatsheet/#1-comandos-de-instalacion-y-configuracion","title":"1. Comandos de instalaci\u00f3n y configuraci\u00f3n","text":"Comando Explicaci\u00f3n apt-get install git Comando para instalar github en nuestro equipo Ubuntu o Debian git config --global user.name \"(tu usuario)\" Comando para establecer tu nombre de usuario git config --global user.email (tu email) Comando para establecer tu direcci\u00f3n de correo electr\u00f3nico git config --global push.default simple Comando para configurar el comportamiento predeterminado de Git a la hora de hacer un push a un repositorio remoto"},{"location":"Ud1/ACF/cheatsheet/#2-comandos-de-uso-basico-de-git","title":"2. Comandos de uso b\u00e1sico de Git","text":"Comando Explicaci\u00f3n git status Comando para consultar el estado de los archivos git init Comando para crear un nuevo repositorio git add (nombre del archivo) Comando para a\u00f1adir el archivo al \u00e1rea de staging o Staging Area git commit Comando para confirmar los cambios y pasar el archivo de Staging Area a nuestro repositorio local git config --global core.excludesfile $HOME/.gitignore_global Comando para indicar a git que queremos tener un fichero de gitignore global git log Comando para ver todos los cambios que hemos hecho git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\" Comando para crear un alias de un comando muy largo a uno m\u00e1s corto git checkout (rama) Comando para cambiar de rama git tag (nombre de etiqueta) Comando para etiquetar versiones concretas de un repositorio git switch (rama) Comando para cambiar de rama git diff (etiqueta 1) (etiqueta 2) Comando para ver las diferencias entre dos versiones"},{"location":"Ud1/ACF/cheatsheet/#3-comandos-de-uso-avanzado-de-git","title":"3. Comandos de uso avanzado de Git","text":"Comando Explicaci\u00f3n git restore (archivo) Comando para restaurar archivos o cambios en nuestro repositorio git revert Comando para revertir un commit en espec\u00edfico git reset Comando para revertir un commit pero sin dejar huella en el historial de cambios git mv (archivo) (nueva ubicacion) Comando para mover arhchivos git rm (archivo) Comando para eliminar archivos de nuestro repositorio Git"},{"location":"Ud1/ACF/cheatsheet/#4-comandos-de-ramas-git","title":"4. Comandos de ramas Git","text":"Comando Explicaci\u00f3n git branch (nombre rama) Comando para crear una rama nueva git branch -d (nombre rama) Comando para borrar una rama git merge (nombre de rama) Comando para incorporar los cambios de una rama a otra git rebase Comando para reaplicar commits de una rama sobre otra"},{"location":"Ud1/ACF/cheatsheet/#5-comandos-github","title":"5. Comandos GitHub","text":"Comando Explicaci\u00f3n $ ssh-keygen -t rsa -C \"(Descripci\u00f3n)\" Comando para crear una nueva clave p\u00fablica/privada git remote add origin (Direcci\u00f3n del repositorio remoto) Comando para conectar nuestro repositorio local con un repositorio remoto git push Comando para enviar los commits realizados en nuestro repositorio local a un repositorio remoto git clone (Direcci\u00f3n del repositorio) Comando para clonar un repositorio remoto a nuestro repositorio local git remote Comando para ver la configuraci\u00f3n del respositorio git fetch Comando para descargar los cambios desde un repositorio remoto git pull Comando para describir y aplicar cambios desde un repositorio remoto a nuestra rama local actual git stash save Comando para guardar los cambios temporalmente en la pila git stash pop Comando para sacar los cambios de la pila"},{"location":"Ud1/ACF/cheatsheet/#6-comandos-de-colaboracion-en-github","title":"6. Comandos de colaboraci\u00f3n en GitHub","text":"Comando Explicaci\u00f3n git remote add upstream (direcci\u00f3n del repositorio remoto) Comando para a\u00f1adir un repositorio adicional a nuestro repositorio local git remote show upstream Comando para mostrar el repositorio remoto"},{"location":"Ud1/AEM/CHEATSHEET/","title":"Cheatsheet - Comandos B\u00e1sicos de Administraci\u00f3n en Linux","text":""},{"location":"Ud1/AEM/CHEATSHEET/#1-actualizacion-de-paquetes-con-apt","title":"1. Actualizaci\u00f3n de Paquetes con APT","text":"<ul> <li>Actualizar lista de paquetes disponibles:</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Actualizar los paquetes instalados:</li> </ul> <pre><code>sudo apt upgrade\n</code></pre> <ul> <li>Eliminar paquetes innecesarios:</li> </ul> <pre><code>sudo apt autoremove\n</code></pre>"},{"location":"Ud1/AEM/CHEATSHEET/#2-creacion-y-manipulacion-de-archivos-y-directorios","title":"2. Creaci\u00f3n y Manipulaci\u00f3n de Archivos y Directorios","text":"<ul> <li>Ver el directorio actual:</li> </ul> <pre><code>pwd\n</code></pre>"},{"location":"Ud1/AEM/CHEATSHEET/#3-manipulacion-de-permisos","title":"3. Manipulaci\u00f3n de Permisos","text":"<ul> <li>Cambiar permisos de un archivo/directorio:</li> </ul> <pre><code>chmod [permisos] (archivo/directorio)\n</code></pre>"},{"location":"Ud1/AEM/CHEATSHEET/#4-gestion-de-usuarios-y-grupos","title":"4. Gesti\u00f3n de Usuarios y Grupos","text":"<ul> <li>Ver lista de usuarios:</li> </ul> <pre><code>cat /etc/passwd\n</code></pre> <ul> <li>Ver lista de grupos:</li> </ul> <pre><code>cat /etc/group\n</code></pre> <ul> <li>Cambiar el propietario de un archivo/directorio:</li> </ul> <pre><code>chown [usuario]:[grupo] (archivo/directorio)\n</code></pre> <ul> <li>Crear un grupo:</li> </ul> <pre><code>groupadd grupo1\n</code></pre> <ul> <li>Cambiar el grupo de un archivo/directorio:</li> </ul> <pre><code>chgrp [grupo] (archivo/directorio)\n</code></pre> <ul> <li>A\u00f1adir un usuario a un grupo:</li> </ul> <pre><code>usermod -a -G grupo1 usuario1\n</code></pre> <ul> <li>Verificar los grupos a los que pertenece un usuario:</li> </ul> <pre><code>groups usuario1\n</code></pre> <ul> <li>Eliminar un usuario de un grupo:</li> </ul> <pre><code>sudo gpasswd -d usuario1 grupo1\n</code></pre> <ul> <li>Eliminar un grupo:</li> </ul> <pre><code>groupdel grupo1\n</code></pre> <ul> <li>Eliminar un usuario (incluyendo su directorio personal):</li> </ul> <pre><code>sudo userdel -r usuario1\n</code></pre>"},{"location":"Ud1/AEM/CHEATSHEET/#5-gestion-de-procesos-basicos","title":"5. Gesti\u00f3n de Procesos B\u00e1sicos","text":"<ul> <li>Ver procesos de un usuario espec\u00edfico:</li> </ul> <pre><code>ps -u admin\n</code></pre> <ul> <li>Ver procesos de un usuario en formato extendido:</li> </ul> <pre><code>ps -u admin -f\n</code></pre> <ul> <li>Ejecutar un proceso en segundo plano:</li> </ul> <pre><code>yes &gt; /dev/null &amp;\n</code></pre> <ul> <li>Ver procesos ejecut\u00e1ndose en segundo plano:</li> </ul> <pre><code>jobs\n</code></pre> <ul> <li>Traer al primer plano el primer proceso:</li> </ul> <pre><code>fg %1\n</code></pre> <ul> <li>Matar un proceso por su PID:</li> </ul> <pre><code>kill (pid)\n</code></pre> <ul> <li>Ver todos los procesos del sistema:</li> </ul> <pre><code>ps aux\n</code></pre> <ul> <li>Ver todos los procesos del sistema (formato extendido):</li> </ul> <pre><code>ps -ef\n</code></pre> <p>```</p> <p>Aqu\u00ed tienes un cheatsheet en formato Markdown con los comandos de Git que mencionas:</p> <p>```markdown</p>"},{"location":"Ud1/AEM/CHEATSHEET/#cheatsheet-comandos-basicos-de-git","title":"Cheatsheet - Comandos B\u00e1sicos de Git","text":""},{"location":"Ud1/AEM/CHEATSHEET/#1-configuracion-de-usuario","title":"1. Configuraci\u00f3n de Usuario","text":"<ul> <li>Configurar nombre de usuario global: <code>bash   git config --global user.name \"John Doe\"</code></li> <li>Configurar correo electr\u00f3nico global: <code>bash   git config --global user.email johndoe@example.com</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#2-clonar-un-repositorio","title":"2. Clonar un Repositorio","text":"<ul> <li>Clonar un repositorio desde GitHub: <code>bash   git clone git@github.com:xxxxxxx/xxxxxxx.git</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#3-configuracion-de-push","title":"3. Configuraci\u00f3n de Push","text":"<ul> <li>Configurar el push como simple: <code>bash   git config --global push.default simple</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#4-historial-y-alias","title":"4. Historial y Alias","text":"<ul> <li>Ver el historial de commits: <code>bash   git log</code></li> <li>Crear alias para el historial de commits: <code>bash   git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#5-estado-y-staging","title":"5. Estado y Staging","text":"<ul> <li>Ver el estado de los archivos: <code>bash   git status</code></li> <li>Usar el alias para ver el historial (si se ha configurado): <code>bash   git hist</code></li> <li>Agregar un archivo al \u00e1rea de staging: <code>bash   git add hola.php</code></li> <li>Cambiar entre ramas recientes: <code>bash   git switch -</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#6-commit-y-checkout","title":"6. Commit y Checkout","text":"<ul> <li>Hacer un commit con comentario: <code>bash   git commit -am \"Comentario aqu\u00ed\"</code></li> <li>Restaurar un archivo desde el \u00e1rea de staging: <code>bash   git restore --staged hola.php</code></li> <li>Revertir el \u00faltimo commit (sin editar el mensaje): <code>bash   git revert HEAD --no-edit</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#7-reseteo-y-edicion-de-commits","title":"7. Reseteo y Edici\u00f3n de Commits","text":"<ul> <li>Resetear el repositorio a un commit espec\u00edfico: <code>bash   git reset --hard v1  # O tambi\u00e9n usando el hash   git reset --hard hash</code></li> <li>Editar el mensaje del \u00faltimo commit: <code>bash   git commit --amend -m \"Nuevo comentario\"</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#8-ramas","title":"8. Ramas","text":"<ul> <li>Crear una nueva rama: <code>bash   git branch hola</code></li> <li>Fusionar la rama <code>master</code> con la rama actual: <code>bash   git merge master</code></li> <li>Fusionar sin fast-forward: <code>bash   git merge --no-ff</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#9-rebase","title":"9. Rebase","text":"<ul> <li>Continuar un rebase: <code>bash   git rebase --continue</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#10-remotos","title":"10. Remotos","text":"<ul> <li>A\u00f1adir un repositorio remoto: <code>bash   git remote add origin git@github.com:Alexillo98/taller-de-git-clase.git</code></li> <li>Cambiar el nombre de la rama actual a <code>main</code>: <code>bash   git branch -M main</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#11-operaciones-de-sincronizacion","title":"11. Operaciones de Sincronizaci\u00f3n","text":"<ul> <li>Empujar cambios al repositorio remoto: <code>bash   git push   git push origin master   git push --force</code></li> <li>Traer cambios desde el repositorio remoto: <code>bash   git fetch</code></li> <li>Actualizar y hacer pull desde el remoto: <code>bash   git pull   git pull --rebase</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#12-stash-guardar-cambios-temporalmente","title":"12. Stash (Guardar cambios temporalmente)","text":"<ul> <li>Guardar cambios en el stash: <code>bash   git stash save</code></li> <li>Sincronizar con el remoto y aplicar el stash: <code>bash   git pull   git stash pop</code></li> <li>Sincronizar y aplicar stash autom\u00e1ticamente: <code>bash   git pull --autostash</code></li> </ul>"},{"location":"Ud1/AEM/CHEATSHEET/#13-otros-comandos","title":"13. Otros Comandos","text":"<ul> <li>Eliminar un archivo del repositorio: <code>bash   git rm hola.php</code></li> <li>Ver detalles del remoto: <code>bash   git remote show origin</code></li> </ul>"},{"location":"Ud1/ALS/cheatsheet1/","title":"Cheatsheet1","text":"<pre><code>---\ntitle: 'CH1 - Adrian Leonard Stan'\n---\n</code></pre>"},{"location":"Ud1/ALS/cheatsheet1/#git-cheatsheet-completo","title":"\ud83d\udee0\ufe0f Git Cheatsheet Completo","text":""},{"location":"Ud1/ALS/cheatsheet1/#configuracion-inicial","title":"\ud83d\udcc5 Configuraci\u00f3n Inicial","text":""},{"location":"Ud1/ALS/cheatsheet1/#configurar-el-nombre-de-usuario","title":"Configurar el nombre de usuario","text":"<p>git config --global user.name \"Tu Nombre\"</p>"},{"location":"Ud1/ALS/cheatsheet1/#configurar-el-correo-electronico","title":"Configurar el correo electr\u00f3nico","text":"<p>git config --global user.email \"tu.email@example.com\"</p>"},{"location":"Ud1/ALS/cheatsheet1/#ver-la-configuracion-actual","title":"Ver la configuraci\u00f3n actual","text":"<p>git config --list</p> <p>\ud83d\udce6 Comandos B\u00e1sicos</p> <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#inicializar-un-nuevo-repositorio","title":"Inicializar un nuevo repositorio","text":"<p>git init</p>"},{"location":"Ud1/ALS/cheatsheet1/#clonar-un-repositorio-existente","title":"Clonar un repositorio existente","text":"<p>git clone"},{"location":"Ud1/ALS/cheatsheet1/#ver-el-estado-de-los-archivos","title":"Ver el estado de los archivos","text":"<p>git status</p>"},{"location":"Ud1/ALS/cheatsheet1/#agregar-archivos-al-indice-staging-area","title":"Agregar archivos al \u00edndice (staging area)","text":"<p>git add         # Agregar un archivo espec\u00edfico git add .                # Agregar todos los archivos"},{"location":"Ud1/ALS/cheatsheet1/#hacer-un-commit","title":"Hacer un commit","text":"<p>git commit -m \"Mensaje del commit\"</p>"},{"location":"Ud1/ALS/cheatsheet1/#ver-el-historial-de-commits","title":"Ver el historial de commits","text":"<p>git log \ud83c\udf3f Ramas</p> <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#crear-una-nueva-rama","title":"Crear una nueva rama","text":"<p>git branch"},{"location":"Ud1/ALS/cheatsheet1/#listar-todas-las-ramas","title":"Listar todas las ramas","text":"<p>git branch</p>"},{"location":"Ud1/ALS/cheatsheet1/#cambiar-a-otra-rama","title":"Cambiar a otra rama","text":"<p>git checkout"},{"location":"Ud1/ALS/cheatsheet1/#crear-y-cambiar-a-una-nueva-rama","title":"Crear y cambiar a una nueva rama","text":"<p>git checkout -b"},{"location":"Ud1/ALS/cheatsheet1/#fusionar-otra-rama-a-la-rama-actual","title":"Fusionar otra rama a la rama actual","text":"<p>git merge"},{"location":"Ud1/ALS/cheatsheet1/#eliminar-una-rama","title":"Eliminar una rama","text":"<p>git branch -d  \ud83d\uddc4\ufe0f Stash <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#guardar-cambios-no-confirmados","title":"Guardar cambios no confirmados","text":"<p>git stash</p>"},{"location":"Ud1/ALS/cheatsheet1/#guardar-cambios-con-mensaje","title":"Guardar cambios con mensaje","text":"<p>git stash save \"Tu mensaje\"</p>"},{"location":"Ud1/ALS/cheatsheet1/#ver-la-lista-de-stashes","title":"Ver la lista de stashes","text":"<p>git stash list</p>"},{"location":"Ud1/ALS/cheatsheet1/#aplicar-el-ultimo-stash","title":"Aplicar el \u00faltimo stash","text":"<p>git stash apply</p>"},{"location":"Ud1/ALS/cheatsheet1/#aplicar-y-eliminar-el-ultimo-stash","title":"Aplicar y eliminar el \u00faltimo stash","text":"<p>git stash pop</p>"},{"location":"Ud1/ALS/cheatsheet1/#mostrar-cambios-en-el-stash","title":"Mostrar cambios en el stash","text":"<p>git stash show          # Resumen git stash show -p      # Detalle de cambios</p>"},{"location":"Ud1/ALS/cheatsheet1/#eliminar-un-stash-especifico","title":"Eliminar un stash espec\u00edfico","text":"<p>git stash drop stash@{n}</p>"},{"location":"Ud1/ALS/cheatsheet1/#limpiar-todos-los-stashes","title":"Limpiar todos los stashes","text":"<p>git stash clear \ud83d\udcc1 Worktree</p> <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#agregar-un-nuevo-directorio-de-trabajo","title":"Agregar un nuevo directorio de trabajo","text":"<p>git worktree add"},{"location":"Ud1/ALS/cheatsheet1/#crear-un-nuevo-worktree-con-una-nueva-rama","title":"Crear un nuevo worktree con una nueva rama","text":"<p>git worktree add -b"},{"location":"Ud1/ALS/cheatsheet1/#listar-los-worktrees","title":"Listar los worktrees","text":"<p>git worktree list</p>"},{"location":"Ud1/ALS/cheatsheet1/#eliminar-un-worktree","title":"Eliminar un worktree","text":"<p>git worktree remove  \ud83d\udc64 Blame <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#mostrar-quien-modifico-cada-linea-de-un-archivo","title":"Mostrar qui\u00e9n modific\u00f3 cada l\u00ednea de un archivo","text":"<p>git blame  \ud83c\udf0d Repositorio Remoto <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#agregar-un-repositorio-remoto","title":"Agregar un repositorio remoto","text":"<p>git remote add"},{"location":"Ud1/ALS/cheatsheet1/#ver-los-repositorios-remotos","title":"Ver los repositorios remotos","text":"<p>git remote -v</p>"},{"location":"Ud1/ALS/cheatsheet1/#enviar-cambios-al-repositorio-remoto","title":"Enviar cambios al repositorio remoto","text":"<p>git push"},{"location":"Ud1/ALS/cheatsheet1/#obtener-cambios-del-repositorio-remoto","title":"Obtener cambios del repositorio remoto","text":"<p>git pull"},{"location":"Ud1/ALS/cheatsheet1/#ver-la-configuracion-de-remotos","title":"Ver la configuraci\u00f3n de remotos","text":"<p>git remote show  \u2699\ufe0f Otros Comandos \u00datiles <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#comparar-cambios","title":"Comparar cambios","text":"<p>git diff                # Cambios no a\u00f1adidos git diff --cached       # Cambios en el staging area</p>"},{"location":"Ud1/ALS/cheatsheet1/#revertir-cambios-en-un-archivo","title":"Revertir cambios en un archivo","text":"<p>git checkout --"},{"location":"Ud1/ALS/cheatsheet1/#deshacer-el-ultimo-commit-manteniendo-cambios","title":"Deshacer el \u00faltimo commit (manteniendo cambios)","text":"<p>git reset --soft HEAD~1</p>"},{"location":"Ud1/ALS/cheatsheet1/#deshacer-el-ultimo-commit-perdiendo-cambios","title":"Deshacer el \u00faltimo commit (perdiendo cambios)","text":"<p>git reset --hard HEAD~1 \ud83d\udd04 Resumen de Ramas en Git Flow</p> <p>Copiar c\u00f3digo</p>"},{"location":"Ud1/ALS/cheatsheet1/#inicializar-git-flow","title":"Inicializar Git Flow","text":"<p>git flow init</p>"},{"location":"Ud1/ALS/cheatsheet1/#crear-una-rama-de-funcionalidad","title":"Crear una rama de funcionalidad","text":"<p>git flow feature start"},{"location":"Ud1/ALS/cheatsheet1/#finalizar-una-rama-de-funcionalidad","title":"Finalizar una rama de funcionalidad","text":"<p>git flow feature finish"},{"location":"Ud1/ALS/cheatsheet1/#crear-una-rama-de-lanzamiento","title":"Crear una rama de lanzamiento","text":"<p>git flow release start"},{"location":"Ud1/ALS/cheatsheet1/#finalizar-una-rama-de-lanzamiento","title":"Finalizar una rama de lanzamiento","text":"<p>git flow release finish"},{"location":"Ud1/ALS/cheatsheet1/#crear-una-rama-de-parche","title":"Crear una rama de parche","text":"<p>git flow hotfix start"},{"location":"Ud1/ALS/cheatsheet1/#finalizar-una-rama-de-parche","title":"Finalizar una rama de parche","text":"<p>git flow hotfix finish"},{"location":"Ud1/BSO/BSO/","title":"CH1 - Bryan Oyola","text":""},{"location":"Ud1/BSO/BSO/#indice","title":"\u00cdNDICE","text":"<ul> <li>\u00cdNDICE</li> <li>INSTALACI\u00d3N DE GIT</li> <li>Windows</li> <li>Linux</li> <li>CONFIGURACI\u00d3N DE GIT CON GITHUB</li> <li>Crear un repositorio en GitHub</li> <li>Crear un gitignore de forma global</li> <li>RESUMEN DE COMANDOS PRINCIPALES DE GIT</li> <li>Comandos b\u00e1sicos</li> <li>Comandos avanzados</li> <li>TRABAJANDO CON RAMAS</li> <li>GUARDANDO CAMBIOS EN STASH</li> </ul>"},{"location":"Ud1/BSO/BSO/#instalacion-de-git","title":"INSTALACI\u00d3N DE GIT","text":"<p>La instalaci\u00f3n de Git variar\u00e1 dependiendo del sistema operativo en el cual  busquemos instalarlo.</p>"},{"location":"Ud1/BSO/BSO/#windows","title":"Windows","text":"<p>La forma m\u00e1s sencilla de tener una consola de git utilizable desde Windows es instalando Git desde esta p\u00e1gina web.</p> <p></p> <p>Luego de ello, simplemente nos quedar\u00e1 lanzar el programa git bash, teniendo una terminal de comandos para git completamente funcional adem\u00e1s de comandos de Linux muy \u00fatiles como:</p> <p>-<code>ls (listar archivos y carpetas)</code> -<code>cd (Recorrer los directorios)</code> -<code>mkdir (crear carpetas)</code> -<code>touch (crear ficheros)</code></p>"},{"location":"Ud1/BSO/BSO/#linux","title":"Linux","text":"<p>Para instalar git en Linux, haremos uso del gestor de paqueter\u00eda que nuestro sistema operativo tenga instalado, para ello, lo desglosar\u00e9 en las 3 principales distribuciones que tiene el ecosistema Linux.</p> <ol> <li> <p>Basadas en Debian(Debian,Ubuntu,Linux Mint...)</p> <ul> <li>Actualizar paqueter\u00eda <pre><code>$sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre></li> <li>Instalar Git <pre><code>$sudo apt-get install git\n</code></pre></li> </ul> </li> <li> <p>Basadas en Red Hat(Red Hat Linux,Fedora,OpenSuse...)</p> <p>Fedora</p> <ul> <li>Actualizar paqueter\u00eda <pre><code>$sudo dnf check-update &amp;&amp; sudo dnf upgrade\n</code></pre></li> <li>Instalar Git <pre><code>$sudo dnf install git\n</code></pre></li> </ul> <p>OpenSuse</p> <ul> <li>Actualizar paqueter\u00eda <pre><code>$sudo zypper refresh &amp;&amp; sudo zypper update\n</code></pre></li> <li>Instalar Git <pre><code>$sudo zypper install git\n</code></pre></li> </ul> </li> <li> <p>Basadas en Arch(Arch Linux,Manjaro,Arco Linux...)</p> <ul> <li>Actualizar paqueter\u00eda <pre><code>$sudo pacman -Syu\n</code></pre></li> <li>Instalar Git <pre><code>$sudo pacman -S git\n</code></pre></li> </ul> </li> </ol>"},{"location":"Ud1/BSO/BSO/#configuracion-de-git-con-github","title":"CONFIGURACI\u00d3N DE GIT CON GITHUB","text":"<p>Ahora que ya tenemos una terminal con git completamente funcional, pasaremos a a\u00f1adir nuestra cuenta de github(Esto lo haremos una vez en cada ordenador que queramos usar).</p> <p>Para ello, lo primero que haremos ser\u00e1 generar una clave ssh en nuestro ordenador, esta clave la utilizaremos para acceder a github de forma segura sin necesidad de estar logeandonos todo el tiempo.</p> <p>para ello, introduciremos este comando:</p> <ul> <li> <p>Si utilizas un ordenador moderno(pr\u00f3tocolo m\u00e1s seguro) <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre></p> </li> <li> <p>Si utilizas un ordenador m\u00e1s antiguo <pre><code> ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre></p> </li> </ul> <p>Esto nos generar\u00e1 dos claves ssh (una p\u00fablica que ser\u00e1 la que usaremos y otra privada que debemos conservar y no mostrar a nadie) en la carpeta ./ssh en nuestro directorio <code>$HOME</code> (Carpeta de usuario de Linux). Algo parecido a lo que generamos cuando queremos conectarnos a un servidor AWS, ser\u00eda casi lo mismo que el archivo .PEM pero para github.</p> <p>Luego accederemos a nuestra cuenta de Github desde un navegador e iremos al apartado Settings-&gt;SSH and GPG Keys-&gt;New SSH Key.</p> <ul> <li>Mediante el comando: <pre><code>$cat ~/.shh/{nombre-del-archivo}.pub \n</code></pre> Copiaremos la clave p\u00fablica ssh y en la secci\u00f3n anterior, la pegaremos y le daremos un nombre para identificar que ordenador es.</li> </ul> <p>Por \u00faltimo, debemos a\u00f1adir nuestro nombre e email de github en la terminal para que as\u00ed podamos ser identificados de forma correcta en los commit que hagamos, adem\u00e1s de cambiar la rama predeterminada de master a main.</p> <ul> <li>Utilizaremos los comandos <pre><code>$git config --global user.name \"Nombre Cuenta Github\"\n$git config --global user.email \"Correo de Github\"\n$git config --global init.defaultBranch main\n</code></pre></li> </ul> <p>Con esto, ya tendremos listo nuestro entorno de trabajo, que usaremos cuando ejecutemos comandos m\u00e1s avanzados y dejemos de trabajar en local.</p>"},{"location":"Ud1/BSO/BSO/#crear-un-repositorio-en-github","title":"Crear un repositorio en GitHub","text":"<ol> <li>Inicias sesi\u00f3n en GitHub.</li> <li>Pulsas sobre el icono y luego en repositorios.</li> <li>Creas un nuevo repositorio pulsando en New.</li> <li>Decides un nombre para el repositorio.</li> <li>Puedes ponerle una descripci\u00f3n.</li> <li>Eliges si quieres que sea p\u00fablico o privado.</li> <li>Puedes a\u00f1adir un README, un gitignore o una Licencia.</li> <li>Por \u00faltimo, ya puedes crear el repositorio.</li> </ol>"},{"location":"Ud1/BSO/BSO/#crear-un-gitignore-de-forma-global","title":"Crear un gitignore de forma global","text":"<p>Un gitignore es un archivo muy \u00fatil para no llenar nuestros repositorios de git de archivos innecesarios. </p> <p>Muchos frameworks o librer\u00edas crean archivos residuales que seguramente no busquemos mantener en nuestro repositorio final del proyecto, para ello, crearemos un gitignore. </p> <p>Podemos crear uno por cada proyecto que tengamos simplemente creandolo en la carpeta ra\u00edz del directorio git o podemos crear uno global si usamos muy a menudo ciertas tecnolog\u00edas.</p> <p>Para ello, utilizaremos: <pre><code>$git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre></p>"},{"location":"Ud1/BSO/BSO/#resumen-de-comandos-principales-de-git","title":"RESUMEN DE COMANDOS PRINCIPALES DE GIT","text":""},{"location":"Ud1/BSO/BSO/#comandos-basicos","title":"Comandos b\u00e1sicos","text":"<ul> <li><code>git init</code>: Inicializa un nuevo repositorio. <pre><code>$mkdir pruebas\n$cd pruebas\n$git init\n\nInicializado repositorio Git vac\u00edo en /home/bryan/Documentos/DAW/pruebas/.git/\n</code></pre></li> <li><code>git status</code>: Consulta el estado de un proyecto. <pre><code>$git status\n\nEn la rama main\nTu rama est\u00e1 actualizada con 'origin/main'.\n\nnada para hacer commit, el \u00e1rbol de trabajo est\u00e1 limpio\n</code></pre></li> <li><code>git log</code>: Consulta el historial de commits en el repositorio actual. <pre><code>$git log\n$git log --oneline\n$git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n</code></pre></li> <li><code>git tag</code>: Crea,modifica o elimina \"tags\"(etiquetas) a los commits(instant\u00e1neas) de nuestro proyecto. <pre><code>$git tag\n&lt;Lista todas las etiquetas creadas&gt;\n$git tag &lt;nombre&gt;\n&lt;Crea una etiqueta llama nombre&gt;\n$git tag -d &lt;nombre&gt;\n&lt;Elimina la etiqueta llamada nombre&gt;\n</code></pre></li> <li><code>git add &lt;nombre archivo&gt;</code>: A\u00f1ade los cambios al \u00e1rea de preparaci\u00f3n -&gt;(staging). <pre><code>$touch archivo.txt\n$git add archivo.txt &lt;Esto a\u00f1adir\u00eda archivo.txt al \u00e1rea de staging&gt;\n\n$git add . &lt;Esto a\u00f1adir\u00eda todos los ficheros al \u00e1rea de staging&gt;\n</code></pre></li> <li><code>git commit -m</code>: Crea una instant\u00e1nea de los cambios que hay en stage. <pre><code>$git commit -m \"commit inicial\"\n&lt;Si le quitamos la -m, nos abrir\u00e1 un editor de texto para a\u00f1adir el mensaje&gt;\n$git commit -am \"commit inicial\"\n&lt;Nos har\u00e1 el git add y el git commit a la vez&gt;\n</code></pre></li> <li><code>git diff</code>: Permite ver las diferencias entre distintos estados de tu repositorio, como entre commits, ramas o el estado actual de los archivos. <pre><code>$git diff\n&lt;Muestra la diferencia entre tu \u00e1rea de trabajo y el commit m\u00e1s reciente&gt;\n$git diff &lt;commit&gt;\n&lt;Muestra la diferencia entre tu \u00e1rea de trabajo y el commit especificado&gt;\n$git diff &lt;otra rama&gt;\n&lt;Muestra la diferencia entre tu rama actual y otra rama&gt;\n</code></pre></li> <li><code>git clone &lt;url&gt;</code>: Clona un repositorio existente. <pre><code>$git clone &lt;url_repositorio&gt;\n&lt;La url puede ser la ssh o la http del repositorio, depender\u00e1 de nuestra configuraci\u00f3n anterior, aunque es preferible la ssh&gt;\n</code></pre></li> </ul>"},{"location":"Ud1/BSO/BSO/#comandos-avanzados","title":"Comandos avanzados","text":"<ul> <li><code>git push</code>: Se utiliza para enviar tus cambios locales a un repositorio remoto. <pre><code>$git push origin main\n&lt;git push &lt;remoto&gt; &lt;rama&gt;&gt;\n</code></pre></li> <li><code>git fetch &lt;url&gt;</code>: Actualizar tu repositorio local con los cambios que han ocurrido en el repositorio remoto, este comando solo descarga la informaci\u00f3n sin mezclarla con tu trabajo local. <pre><code>$git fetch origin\n</code></pre></li> <li><code>git merge</code>: Combina una rama con la actual, tambien, combina un fetch con la rama en la que est\u00e1s trabajando. <pre><code>$git merge &lt;rama&gt;\n</code></pre></li> <li><code>git pull</code>: Actualizar tu rama local con los cambios que se han hecho en el repositorio remoto. Combina dos acciones: git fetch (descargar los cambios) y git merge (a\u00f1adir esos cambios en tu rama actual). <pre><code>$git pull origin main\n&lt;git pull &lt;remoto&gt; &lt;rama&gt;&gt;\n</code></pre></li> <li><code>git rebase &lt;rama&gt;</code>: Aplicar cambios de una rama sobre otra sobreescribiendo el historial de las ramas. <pre><code>$git rebase &lt;rama&gt;\n$git rebase --continue\n</code></pre></li> <li><code>git reset --hard &lt;commit-hash&gt;</code>: Resetea el repositorio a un commit espec\u00edfico. <pre><code>$git reset &lt;commit&gt;\n$git reset --hard &lt;commit&gt;\n&lt;Resetea el repositorio a un commit espec\u00edfico&gt;\n</code></pre></li> </ul>"},{"location":"Ud1/BSO/BSO/#trabajando-con-ramas","title":"TRABAJANDO CON RAMAS","text":"<p>Listar Ramas</p> <pre><code>$git branch\n&lt;Muestra las ramas que tienes en tu directorio local&gt;\n$git branch -r\n&lt;Muestra las ramas remotas que tienes&gt;\n</code></pre> <p>Creaci\u00f3n y eliminaci\u00f3n de Ramas</p> <pre><code>$git branch &lt;rama&gt;\n&lt;Crear rama&gt;\n$git branch -d &lt;rama&gt;\n&lt;Eliminar rama&gt;\n</code></pre> <p>Trabajando con Ramas</p> <pre><code>$git checkout &lt;rama&gt;\n&lt;Ir a la rama especificada&gt;\n$git checkout -b &lt;rama&gt;\n&lt;Creas la rama especificada y luego cambias a ella&gt;\n</code></pre> <p>Combinando Ramas</p> <pre><code>$git merge &lt;rama&gt;\n&lt;Combina una rama con la actual&gt;\n$git rebase &lt;rama&gt;\n&lt;Aplicar cambios de una rama sobre otra sobreescribiendo el historial de las ramas&gt;\n</code></pre> <ul> <li>Se puede usar la opci\u00f3n -m para dar un nombre al commit al hacer el merge</li> <li>existen opciones como --ff -&gt; fast-forward (Que intentar\u00e1 no crear un commit nuevo y por lo tanto no dejar historial de ramas) y --no-ff(Que crear\u00e1 un commit nuevo para la fusi\u00f3n).</li> </ul>"},{"location":"Ud1/BSO/BSO/#guardando-cambios-en-stash","title":"GUARDANDO CAMBIOS EN STASH","text":"<p>Muy \u00fatil si quieres mantener un trabajo actual y as\u00ed poder hacer otra tarea diferente y luego de hacer lo anterior, volver a tu trabajo guardado en el stash.</p> <pre><code>$git stash\n&lt;Guardas los cambios en el stash&gt;\n$git pull, $git checkout &lt;otra rama&gt;\n&lt;Empiezas con tu nueva tarea hasta finalizarla mediante un commit por ejemplo&gt;\n$git stash pop\n&lt;Recuperas los cambios que tienes en el stash y prosigues con tu trabajo anterior&gt;\n</code></pre> <ul> <li><code>git pull --autostash</code>: Es la combinaci\u00f3n del primer git stash y git pull, en otras palabras, guarda tu trabajo en el stash y recibe los cambios del pull.</li> </ul>"},{"location":"Ud1/DGD/cheatsheet/","title":"CheatSheet Github DARIUS GABRIEL DOBRE","text":""},{"location":"Ud1/DGD/cheatsheet/#12-configuracion-inicial","title":"1.2 Configuraci\u00f3n Inicial","text":"<pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu.email@ejemplo.com\"\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#15-uso-basico-de-git","title":"1.5 Uso b\u00e1sico de Git","text":"<p>Inciar un repositorio git y clonar un repositorio</p> <pre><code>git init\ngit clone &lt;url_del_repositorio&gt;\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#trabajar-con-cambios","title":"Trabajar con Cambios","text":"<p>Para consultar el estado de los archivos</p> <pre><code>git status\n</code></pre> <p>Para agregar archivos al staging area, si haces <code>git add .</code> se a\u00f1den todos los archivos sin necesidad de especificar cual quieres a\u00f1adir.</p> <p><pre><code>git add &lt;archivo&gt;\n</code></pre> Para pasar tus archivos a Local Repository</p> <pre><code>git commit -m \"Mensaje de commit\"\n</code></pre> <p>Realiar add y commit en un solo comando</p> <pre><code>git commit -am \"Mensaje de commit\"\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#consultar-logs","title":"Consultar Logs","text":"<p>Para consultar los logs podemos ejecutar los siguientes comandos</p> <pre><code>git log\ngit log --oneline\ngit log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n</code></pre> <p>Podemos crear un alias para no tener que usar comandos tan largos</p> <pre><code>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> <p>Ahora simplemente con usar <code>git hist</code> nos saldr\u00e1n los logs de una manera m\u00e1s vistosa</p>"},{"location":"Ud1/DGD/cheatsheet/#regresar-a-versiones-anteriores","title":"Regresar a versiones anteriores","text":"<p>Podemos regresar a versiones anterior usando el checkout junto al hash del commit</p> <p>Ejemplo:</p> <p><pre><code>git checkout e19f2c1\n</code></pre> Al volver a esa versi\u00f3n, si queremos estar de vuelta al commit mas reciente:</p> <pre><code>git switch -\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#etiquetar-versiones","title":"Etiquetar versiones","text":"<p>Podemos etiquetar versiones usando el comando <code>tag</code></p> <p>Ejemplo:</p> <pre><code>git tag v1\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#visualizar-cambios","title":"Visualizar cambios","text":"<p>Podemos visualizar los cambios que se han hecho en un archivo usando el comando <code>diff</code></p> <p>Ejemplo:</p> <pre><code>git diff v1-beta v1\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#16-uso-avanzado-de-git","title":"1.6 Uso avanzado de Git","text":""},{"location":"Ud1/DGD/cheatsheet/#deshacer-cambios","title":"Deshacer cambios","text":"<p>Si queremos deshacer los cambios que se han hecho en el archivo <code>README.md</code> podemos usar el comando <code>restore</code></p> <p>Ejemplo:</p> <pre><code>git restore README.md\n</code></pre> <p>Deshacer cambios antes del commit.</p> <p>Si hemos realizado el comando <code>git add &lt;arhivo&gt;</code> y queremos deshacer los cambios antes de realizar el commit, podemos hacerlo de la siguiente manera:</p> <pre><code>git restore --staged &lt;archivo&gt;\n</code></pre> <p>Si en cambio ya hemos realizado el commit y queremos deshacerlo, lo haremos de la siguiente manera:</p> <pre><code>git revert HEAD --no-edit\n</code></pre> <p>Borrar commits de una rama:</p> <pre><code>git reset --hard &lt;commit_id&gt;\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#17-ramas","title":"1.7 Ramas","text":""},{"location":"Ud1/DGD/cheatsheet/#crear-una-rama","title":"Crear una rama","text":"<pre><code>git branch hola\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#cambiar-de-rama","title":"Cambiar de rama","text":"<p><pre><code>git checkout &lt;rama&gt;\n</code></pre> o <pre><code>git checkout -b &lt;nueva_rama&gt;\n</code></pre></p> <p>Con esta \u00faltima, creamos la rama y nos cambiamos a ella</p>"},{"location":"Ud1/DGD/cheatsheet/#fusionar-ramas","title":"Fusionar Ramas","text":"<p>Usaremos este comando cuando queramos fusionar una rama con otra, nos posicionaremos sobre la rama a la que queramos traerle los cambios de otra y ejecutamos el siguiente comando:</p> <pre><code>git merge &lt;rama_a_fusionar&gt;\n</code></pre> <p>Otra manera de fusionar es con el <code>rebase</code> que lo que hace el alterar el orden o la historia de creaci\u00f3n de cambios</p> <pre><code>git rebase &lt;rama_a_fusionar&gt;\n</code></pre>"},{"location":"Ud1/DGD/cheatsheet/#18-github","title":"1.8 GitHub","text":"<p>Para a\u00f1adirte un repositorio remoto a local, lo tendrias que hacer de la siguiente manera:</p> <pre><code>git remote add &lt;nombre&gt; &lt;url&gt;\n</code></pre> <p>Para subir los cambios al repositorio remoto:</p> <pre><code>git push &lt;nombre&gt; &lt;rama&gt;\n</code></pre> <p>Para actualizar los cambios del repositorio remoto al local:</p> <pre><code>git pull &lt;nombre&gt; &lt;rama&gt;\n</code></pre> <p>Si quieres ver solamente si ha habido algun cambio, sin pasarte los cambios puedes hacer lo siguiente:</p> <pre><code>git fetch &lt;nombre&gt;\n</code></pre> <p>Para poder hacer un pull aunque tengas cambios en local que aun no has subido, lo que puedes guardar tus archivos en una especie de pila con el siguiente comando:</p> <p><pre><code>git stash save\n</code></pre> y luego hacer el pull</p> <p><pre><code>git pull\n</code></pre> Y por \u00faltimo sacamos los cambios de la pila:</p> <pre><code>git stash pop\n</code></pre> <p>Podemos realizar todo a la vez con un solo comando:</p> <pre><code>git pull --autostash\n</code></pre>"},{"location":"Ud1/DMP/cheatsheet/","title":"\ud83d\udcdd UD1 - Git Cheatsheet","text":"<p>David Maratrat Pons </p>"},{"location":"Ud1/DMP/cheatsheet/#instalacion-de-git","title":"\ud83d\udcc1 Instalaci\u00f3n de Git","text":"Comando Descripci\u00f3n \ud83d\udc27 Linux <code>apt-get install git</code> Instalaci\u00f3n de git en distribuciones Debian <code>yum install git-core</code> Instalaci\u00f3n de git por instalador binario \ud83e\ude9f  Windows https://gitforwindows.org/ URL de descarga de git \ud83c\udf4f MacOS <code>brew install git</code> Instalaci\u00f3n de git para MacOS"},{"location":"Ud1/DMP/cheatsheet/#configuracion-de-git","title":"\u2699\ufe0f Configuraci\u00f3n de Git","text":"Comando Descripci\u00f3n <code>git config --global user.name \"nombre\"</code> Configurar el nombre de usuario a nivel global <code>git config --global user.email \"example@correo.com\"</code> Configurar el correo electr\u00f3nico a nivel global <code>git config --global push.default simple\"</code> Define estrategia por defecto al hacer git push <code>git config --global core.excludesfile $HOME/.gitignore_global</code> Excluir archivos/directorios dentro del archivo .gitignore_global"},{"location":"Ud1/DMP/cheatsheet/#uso-basico-de-git","title":"\ud83d\uddc3\ufe0f Uso b\u00e1sico de Git","text":"Comando Descripci\u00f3n <code>git init</code> Inicializa el repositorio git en la carpteta actual <code>git status</code> Permite ver el estado de los archivos del repositorio <code>git add .</code> A\u00f1adir todos los archivos al staging area <code>git add \"archivo/carpeta\"</code> A\u00f1ade el archivo/carpeta al staging area <code>git commit -m \"mensaje\"</code> Confirmar los cambios con un mensaje de commit <code>git push origin &lt;rama&gt;</code> Enviar los cambios al repositorio remoto <code>git checkout \"xxxxxxx\"</code> Cambia el HEAD de versi\u00f3n usando el hash acortado <code>git switch -</code> Cambia el HEAD al la \u00faltima versi\u00f3n"},{"location":"Ud1/DMP/cheatsheet/#ramas","title":"\ud83c\udf3f Ramas","text":"Comando Descripci\u00f3n <code>git branch</code> Listar todas las ramas locales <code>git branch \"nombre\"</code> Crea una rama nueva <code>git checkout \"nombre\"</code> Cambiar a una rama espec\u00edfica <code>git checkout -b &lt;nueva-rama&gt;</code> Crear y cambiar a una nueva rama <code>git branch -d &lt;rama&gt;</code> Eliminar una rama local <code>git merge &lt;rama&gt;</code> Fusionar otra rama en la rama actual <code>git merge &lt;rama&gt; --no-ff</code> Fusionar otra rama en la rama actual guardando el historial de cambios <code>git rebase &lt;rama&gt;</code> Aplica los commits de la rama actual sobre otra"},{"location":"Ud1/DMP/cheatsheet/#etiquetado","title":"\ud83c\udff7\ufe0f Etiquetado","text":"Comando Descripci\u00f3n <code>git tag v1</code> Asigna una tiqueta a una versi\u00f3n <code>git tag -d \"nombre_etiqueta\"</code> Elimina una etiqueta"},{"location":"Ud1/DMP/cheatsheet/#restaurado","title":"\u21a9\ufe0f Restaurado","text":"Comando Descripci\u00f3n <code>git restore \"archivo\"</code> Restaura los cambios de un archivo antes de haber hecho un <code>git add</code> <code>git restore --staged \"archivo\"</code> Devuelve el archivo al Working Directory <code>git revert HEAD --no-edit</code> Crea un nuevo commit deshaciendo los cambios realizados en el commit anterior <code>git reset --hard \"xxxxxxx\"</code> Devuelve el HEAD a un commit anterior y borra los cambios posteriores"},{"location":"Ud1/DMP/cheatsheet/#historial-y-versionado","title":"\u23f3 Historial y Versionado","text":"Comando Descripci\u00f3n <code>git config --global alias.hist \"log --pretty=format:'%h %ad \\| %s%d [%an]' --graph --date=short\"</code> Crea un alias para ver los cambios formatados <code>git log</code> Permite ver el historial de commits <code>git log --oneline</code> Permite ver los cambios realizados en una linea <code>git show \"xxxxxxx\"</code> Permite ver los detalles de un commit en espec\u00edfico <code>git remote show origin</code> Podemos ver la configuraci\u00f3n de este repositorio remoto <code>git diff</code> Permite ver los cambios entre commits o ramas"},{"location":"Ud1/DMP/cheatsheet/#remoto","title":"\ud83c\udf10 Remoto","text":"Comando Descripci\u00f3n <code>git clone git@github.com:tu/repositorio.git</code> Clona un repositorio en local del remoto <code>git remote add origin git@github.com:tu/repositorio.git</code> Asocia tu repositorio local con el remoto <code>git branch -M main</code> Cambia el nombre de la rama actual a main (compatibilidad github) <code>git push -u origin main</code> Envia los cambios de main a origin y establece origin/main como rama por defecto para futuros pull/push <code>git merge &lt;origin/main&gt;</code> Fusionar una rama del remoto en la rama local actual <code>git rebase &lt;origin/main&gt;</code> Aplica los commits de una rama del remoto en la rama local actual <code>git rebase --continue</code> Continua con el rebase despu\u00e9s de solucionar un conflicto"},{"location":"Ud1/DMP/cheatsheet/#actualizacion-y-sincronizacion","title":"\ud83d\udd04 Actualizaci\u00f3n y Sincronizaci\u00f3n","text":"Comando Descripci\u00f3n <code>git pull origin &lt;rama&gt;</code> Descargar y fusionar cambios desde el remoto <code>git pull --rebase origin &lt;rama&gt;</code> Descargar y fusionar (mediante rebase) cambios desde el remoto <code>git push origin main</code> Envia los cambios locales de la rama main al repositorio origin <code>git fetch</code> Traer los cambios remotos sin fusionar <code>git merge &lt;rama&gt;</code> Fusionar otra rama en la rama actual"},{"location":"Ud1/DMP/cheatsheet/#git-flow","title":"\ud83d\udd00 Git Flow","text":"Comando Descripci\u00f3n <code>git flow init</code> Inicializa el espacio de trabajo <code>git flow feature start feature_branch</code> Crea una rama de funcionalidad <code>git flow feature stop feature_branch</code> Elimina una rama de funcionalidad <code>git flow release</code> Crea la rama de publicaci\u00f3n de versiones <code>git flow hotfix start hotfix_branch</code> Crea una rama para parchear errores de las releases <code>git flow hotfix finish hotfix_branch</code> Cierra una rama de parchedo de errores de las releases"},{"location":"Ud1/DMP/cheatsheet/#stash","title":"\ud83d\udce5 Stash","text":"Comando Descripci\u00f3n <code>git stash</code> Guardar temporalmente los cambios sin hacer commit <code>git stash save</code> Guarda los cambios sin hacer commit <code>git stash apply</code> Recupera el cambio guardado m\u00e1s reciente <code>git stash pop</code> Recuperar los cambios guardados <code>git stash list</code> Muestra los cambios guardados <code>git stash show</code> Muestra un resumen de los ficheros modificados en la pila <code>git stash branch</code> Permite crear una nueva rama a partir del \u00faltimo stash <code>git stash clear</code> Borra todos los stash de la pila <code>git stash drop</code> Permite borrar un unico stash de la pila"},{"location":"Ud1/DMP/cheatsheet/#worktree","title":"\ud83c\udf33 Worktree","text":"Comando Descripci\u00f3n <code>git worktree add /directorio master</code> Crea un directorio de trabajo temporal con el contenido de master <code>git worktree add -b fix /directorio master</code> Crea la rama fix desde master <code>git worktree list</code> GMuestra el listado de directorios y espacios de trabajo <code>git worktree delete fix</code> Borra un espacio de trabajo"},{"location":"Ud1/DMP/cheatsheet/#blame","title":"\ud83d\udd75\ufe0f Blame","text":"Comando Descripci\u00f3n <code>git blame archivo</code> Permite saber qui\u00e9n fue el \u00faltimo en modificar una l\u00ednea concreta de c\u00f3digo, en qu\u00e9 commit y en qu\u00e9 fecha"},{"location":"Ud1/DMP/cheatsheet/#otras-utilidades","title":"\ud83e\uddf0 Otras Utilidades","text":"Comando Descripci\u00f3n <code>git rm &lt;archivo&gt;</code> Eliminar un archivo del repositorio y del directorio <code>git mv &lt;archivo-nuevo&gt;</code> Renombrar o mover un archivo <code>git rebase &lt;rama&gt;</code> Aplicar commits de una rama sobre otra <code>ssh-keygen -t rsa -C \"Cuenta GitHub\"</code> Crea par de claves para poder usar github con ssh <code>Closes #1</code> Cierra una incid\u00e9ncia desde la descripci\u00f3n de un commit"},{"location":"Ud1/DMP/cheatsheet/#ayuda-y-documentacion","title":"\ud83d\udd0d Ayuda y Documentaci\u00f3n","text":"Comando Descripci\u00f3n <code>git help &lt;comando&gt;</code> Ver la ayuda detallada de un comando espec\u00edfico <code>git --version</code> Ver la versi\u00f3n de Git instalada"},{"location":"Ud1/EGM/cheatsheet/","title":"1 Instalaci\u00f3n y configuraci\u00f3n de Git","text":""},{"location":"Ud1/EGM/cheatsheet/#11-instalacion-de-git","title":"1.1 Instalaci\u00f3n de Git","text":"<p>Para instalar Git en tu sistema operativo, sigue los siguientes pasos:</p> <ol> <li>Primero tienes que actualizar tu sistema operativo :</li> </ol> <pre><code>    $ sudo apt-get update &amp;&amp; upgrade\n</code></pre> <ol> <li>Instalaci\u00f3n en Linux :</li> </ol> <pre><code>    $ apt-get install git\n</code></pre> <ol> <li>Comprueba la versi\u00f3n de git que est\u00e1s usando :</li> </ol> <pre><code>    $ git --version\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#12-configuracion-de-git","title":"1.2 Configuraci\u00f3n de Git","text":"<p>Debes establecer tu nombre de usuario y direcci\u00f3n de correo electr\u00f3nico. Esto es importante porque las confirmaciones de cambios <code>(commits)</code> en Git usan esta informaci\u00f3n.</p> <pre><code>    $ git config --global user.name \"John Doe\"\n    $ git config --global user.email johndoe@example.com\n    $ git config --global push.default simple\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#13-configuracion-de-la-clave-ssh","title":"1.3 Configuraci\u00f3n de la clave SSH","text":""},{"location":"Ud1/EGM/cheatsheet/#2-uso-basico-de-git","title":"2 Uso b\u00e1sico de Git","text":""},{"location":"Ud1/EGM/cheatsheet/#21-estados-de-un-archivo-en-git","title":"2.1 Estados de un archivo en GIT","text":"<p>Un archivo puede estar en alguno de los siguientes estados:</p> <ul> <li>Sin seguimiento (untracked)</li> <li>Modificado (modified)</li> <li>Preparado (staged)</li> <li>Confirmado (commited)</li> </ul> <p>Para consultar el estado de los archivos usamos el comando:</p> <pre><code>    $ git status\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#22-crear-un-proyecto","title":"2.2 Crear un proyecto","text":"<ol> <li>Creamos un directorio donde colocar el c\u00f3digo:</li> </ol> <pre><code>    $ mkdir curso-de-git\n    $ cd curso-de-git\n</code></pre> <ol> <li>Creamos un fichero <code>hola.php</code> que muestre Hola Mundo :</li> </ol> <pre><code>&lt;?php\necho \"Hola Mundo\\n\";\n?&gt;\n</code></pre> <ol> <li>Crear el repositorio :</li> </ol> <pre><code>    $ git init\n    Initialized empty Git repository in /home/admin/curso-de-git/.git/\n</code></pre> <p>El archivo <code>hola.php</code> estar\u00e1 en el Workspace o Working Directory.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n        |                |                | \n    hola.php             |                | \n        |                |                | \n        +                +                +\n</code></pre> <ol> <li>A\u00f1adir la aplicaci\u00f3n :</li> </ol> <pre><code>    $ git add hola.php\n    $ git add . (Para a\u00f1adir todos )\n</code></pre> <ol> <li>Comprobar el estado del proyecto :</li> </ol> <pre><code>    $ git status\n</code></pre> <p>Al ejecutar el <code>git add</code>, el archivo pasar\u00e1 a la \"Staging area\" o \u00e1rea de preparaci\u00f3n.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n        |                |                | \n        |             hola.php            |\n        |                |                | \n        +                +                +\n</code></pre> <ol> <li>Hacer un commit :</li> </ol> <pre><code>    $ git commit -m \"Creaci\u00f3n del proyecto\"\n</code></pre> <p>El archivo pasar\u00e1 al \"Local Ropository\" y se le asignar\u00e1 un <code>hash</code> o c\u00f3digo de inserci\u00f3n.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Workspace  |  |   Staging   |  |    Local    | \n|             |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n        |                |                | \n        |                |             hola.php (e19f2c1)\n        |                |                | \n        +                +                +\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#221-ignorando-archivos","title":"2.2.1 Ignorando archivos","text":"<p>Para indicarle a git que debe ignorar un archivo, se puede crear un fichero llamado <code>.gitignore</code>, bien en la ra\u00edz del proyecto o en los subdirectorios que queramos.</p> <p>Dicho fichero puede contener patrones, uno en cada l\u00ednea, que especiquen qu\u00e9 archivos deben ignorarse. El formato es el siguiente:</p> <pre><code>    # .gitignore\n    dir1/           # ignora todo lo que contenga el directorio dir1\n    !dir1/info.txt  # El operador ! excluye del ignore a dir1/info.txt (s\u00ed se guardar\u00eda)\n    dir2/*.txt      # ignora todos los archivos txt que hay en el directorio dir2\n    dir3/**/*.txt   # ignora todos los archivos txt que hay en el dir3 y sus subdirectorios\n    *.o             # ignora todos los archivos con extensi\u00f3n .o en todos los directorios\n</code></pre> <p>Los archivos que hemos metido en <code>.gitignore</code>, deben ser aquellos ficheros temporales o de configuraci\u00f3n que se pueden crear durante las fases de compilaci\u00f3n o ejecuci\u00f3n del programa</p>"},{"location":"Ud1/EGM/cheatsheet/#222-ignorando-archivos-globalmente","title":"2.2.2 Ignorando archivos globalmente","text":"<p>Ejemplos de lo que se puede ignorar de forma global son los ficheros temporales del sistema operativo <code>(*~, .nfs*)</code> y los que generan los entornos de desarrollo.</p> <p>Para indicar a git que queremos tener un fichero de gitignore global, tenemos que configurarlo con la siguiente orden:</p> <pre><code>    $ git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre> <p>Ahora podemos crear un archivo llamado <code>.gitignore_global</code> en la ra\u00edz de nuestra cuenta con este contenido:</p> <pre><code># Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n*~\n*.swp\n\n# IDEs               #\n######################\n.idea\n.settings/\n.classpath\n.project\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#23-trabajando-con-el-historial","title":"2.3 Trabajando con el historial","text":""},{"location":"Ud1/EGM/cheatsheet/#231-observando-los-cambios","title":"2.3.1 Observando los cambios","text":"<p>Con la orden <code>$git log</code> podemos ver todos los cambios que hemos hecho al directorio <code>curso-de-git</code>.</p> <pre><code>    $ git log\n    commit fd4da946326fbe8b24e89282ad25a71721bf40f6  (HEAD -&gt; master)\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:51:01 2013 +0200\n\n        Se a\u00f1ade un comentario al cambio del valor por defecto\n\n    commit 3283e0d306c8d42d55ffcb64e456f10510df8177\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:50:00 2013 +0200\n\n        Se a\u00f1ade un par\u00e1metro por defecto\n\n    commit efc252e11939351505a426a6e1aa5bb7dc1dd7c0\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:13:26 2013 +0200\n\n        Parametrizaci\u00f3n del programa\n\n    commit e19f2c1701069d9d1159e9ee21acaa1bbc47d264\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 11:55:23 2013 +0200\n\n        Creaci\u00f3n del proyecto\n</code></pre> <p>Para salir escribe <code>q</code>.</p>"},{"location":"Ud1/EGM/cheatsheet/#232-versiones-abreviadas","title":"2.3.2 Versiones abreviadas","text":"<pre><code>    $ git log --oneline\n    $ git log --oneline --max-count=2\n    $ git log --oneline --since='5 minutes ago'\n    $ git log --oneline --until='5 minutes ago'\n    $ git log --oneline --author=sergio   # Cambia sergio por tu nombre de usuario\n    $ git log --oneline --all\n    $ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#233-crear-alias","title":"2.3.3 Crear alias","text":"<p>Como estas \u00f3rdenes son demasiado largas, Git nos permite crear alias para crear nuevas \u00f3rdenes parametrizadas. </p> <ol> <li>Para ello podemos configurar nuestro entorno con la orden <code>git config</code> de la siguiente manera :</li> </ol> <pre><code>    $ git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> <ol> <li>Ahora basta con ejecutar :</li> </ol> <pre><code>    $ git hist\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#234-recuperando-versiones-anteriores","title":"2.3.4 Recuperando versiones anteriores","text":"<ol> <li>Regresar a un commit anterior :</li> </ol> <p>Cada cambio es etiquetado por un <code>hash</code>, para poder regresar a ese momento del estado del proyecto se usa la orden :</p> <pre><code>    $ git checkout \n</code></pre> <p>Prueba con el <code>hash</code> de tu primer commit:</p> <pre><code>    $ git checkout e19f2c1\n    Note: switching to 'e19f2c1'.\n\n    You are in 'detached HEAD' state. You can look around, make experimental\n    changes and commit them, and you can discard any commits you make in this\n    state without impacting any branches by switching back to a branch.\n\n    If you want to create a new branch to retain commits you create, you may\n    do so (now or later) by using -c with the switch command. Example:\n\n    git switch -c &lt;new-branch-name&gt;\n\n    Or undo this operation with:\n\n    git switch -\n\n    urn off this advice by setting config variable advice.detachedHead to false\n\n    HEAD is now at e19f2c1 Parametrizaci\u00f3n del programa   \n</code></pre> <p>Esto pone el repositorio en un estado <code>\"detached HEAD\"</code>, donde puedes explorar o hacer cambios sin afectar ninguna rama.</p> <p>Los cambios que realices en este estado no se guardar\u00e1n a menos que los comites a una nueva rama:</p> <pre><code>    $ git switch -c &lt;nombre-nueva-rama&gt;\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#235-volver-a-la-ultima-rama","title":"2.3.5 Volver a la \u00faltima rama","text":"<p>Si decides no mantener los cambios hechos en el estado <code>\"detached HEAD\"</code>.</p> <p>Puedes volver a la rama en la que estabas antes con:</p> <pre><code>    $ git switch -\n</code></pre> <p>Los cambios no comiteados en el estado <code>\"detached HEAD\"</code> se perder\u00e1n.</p>"},{"location":"Ud1/EGM/cheatsheet/#236-volver-a-la-rama-master","title":"2.3.6 Volver a la rama master","text":"<p>Para regresar a la rama principal <code>(master o main)</code> usa:</p> <pre><code>    $ git checkout master\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#237-etiquetar-versiones","title":"2.3.7 Etiquetar versiones","text":"<p>Listar todas las etiquetas:</p> <pre><code>    $ git tag\n</code></pre> <p>Para facilitar la navegaci\u00f3n y recuperaci\u00f3n de versiones sin usar hashes, puedes etiquetar un commit con un nombre amigable:</p> <pre><code>    $ git tag &lt;nombre-tag&gt;\n</code></pre> <p>Ejemplo:</p> <pre><code>    $ git tag v1\n</code></pre> <p>Para etiquetar un commit anterior, puedes usar:</p> <pre><code>    $ git checkout v1^\n    $ git tag v1-beta\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#238-ver-cambios-entre-versiones","title":"2.3.8 Ver cambios entre versiones","text":"<p>Puedes comparar los cambios entre dos etiquetas o commits con:</p> <pre><code>    $ git diff &lt;version-antigua&gt; &lt;version-nueva&gt;\n</code></pre> <p>Ejemplo:</p> <pre><code>    $ git diff v1-beta v1\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#239-borrar-etiquetas","title":"2.3.9 Borrar etiquetas","text":"<p>Si necesitas eliminar una etiqueta:</p> <pre><code>    $ git tag -d &lt;nombre-etiqueta&gt;\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#2310-visualizar-el-historial-con-etiquetas","title":"2.3.10 Visualizar el historial con etiquetas","text":"<p>Para ver el historial del proyecto junto con las etiquetas:</p> <pre><code>    $ git hist master --all\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#3-uso-avanzado-de-git","title":"3 Uso avanzado de Git","text":""},{"location":"Ud1/EGM/cheatsheet/#31-deshacer-cambios","title":"3.1  Deshacer cambios","text":""},{"location":"Ud1/EGM/cheatsheet/#311-deshaciendo-cambios-antes-de-la-fase-de-staging","title":"3.1.1 Deshaciendo cambios antes de la fase de staging","text":"<ol> <li>Volvemos a la rama m\u00e1ster y vamos a modificar el comentario que pusimos:</li> </ol> <pre><code>    $ git checkout master\n    Previous HEAD position was 3283e0d... Se a\u00f1ade un par\u00e1metro por defecto\n    Switched to branch 'master'\n</code></pre> <p>Recordamos, la situaci\u00f3n es la siguiente:</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <ol> <li>Modificamos <code>hola.php</code> de la siguiente manera :</li> </ol> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <ol> <li>Comprobamos el estado :</li> </ol> <pre><code>    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Tenemos hola.php en Working Directory y nada en Staging Area.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n    hola.php            |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <ol> <li>El mismo Git nos indica que debemos hacer para a\u00f1adir los cambios o para deshacerlos. </li> </ol> <p>En este caso los desharemos :</p> <pre><code>    $ git restore hola.php\n\n    $ git status\n    On branch master\n    nothing to commit, working tree clean\n\n    $ cat hola.php\n    &lt;?php\n    // El nombre por defecto es Mundo\n    $nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n    @print \"Hola, {$nombre}\\n\";\n    ?&gt;\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#312-deshaciendo-cambios-antes-del-commit","title":"3.1.2 Deshaciendo cambios antes del commit","text":"<p>Vamos a hacer lo mismo que la vez anterior, pero esta vez s\u00ed a\u00f1adiremos el cambio al <code>staging</code> (sin hacer <code>commit</code>).</p> <ol> <li>Volvemos a modificar <code>hola.php</code> igual que la anterior ocasi\u00f3n :</li> </ol> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <ol> <li>Lo a\u00f1adimos al <code>staging</code> :</li> </ol> <p><pre><code>    $ git add hola.php\n\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git restore --staged &lt;file&gt;...\" to unstage)\n\n       modified:   hola.php\n</code></pre> Ahora tenemos una nueva versi\u00f3n de <code>hola.php</code> en Staging Area.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |             hola.php            |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <ol> <li>Sacamos el archivo de la zona de Staging :</li> </ol> <pre><code>    $ git restore --staged hola.php\n\n    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Vuelve a estar en Working Directory.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n    hola.php            |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <ol> <li>Restaruramos la \u00faltima versi\u00f3n en Local Repository, eliminando la versi\u00f3n en Working Directory :</li> </ol> <pre><code>  $ git restore hola.php\n</code></pre> <p>Y ya tenemos nuestro repositorio limpio otra vez.</p> <p>Como vemos hay que hacerlo en dos pasos:</p> <ul> <li>Uno para pasar el fichero de Staging Area a Working Directory y limpiar as\u00ed la Staging Area.</li> <li>Otro para descartar los cambios en Working Directory.</li> </ul>"},{"location":"Ud1/EGM/cheatsheet/#313-deshaciendo-commits-no-deseados","title":"3.1.3 Deshaciendo commits no deseados","text":"<p>Si hemos hecho un commit y queremos deshacerlo, podemos usar la orden <code>$ git revert</code> :</p> <p><pre><code>    $ git revert HEAD --no-edit\n    [master 817407b] Revert \"Ups... este commit est\u00e1 mal\"\n    1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> Explicaci\u00f3n del comando:</p> <ul> <li>git revert HEAD: Reviertes el \u00faltimo commit (el que apunta HEAD). Esto crea un nuevo commit que deshace los cambios realizados en ese commit.</li> <li>--no-edit: Este par\u00e1metro le indica a Git que use el mensaje de commit por defecto que genera autom\u00e1ticamente (algo como \"Revert 'mensaje original del commit'\") y no abra el editor para modificarlo.</li> </ul> <pre><code>    $ git hist\n    * 817407b 2013-06-16 | Revert \"Ups... este commit est\u00e1 mal\" (HEAD -&gt; master) [Sergio G\u00f3mez]\n    * 5a5d067 2013-06-16 | Ups... este commit est\u00e1 mal [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#314-borrar-commits-de-una-rama","title":"3.1.4 Borrar commits de una rama","text":"<p>Para borrar commits y no dejar huella en el historial, utilizamos <code>$ git reset</code> :</p> <pre><code>    $ git reset --hard &lt;nombre-o-hash-del-commit&gt;\n    $ git reset --hard v1\n    HEAD is now at fd4da94 Se a\u00f1ade un comentario al cambio del valor por defecto\n\n    $ git hist\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (HEAD -&gt; master, tag: v1) [Sergio G\u00f3me\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Danger</p> <p>La orden reset es una operaci\u00f3n delicada. Debe evitarse si no se sabe bien lo que se est\u00e1 haciendo, sobre todo cuando se trabaja en repositorios compartidos, porque podr\u00edamos alterar la historia de cambios lo cual puede provocar problemas de sincronizaci\u00f3n.</p>"},{"location":"Ud1/EGM/cheatsheet/#315-modificar-un-commit","title":"3.1.5 Modificar un commit","text":"<p>Si olvidaste a\u00f1adir un cambio a un commit reciente, puedes modificar el \u00faltimo commit.</p> <ol> <li>Volvemos a modificar nuestro archivo :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <ol> <li>Usamos <code>commit --amend</code> que nos permite modificar el \u00faltimo estado confirmado, sustituy\u00e9ndolo por el estado actual :</li> </ol> <pre><code>    $ git add hola.php\n\n    $ git commit --amend -m \"A\u00f1adido el autor del programa y su email\"\n    [master 96a39df] A\u00f1adido el autor del programa y su email\n     1 file changed, 1 insertion(+)\n\n    $ git hist\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email (HEAD -&gt; master) [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Danger</p> <p>Nunca modifiques un commit que ya hayas sincronizado con otro repositorio o que hayas recibido de \u00e9l. Estar\u00edas alterando la historia de cambios y provocar\u00edas problemas de sincronizaci\u00f3n.</p>"},{"location":"Ud1/EGM/cheatsheet/#32-moviendo-y-borrando-archivos","title":"3.2  Moviendo y borrando archivos","text":""},{"location":"Ud1/EGM/cheatsheet/#321-mover-un-archivo-a-otro-directorio-con-git","title":"3.2.1 Mover un archivo a otro directorio con git","text":"<p>Para mover archivos usaremos la orden <code>$ git mv</code>:</p> <pre><code>    $ mkdir lib\n\n    $ git mv hola.php lib\n\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n      renamed:    hola.php -&gt; lib/hola.php\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#322-borrar-archivos","title":"3.2.2 Borrar archivos","text":"<ol> <li>Borrar un archivo :</li> </ol> <pre><code>    $ git rm hola.php\n</code></pre> <ol> <li>Guardar los cambios :</li> </ol> <pre><code>    $ git commit -m \"Movido hola.php a lib.\"\n    [master 8c2a509] Movido hola.php a lib.\n     1 file changed, 0 insertions(+), 0 deletions(-)\n     rename hola.php =&gt; lib/hola.php (100%)\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#4-ramas","title":"4 Ramas","text":""},{"location":"Ud1/EGM/cheatsheet/#41-administracion-de-ramas","title":"4.1 Administraci\u00f3n de ramas","text":""},{"location":"Ud1/EGM/cheatsheet/#411-crear-una-nueva-rama","title":"4.1.1 Crear una nueva rama","text":"<p>Es conveniente trabajar en una nueva rama, para no modificar la rama principal y dejarla inestable. </p> <p>Aunque la orden para manejar ramas es <code>$ git branch</code> podemos usar tambi\u00e9n <code>$ git checkout</code>.</p> <ol> <li>Crear una nueva rama :</li> </ol> <pre><code>    $ git branch hola\n</code></pre> <p>Info</p> <p>Si usamos <code>git branch</code> sin ning\u00fan argumento, nos devolver\u00e1 la lista de ramas disponibles.</p> <ol> <li>La creaci\u00f3n de una rama no cambia autom\u00e1ticamente a esa rama, por lo que debemos cambiar con :</li> </ol> <pre><code>  $ git checkout hola\n    Switched to branch 'hola'\n</code></pre> <p>Tip</p> <p>Puedes hacer ambas acciones en un solo paso :      * Con el par\u00e1metro <code>-b</code> de <code>git checkout</code> podemos cambiarnos a una rama que, si no existe, se crea instant\u00e1neamente.</p> <pre><code>    $ git checkout -b hola\n    Switched to a new branch 'hola'\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#412-modificaciones-en-la-rama-secundaria","title":"4.1.2 Modificaciones en la rama secundaria","text":"<ol> <li>A\u00f1adimos un nuevo archivo en el directorio <code>lib</code> llamado <code>HolaMundo.php</code> :</li> </ol> <pre><code>&lt;?php\n\nclass HolaMundo\n{\n   private $nombre;\n\n   function __construct($nombre)\n   {\n      $this-&gt;nombre = $nombre;\n   }\n\n   function __toString()\n   {\n      return sprintf (\"Hola, %s.\\n\", $this-&gt;nombre);\n   }\n}\n?&gt;\n</code></pre> <ol> <li>Modificamos <code>hola.php</code> :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <ol> <li>Hacemos commit de los cambios uno por uno :</li> </ol> <pre><code>    $ git add lib/HolaMundo.php\n    $ git commit -m \"A\u00f1adida la clase HolaMundo\"\n\n    $ git add lib/hola.php\n    $ git commit -m \"hola usa la clase HolaMundo\"\n</code></pre> <ol> <li>Y con la orden <code>git checkout</code> podemos movernos entre ramas :</li> </ol> <pre><code>    $ git checkout master\n    Switched to branch 'master'\n\n    $ git checkout hola\n    Switched to branch 'hola'\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#413-modificaciones-en-la-rama-master","title":"4.1.3 Modificaciones en la rama master","text":"<ol> <li>Cambiamos a la rama <code>master</code> :</li> </ol> <pre><code>    $ git checkout master\n</code></pre> <ol> <li>A\u00f1adimos un archivo <code>README.md</code> :</li> </ol> <pre><code>    $ echo \"# Curso de GIT\" &gt; README.md\n    $ git add README.md\n    $ git commit -m \"A\u00f1adido README.md\"\n</code></pre> <ol> <li>Podemos visualizar todos los cambios en todas las ramas usando :</li> </ol> <pre><code>    $ git hist --all\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#42-fusion-de-ramas-y-resolucion-de-conflictos","title":"4.2 Fusi\u00f3n de ramas y resoluci\u00f3n de conflictos","text":""},{"location":"Ud1/EGM/cheatsheet/#421-mezclar-ramas","title":"4.2.1 Mezclar ramas","text":"<p>Podemos fusionar los cambios de una rama con otra usando <code>$git merge</code>.</p> <p>Por ejemplo, fusionamos los cambios de <code>master</code> en la rama <code>hola</code> :</p> <ol> <li>Cambiamos a la rama <code>hola</code> :</li> </ol> <pre><code>  $ git checkout hola\n    Switched to branch 'hola'\n</code></pre> <ol> <li>Ejecutamos el <code>$git merge nombrerama</code> con el nombre de la rama cuyos cambios queremos incorporar a la actual :</li> </ol> <pre><code> $ git merge master\n    Merge made by the 'ort' strategy.\n     README.md | 3 +++\n     1 file changed, 3 insertions(+)\n     create mode 100644 README.md\n</code></pre> <ol> <li>Comprobamos el historial de cambios :</li> </ol> <pre><code> $ git hist --all\n    *   9c6ac06 2013-06-16 | Merge branch 'master' into hola (HEAD -&gt; hola) [Sergio G\u00f3mez]\n    |\\\n    | * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    * | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n    * | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    |/\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>De esa forma se puede trabajar en una rama secundaria incorporando los cambios de la rama principal o de otra rama.</p>"},{"location":"Ud1/EGM/cheatsheet/#422-resolver-conflictos","title":"4.2.2 Resolver conflictos","text":"<p>Un conflicto es cuando se produce una fusi\u00f3n que Git no es capaz de resolver.</p> <p>Vamos a modificar la rama <code>master</code> para crear uno con la rama <code>hola</code>:</p> <ol> <li>Cambiamos a <code>master</code> :</li> </ol> <pre><code> $ git checkout master\n    Switched to branch 'master'\n</code></pre> <ol> <li>Modificamos nuestro archivo <code>hola.php</code> :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <ol> <li>Guardamos los cambios :</li> </ol> <pre><code>    $ git add lib/hola.php\n\n    $ git commit -m \"Programa interactivo\"\n    [master 9c85275] Programa interactivo\n     1 file changed, 2 insertions(+), 2 deletions(-)\n\n    $ git hist --all\n</code></pre> <ol> <li>Comprobamos el resultado :</li> </ol> <pre><code> $ git hist --all\n    * 8ca56f7 2013-06-16 | Programa interactivo (HEAD -&gt; master) [Sergio G\u00f3mez]\n    | *   9c6ac06 2013-06-16 | Merge branch 'master' into hola (hola) [Sergio G\u00f3mez]\n    | |\\  \n    | |/  \n    |/| \n    * | c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    | * 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n    | * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    |/\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <ol> <li>Volvemos a la rama <code>hola</code> : </li> </ol> <pre><code>  $ git checkout hola\n    Switched to branch 'hola'\n</code></pre> <ol> <li>Fusionamos. </li> </ol> <pre><code>  $ git merge master\n    Auto-merging lib/hola.php\n    CONFLICT (content): Merge conflict in lib/hola.php\n    Automatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Recuerda que hemos modificado hola.php en la rama <code>master</code> y ahora hay l\u00edneas distintas dentro de ese fichero en cada una de las ramas.</p> <ol> <li>Editamos nuestro archivo <code>lib/hola.php</code> y obtendremos algo similar a esto :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n=======\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n?&gt;\n</code></pre> <ol> <li>Resolvemos el conflicto, dejando el archivo como sigue :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\n\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <ol> <li>Confirmamos los cambios :</li> </ol> <pre><code>    $ git add lib/hola.php\n    $ git commit -m \"Solucionado el conflicto al fusionar con la rama master\"\n    [hola a36af04] Solucionado el conflicto al fusionar con la rama master\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#423-rebasing-vs-merging","title":"4.2.3 Rebasing vs Merging","text":""},{"location":"Ud1/EGM/cheatsheet/#4231-rebasing","title":"4.2.3.1 Rebasing","text":"<p>Rebasing es otra t\u00e9cnica para fusionar distinta a merge y usa la orden <code>$git rebase</code> : </p> <pre><code>El rebase Vuelve a aplicar todos los cambios a la rama m\u00e1ster, desde su nodo m\u00e1s reciente.\nEso significa que se modifica el orden o la historia de creaci\u00f3n de los cambios. \nPor eso rebase no debe usarse si el orden es importante o si la rama es compartida.\n</code></pre> <ol> <li>Vamos a dejar nuestro proyecto como estaba antes del fusionado.</li> </ol> <pre><code>    $ git checkout hola\n    Switched to branch 'hola'\n\n    $ git hist\n    *   a36af04 2013-06-16 | Solucionado el conflicto al fusionar con la rama master (HEAD -&gt; hola) [Sergio G\u00f3mez]\n    |\\\n    | * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n    * | 9c6ac06 2013-06-16 | Merge branch 'master' into hola [Sergio G\u00f3mez]\n    |\\|\n    | * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    * | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n    * | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    |/\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Para ello podemos usar la orden <code>git reset</code> que nos permite mover HEAD donde queramos.</p> <pre><code>    $ git reset --hard 9862f33\n    HEAD is now at 9862f33 hola usa la clase HolaMundo\n</code></pre> <ol> <li>El estado despu\u00e9s de deshacer los <code>merge</code>:</li> </ol> <pre><code> $ git hist --all\n    * 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD, hola) [Sergio G\u00f3mez]\n    * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    | * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n    | * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    |/\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <ol> <li>Vamos a hacer un rebase. Continuamos en la rama <code>hola</code> y ejecutamos lo siguiente :</li> </ol> <pre><code> $ git rebase master\n    Auto-merging lib/hola.php\n    CONFLICT (content): Merge conflict in lib/hola.php\n    error: could not apply 9862f33... hola usa la clase HolaMundo\n    hint: Resolve all conflicts manually, mark them as resolved with\n    hint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\n    hint: You can instead skip this commit: run \"git rebase --skip\".\n    hint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\n    Could not apply 9862f33... hola usa la clase HolaMundo\n</code></pre> <ol> <li>Resolvemos el conflicto del archivo <code>hola.php</code> :</li> </ol> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\n\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <ol> <li>A\u00f1adimos los cambios en <code>staging</code> : </li> </ol> <pre><code>  $ git add lib/hola.php\n    $ git status\n    interactive rebase in progress; onto 269eaca\n    Last commands done (2 commands done):\n        pick 4e0f425 A\u00f1adida clase HolaMundo\n        pick 9862f33 hola usa la clase HolaMundo\n    No commands remaining.\n    You are currently rebasing branch 'hola' on '8ca56f7'.\n        (all conflicts fixed: run \"git rebase --continue\")\n\n    Changes to be committed:\n        (use \"git restore --staged &lt;file&gt;...\" to unstage)\n            modified:   lib/hola.php  \n</code></pre> <ol> <li>En esta ocasi\u00f3n, no tenemos que hacer <code>$git commit</code>, sino continuar con el <code>rebase</code> :</li> </ol> <pre><code> $ git rebase --continue\n    [detached HEAD 9862f33] hola usa la clase HolaMundo\n    1 file changed, 3 insertions(+), 1 deletion(-)\n    Successfully rebased and updated refs/heads/hola.\n</code></pre> <ol> <li>El \u00e1rbol tiene un aspecto distinto y mucho m\u00e1s limpio :</li> </ol> <pre><code> $ git hist --all\n    * 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; hola) [Sergio G\u00f3mez]\n    * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n    * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#43-mezclando-con-la-rama-master","title":"4.3 Mezclando con la rama master","text":"<p>Una vez hemos terminado de implementar los cambios en la rama secundaria, llevamos los cambios a la rama principal.</p> <ol> <li>Cambiamos a la rama <code>master</code> :</li> </ol> <pre><code> $ git checkout master\n    Switched to branch 'master'\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#431-merge-fast-forward","title":"4.3.1 Merge fast-forward","text":"<ol> <li>Usamos <code>git merge</code> de tipo <code>fast-forward</code> para hacer una fusi\u00f3n normal y que no deja rastro :</li> </ol> <pre><code>$ git merge hola\n    Updating c3e65d0..491f1d2\n    Fast-forward\n     lib/HolaMundo.php | 16 ++++++++++++++++\n     lib/hola.php      |  4 +++-\n     2 files changed, 19 insertions(+), 1 deletion(-)\n     create mode 100644 lib/HolaMundo.php\n</code></pre> <ol> <li>Comprobamos el \u00e1rbol :</li> </ol> <pre><code>$ git hist --all\n     * 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; master, hola) [Sergio G\u00f3mez]\n     * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n     * 9c85275 2013-06-16 | Programa interactivo [Sergio G\u00f3mez]\n     * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n     * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n     * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n     * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n     * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n     * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n     * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#432-merge-no-fast-forward-no-ff","title":"4.3.2 Merge --no-fast-forward (--no-ff)","text":"<ol> <li>Reseteamos <code>master</code> al estado <code>\"Programa interactivo\"</code> :</li> </ol> <pre><code>$ git reset --hard 9c85275\n</code></pre> <ol> <li>Comprobamos el \u00e1rbol :</li> </ol> <pre><code> $ git hist\n    * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n    * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <ol> <li>Usamos <code>git merge</code> de tipo <code>--no-fast-forward</code> (<code>--no-ff</code>) para hacer una fusi\u00f3n que deja rastro de las dos ramas :</li> </ol> <pre><code>$ git merge -m \"Aplicando los cambios de la rama hola\" --no-ff hola\n    Merge made by the 'recursive' strategy.\n     lib/HolaMundo.php | 16 ++++++++++++++++\n     lib/hola.php      |  4 +++-\n     2 files changed, 19 insertions(+), 1 deletion(-)\n     create mode 100644 lib/HolaMundo.php\n</code></pre> <ol> <li>Comprobamos el \u00e1rbol :</li> </ol> <pre><code> $ git hist --all\n    *   2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (HEAD -&gt; master) [Sergio Gomez]\n    *\\\n    | * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n    | * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n    |/\n    * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n    * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n    * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>En la siguiente imagen se puede ver la diferencia:</p> <p></p>"},{"location":"Ud1/EGM/cheatsheet/#5-github","title":"5 Github","text":""},{"location":"Ud1/EGM/cheatsheet/#51-tu-clave-publicaprivada","title":"5.1 Tu clave p\u00fablica/privada","text":"<p>Muchos servidores Git utilizan autenticaci\u00f3n mediante claves SSH. Para generar una nueva clave:</p> <pre><code>$ ssh-keygen -t rsa -C \"Cuenta GitHub\"\n</code></pre> <p>Esta clave se almacenar\u00e1 en tu sistema para permitir la autenticaci\u00f3n con repositorios remotos. Aseg\u00farate de no compartir la clave privada con nadie, ya que esta es tu identificador ante los servidores.</p>"},{"location":"Ud1/EGM/cheatsheet/#52-configuracion","title":"5.2 Configuraci\u00f3n","text":"<p>Agrega tu clave SSH generada anteriormente en GitHub:</p> <ol> <li>Ve a Settings en tu perfil de GitHub.</li> <li>Selecciona SSH and GPG Keys.</li> <li>A\u00f1ade una nueva clave copiando el contenido de <code>~/.ssh/id_rsa.pub</code> y pega en el campo Key.</li> <li>Dale un nombre a la clave en Title y guarda.</li> </ol>"},{"location":"Ud1/EGM/cheatsheet/#53-crear-un-repositorio","title":"5.3 Crear un repositorio","text":"<p>Para crear un repositorio en GitHub:</p> <ol> <li>Haz clic en el signo <code>+</code> en la barra superior y selecciona New repository.</li> <li>Dale un nombre, por ejemplo: <code>taller-de-git</code>.</li> <li>Para sincronizar un repositorio existente en tu equipo:</li> </ol> <pre><code>Copiar c\u00f3digo\n$ git remote add origin git@github.com:usuario/taller-de-git.git\n$ git branch -M main\n$ git push -u origin main\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#54-clonar-un-repositorio","title":"5.4 Clonar un repositorio","text":"<p>Para clonar un repositorio desde GitHub en tu equipo local:</p> <pre><code>$ git clone git@github.com:usuario/taller-de-git.git\n$ cd taller-de-git\n</code></pre> <p>Este comando descarga todos los archivos del repositorio y te permite comenzar a trabajar con ellos en tu equipo.</p>"},{"location":"Ud1/EGM/cheatsheet/#55-ramas-remotas","title":"5.5 Ramas remotas","text":"<p>Podemos ver las ramas remotas para comprobar la sincronizaci\u00f3n de nuestro repositorio local con el remoto. Usa el comando:</p> <pre><code>    $ git remote show origin\n    * remote origin\n      Fetch URL: git@github.com:sgomez/taller-de-git.git\n      Push  URL: git@github.com:sgomez/taller-de-git.git\n      HEAD branch: main\n      Remote branch:\n        main tracked\n      Local ref configured for 'git push':\n        main pushes to main (up to date)\n</code></pre> <p>Te mostrar\u00e1 informaci\u00f3n sobre fetch (para traer cambios) y push (para enviar cambios). La rama principal se suele llamar <code>origin/main</code>.</p>"},{"location":"Ud1/EGM/cheatsheet/#56-enviando-actualizaciones","title":"5.6 Enviando actualizaciones","text":"<p>Cuando realizas cambios en tu repositorio local, aseg\u00farate de enviarlos a GitHub:</p> <pre><code>$ git add archivo\n$ git commit -m \"Descripci\u00f3n del cambio\"\n$ git push\n</code></pre> <p>Si necesitas vincular la rama local con una remota, utiliza:</p> <pre><code>$ git push -u origin main\n</code></pre> <p>Esto facilita futuros push sin tener que especificar el origen.</p>"},{"location":"Ud1/EGM/cheatsheet/#57-recibiendo-actualizaciones","title":"5.7 Recibiendo actualizaciones","text":"<p>Para actualizar tu repositorio local con los \u00faltimos cambios hechos en GitHub:</p> <ol> <li>Trae la informaci\u00f3n de los cambios realizados en GitHub con <code>git fetch</code>, pero no importa directamente los cambios en local.</li> </ol> <pre><code>$ git fetch\n</code></pre> <ol> <li>Incorporar los cambios de la rama remota en la local, usando <code>git merge</code> o <code>git rebase</code>.</li> </ol> <pre><code>$ git merge origin/main\n</code></pre> <p>Tambi\u00e9n puedes combinar ambos pasos con <code>git pull</code> que realiza las dos acciones simult\u00e1neamente :</p> <pre><code>$ git pull\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 811 bytes | 811.00 KiB/s, done.\nFrom github.com:sgomez/taller-de-git\n   cbaf831..d8922e4  main     -&gt; origin/main\nUpdating 6e4cda3..bb3dc3e\nFast-forward\n README.md | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#58-problemas-de-sincronizacion","title":"5.8 Problemas de sincronizaci\u00f3n","text":""},{"location":"Ud1/EGM/cheatsheet/#581-no-puedo-hacer-push","title":"5.8.1 No puedo hacer push","text":"<p>Al intentar subir cambios nos podemos encontrar un mensaje como este:</p> <pre><code>$ git push\ngit push\nTo git@github.com:sgomez/taller-de-git.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'git@github.com:sgomez/taller-de-git.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>La causa es que el repositorio remoto tambi\u00e9n se ha actualizado y nosotros a\u00fan no hemos recibido esos cambios. Es decir, ambos repositorios se han actualizado y el remoto tiene preferencia. Hay un conflicto en ciernes y se debe resolver localmente antes de continuar.</p> <ol> <li>Trae los cambios y resuelve las diferencias de los archivos :</li> </ol> <pre><code>$ git fetch\n</code></pre> <ol> <li>Aplicas tus commits por encima de los cambios tra\u00eddos. Si hay conflictos, tendr\u00e1s que resolverlos antes de continuar :</li> </ol> <pre><code>$ git rebase origin/main\n</code></pre> <ol> <li>Una vez resueltos los conflictos, puedes finalizar el rebase con :</li> </ol> <pre><code>$ git rebase --continue\n</code></pre> <ol> <li>Finalmente, cuando el rebase haya terminado y todos los conflictos se hayan resuelto, ya puedes hacer push :</li> </ol> <pre><code>$ git push\n</code></pre> <p>Nota: Si est\u00e1s colaborando con otras personas, merge suele ser una opci\u00f3n m\u00e1s segura, ya que no reescribe la historia. Sin embargo, rebase puede ser \u00fatil si deseas mantener una historia m\u00e1s limpia y f\u00e1cil de seguir.</p>"},{"location":"Ud1/EGM/cheatsheet/#582-no-puedo-hacer-pull","title":"5.8.2 No puedo hacer pull","text":"<p>Cuando intentas hacer pull para traer cambios del repositorio remoto, pero tienes cambios locales sin confirmar en tu espacio de trabajo. Esto puede dar lugar a mensajes de error como los siguientes:</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: You have unstaged changes.\n</code></pre> <p>o</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: Your index contains uncommitted changes.\n</code></pre> <p>Causa del problema: Este error se produce porque Git necesita un espacio de trabajo limpio para poder integrar los cambios remotos. Si tienes cambios locales sin confirmar (modificaciones no guardadas mediante commit), Git no puede garantizar que esos cambios no entren en conflicto con los cambios que est\u00e1 trayendo desde el repositorio remoto.</p> <p>Soluci\u00f3n: Para resolver este problema tienes varias opciones:</p> <ol> <li>Confirmar los cambios locales (commit) :</li> </ol> <p>La opci\u00f3n m\u00e1s sencilla es confirmar tus cambios locales para que Git pueda hacer pull sin problemas:</p> <pre><code>$ git add .\n$ git commit -m \"Descripci\u00f3n de los cambios locales\"\n$ git pull\n</code></pre> <p>Esto guardar\u00e1 tus cambios en un nuevo commit, permitiendo que Git traiga los cambios remotos y luego los mezcle con los tuyos.</p> <ol> <li>Guardar los cambios locales temporalmente con stash :</li> </ol> <p>Si no deseas hacer un commit porque tus cambios no est\u00e1n listos, puedes usar stash para guardar temporalmente los cambios y as\u00ed dejar tu espacio de trabajo limpio para poder hacer el pull:</p> <pre><code>$ git stash save \"Cambios temporales\"\n$ git pull\n$ git stash pop\n</code></pre> <ul> <li><code>$git stash save</code> guarda los cambios actuales en una especie de pila temporal llamada stash.</li> <li><code>$git pull</code> trae los cambios remotos.</li> <li><code>$git stash pop</code> restaura los cambios que hab\u00edas guardado en el stash.</li> </ul> <p>En caso de que haya conflictos despu\u00e9s de hacer <code>stash pop</code>, deber\u00e1s resolverlos manualmente como en cualquier otra operaci\u00f3n de merge.</p> <ol> <li>Combinar stash con pull autom\u00e1ticamente :</li> </ol> <p>Git tambi\u00e9n permite combinar estas acciones de forma autom\u00e1tica. Puedes usar la opci\u00f3n <code>--autostash</code> para hacer <code>pull</code> y <code>stash</code> en un solo paso:</p> <pre><code>$ git pull --autostash\n</code></pre> <p>Esta opci\u00f3n guarda tus cambios en el stash, realiza el <code>pull</code> y luego aplica los cambios nuevamente desde el stash. Es una forma r\u00e1pida de realizar ambas acciones cuando est\u00e1s trabajando con cambios sin confirmar.</p>"},{"location":"Ud1/EGM/cheatsheet/#6-flujo-de-trabajo-en-github","title":"6 Flujo de trabajo en GitHub","text":""},{"location":"Ud1/EGM/cheatsheet/#61-paso-0-abrir-una-incidencia-issue","title":"6.1 Paso 0. Abrir una incidencia (issue)","text":"<p>El trabajo suele empezar con una incidencia o issue. Para ello, se usa la secci\u00f3n de Issues en GitHub. Una issue es b\u00e1sicamente una solicitud para resolver un problema o a\u00f1adir una nueva caracter\u00edstica. Al abrir una issue, se le asigna un t\u00edtulo, una descripci\u00f3n (escrita en Markdown), y opcionalmente etiquetas, hitos, responsables, etc.</p> <p>Ejemplo: Crear una issue titulada \"Crear archivo de autores\" para crear un archivo <code>AUTHORS.md</code> que contenga la lista de desarrolladores del proyecto.</p>"},{"location":"Ud1/EGM/cheatsheet/#62-paso-1-crear-una-rama","title":"6.2 Paso 1. Crear una rama","text":"<p>Crear una rama es el primer paso para empezar a implementar los cambios relacionados con la issue. Para cada nueva caracter\u00edstica o correcci\u00f3n de errores, se debe crear una rama separada. El nombre de la rama debe seguir un formato consistente, por ejemplo:</p> <pre><code>$ git checkout -b feature-1/create-changelog\n</code></pre> <p>Despu\u00e9s de crear la rama, se sube al repositorio remoto con:</p> <pre><code>$ git push -u origin feature-1/create-changelog\n</code></pre> <p>Esto crea una nueva rama en el repositorio remoto y permite crear un Pull Request (PR) desde GitHub.</p>"},{"location":"Ud1/EGM/cheatsheet/#63-paso-2-crear-commits","title":"6.3 Paso 2. Crear commits","text":"<p>Trabaja en los cambios que necesitas y crea commits para documentar el progreso:</p> <pre><code>$ git add AUTHORS.md\n$ git commit -m \"A\u00f1adido fichero de autores\"\n</code></pre> <p>Cada vez que hagas un cambio importante, confirma con <code>commit</code> y luego sube la rama con <code>push</code>:</p> <pre><code>$ git push\n</code></pre> <p>Los commits aparecer\u00e1n en el Pull Request abierto en GitHub para revisi\u00f3n.</p>"},{"location":"Ud1/EGM/cheatsheet/#64-paso-3-discutir","title":"6.4 Paso 3. Discutir","text":"<p>En GitHub, otros desarrolladores pueden revisar y discutir el Pull Request. Esto ayuda a garantizar la calidad del c\u00f3digo y facilita la colaboraci\u00f3n. Puedes etiquetar a revisores o asignar personas para la revisi\u00f3n del PR.</p> <p>Pull Requests tambi\u00e9n permiten comentarios en l\u00ednea sobre fragmentos de c\u00f3digo espec\u00edficos, lo que facilita una discusi\u00f3n detallada.</p>"},{"location":"Ud1/EGM/cheatsheet/#65-paso-4-desplegar","title":"6.5 Paso 4. Desplegar","text":"<p>Una vez que se ha revisado el Pull Request y todos est\u00e1n de acuerdo, es momento de integrarlo en la rama principal. GitHub ofrece tres formas para hacer el merge de una rama:</p> <p></p>"},{"location":"Ud1/EGM/cheatsheet/#651-crear-un-merge-commit","title":"6.5.1 Crear un merge commit","text":"<p>Este m\u00e9todo fusiona la rama en la rama principal (<code>main</code>) sin eliminar la historia de los commits individuales:</p> <pre><code>$ git checkout main\n$ git merge --no-ff feature-1/create-changelog\n$ git push\n</code></pre> <p>Este enfoque mantiene el historial de todos los cambios realizados en la rama.</p> <p>Info: GitHub siempre desactiva el fast forward.</p>"},{"location":"Ud1/EGM/cheatsheet/#652-crear-un-rebase-y-merge","title":"6.5.2 Crear un rebase y merge","text":"<p>Rebase garantiza que los cambios de la rama se apliquen sobre los \u00faltimos cambios de <code>main</code>, creando una historia de commits m\u00e1s lineal:</p> <pre><code>$ git rebase main\n$ git checkout main\n$ git merge --no-ff feature-1/create-changelog\n$ git push\n</code></pre> <p>Este m\u00e9todo reordena los commits para que parezca que la caracter\u00edstica se desarroll\u00f3 al final de los cambios ya en <code>main</code>.</p>"},{"location":"Ud1/EGM/cheatsheet/#653-crear-un-squash-commit-y-un-merge","title":"6.5.3 Crear un squash commit y un merge","text":"<p>El m\u00e9todo de squash and merge combina todos los commits de la rama en un solo commit en la rama principal:</p> <pre><code>$ git checkout main\n$ git merge --squash feature-1/create-changelog\n$ git push\n</code></pre> <p>Este enfoque es \u00fatil para mantener el historial de <code>main</code> m\u00e1s limpio, ya que todos los cambios se registran como un \u00fanico commit, lo cual es ideal cuando la rama incluye muchos commits peque\u00f1os.</p> <p>Vamos a seleccionar este \u00faltimo (squash and merge) y le damos al bot\u00f3n para activarlo. Nos saldr\u00e1 una caja para que podamos crear una descripci\u00f3n del commit y le damos a confirmar.</p> <p></p> <p>Ya hemos terminado y nos aparecer\u00e1 una opci\u00f3n para borrar la rama, lo m\u00e1s recomendado para no tener ramas obsoletas.</p> <p>Las consecuencias de esta acci\u00f3n son las siguientes:</p> <ol> <li>El PR aparecer\u00e1 como estado merged y en la lista de PR como cerrado.</li> <li>El issue que abrimos se habr\u00e1 cerrado autom\u00e1ticamente.</li> <li>En el listado de commits aparecer\u00e1 solo uno con un enlace al PR (en vez de los dos commits que hicimos).</li> </ol>"},{"location":"Ud1/EGM/cheatsheet/#66-paso-5-sincronizar","title":"6.6 Paso 5. Sincronizar","text":"<p>Hemos cambiado el repositorio en GitHub, pero nuestra rama <code>main</code> local no contiene los mismos cambios que el de <code>origin</code>. As\u00ed que nos toca sincronizar y borrar la rama obsoleta:</p> <pre><code>$ git checkout main\n$ git pull --rebase --autostash\n$ git branch -D feature-1/create-changelog\n</code></pre> <p>Info: \u00bfPor qu\u00e9 squash and merge y no un merge o rebase? De nuevo depende de los gustos de cada equipo de desarrollo. Las caracter\u00edsticas de squash es que elimina (relativamente) rastros de errores intermedios mientras se implementaba la rama, deja menos commits en la rama main y nos enlaza al PR donde se implementaron los cambios.</p> <p>Para algunas personas estas caracter\u00edsticas son unas ventajas, para otras no. Lo mejor es experimentar cada opci\u00f3n y que cada uno decida c\u00f3mo quiere trabajar.</p>"},{"location":"Ud1/EGM/cheatsheet/#7-colaboracion-en-github","title":"7 Colaboraci\u00f3n en GitHub","text":""},{"location":"Ud1/EGM/cheatsheet/#71-clonar-un-repositorio","title":"7.1 Clonar un repositorio","text":"<p>Para colaborar en un proyecto existente, primero es necesario clonar el repositorio a nuestro espacio de trabajo local. Primero vamos a la web del proyecto y hacemos un \"fork\" para tener una copia propia. Luego, clonamos nuestro fork localmente:</p> <pre><code>$ git clone git@github.com:miusuario/miniblog.git\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#711-sincronizar-con-el-repositorio-original","title":"7.1.1 Sincronizar con el repositorio original","text":"<p>Cuando hacemos un \"fork\" de un proyecto, se crea una copia que no se actualiza con los cambios del proyecto original de manera autom\u00e1tica. Para mantener nuestro fork actualizado, es necesario agregar el repositorio original como remoto:</p> <pre><code>$ git remote add upstream git@github.com:sgomez/miniblog.git\n</code></pre> <p>Luego, para incorporar cambios del repositorio original, usamos:</p> <pre><code>$ git fetch upstream\n$ git merge upstream/master\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#712-creando-nuevas-funcionalidades","title":"7.1.2 Creando nuevas funcionalidades","text":"<p>Para crear una nueva funcionalidad o arreglar un error, primero creamos una nueva rama:</p> <pre><code>$ git checkout -b add-license\n</code></pre> <p>Luego, a\u00f1adimos el c\u00f3digo necesario y lo confirmamos con un commit:</p> <pre><code>$ echo \"LICENCIA MIT\" &gt; LICENSE\n$ git add LICENSE\n$ git commit -m \"A\u00f1adido archivo de licencia de uso\"\n</code></pre> <p>Finalmente, enviamos los cambios a nuestro repositorio en GitHub:</p> <pre><code>$ git push --set-upstream origin add-license\n</code></pre> <p>En GitHub, podemos crear un \"Pull Request\" para sugerir los cambios al repositorio original.</p>"},{"location":"Ud1/EGM/cheatsheet/#713-todo-esto-es-algo-complicado","title":"7.1.3 Todo esto es algo complicado...","text":"<p>El trabajo en Git puede parecer complejo al principio, especialmente al manejar ramas y colaborar con repositorios remotos. La clave est\u00e1 en entender cada nivel de complejidad antes de avanzar al siguiente, desde los comandos b\u00e1sicos como <code>add</code>, <code>commit</code> y <code>checkout</code>, hasta los m\u00e1s avanzados como <code>merge</code>, <code>rebase</code> y <code>push</code>.</p>"},{"location":"Ud1/EGM/cheatsheet/#72-ultimo-paso-documentacion","title":"7.2 \u00daltimo paso, documentaci\u00f3n.","text":"<p>La documentaci\u00f3n es esencial para que otros colaboradores entiendan el proyecto. Esto se puede hacer mediante un archivo <code>README.md</code>, una wiki o incluso una p\u00e1gina web para el proyecto.</p>"},{"location":"Ud1/EGM/cheatsheet/#8-otros-comandos-de-git","title":"8 Otros comandos de Git","text":""},{"location":"Ud1/EGM/cheatsheet/#81-git-stash-reserva","title":"8.1 Git stash (reserva)","text":"<p>La orden <code>git stash</code> nos permite salvar moment\u00e1neamente el espacio de trabajo cuando tenemos que cambiar de rama o preparar la rama actual para sincronizar cambios.</p> <p>Las operaciones m\u00e1s importantes que podemos hacer con <code>git stash</code> son:</p>"},{"location":"Ud1/EGM/cheatsheet/#811-git-stash-save","title":"8.1.1 git stash save","text":"<p>Es equivalente a poner solo <code>git stash</code> pero nos permite realizar m\u00e1s acciones como:</p> <pre><code>git stash save \"Tu mensaje\"\ngit stash save -u\n</code></pre> <p>El par\u00e1metro <code>-u</code> permite que se almacenen tambi\u00e9n los ficheros sin seguimiento previo (untracked en ingl\u00e9s, aquellos ficheros que no se han metido nunca en el repositorio).</p>"},{"location":"Ud1/EGM/cheatsheet/#812-git-stash-list","title":"8.1.2 git stash list","text":"<p>Permite mostrar la pila del stash.</p> <pre><code>$ git stash list\nstash@{0}: On master: Stash con mensaje\nstash@{1}: WIP on master: 4ab21df First commit\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#813-git-stash-apply","title":"8.1.3 git stash apply","text":"<p>Esta orden coge el stash que est\u00e1 arriba en la pila y lo aplica al espacio de trabajo actual. En este caso siempre es <code>stash@{0}</code>. El stash permanece en la pila.</p> <p>Se puede indicar como par\u00e1metro un stash en concreto.</p>"},{"location":"Ud1/EGM/cheatsheet/#814-git-stash-pop","title":"8.1.4 git stash pop","text":"<p>Funciona igual que <code>git apply</code> con la diferencia de que el stash s\u00ed se borra de la pila.</p>"},{"location":"Ud1/EGM/cheatsheet/#815-git-stash-show","title":"8.1.5 git stash show","text":"<p>Muestra un resumen de los ficheros que se han modificado en ese stash.</p> <pre><code>$ git stash show\nA.txt | 1 +\nB.txt | 3 +++\n2 file changed, 4 insertions(+)\n</code></pre> <p>Para ver los cambios podemos usar el par\u00e1metro <code>-p</code></p> <pre><code>$ git stash show -p\n--- a/A.txt\n+++ b/A.txt\n@@ -45,6 +45,7 @@ nav:\n+ This is a change\n</code></pre> <p>Por defecto siempre muestra la cabeza de la pila. Igual que en casos anteriores podemos indicar un stash en concreto.</p> <pre><code>$ git stash show stash@{1}\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#816-git-stash-branch","title":"8.1.6 git stash branch","text":"<p>Permite crear una nueva rama a partir del \u00faltimo stash. Adem\u00e1s, el mismo es borrado de la pila. Se puede especificar uno en concreto si lo queremos, como en el resto de comandos.</p> <pre><code>git stash branch nombre-de-nueva-rama stash@{1}\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#817-git-stash-clear","title":"8.1.7 git stash clear","text":"<p>Este comando borra todos los stash de la pila. Es destructiva y no se puede deshacer.</p>"},{"location":"Ud1/EGM/cheatsheet/#818-git-stash-drop","title":"8.1.8 git stash drop","text":"<p>Permite borrar un stash en concreto (o el \u00faltimo si no se indica ninguno). Como con <code>clear</code>, borrarlo implica que no se puede recuperar.</p>"},{"location":"Ud1/EGM/cheatsheet/#82-git-worktree","title":"8.2 Git worktree","text":"<p>Uno de los problemas m\u00e1s habituales es tener que tocar una rama distinta a la que tenemos actualmente. Eso implica que si estamos en medio de un trabajo tendr\u00edamos que hacer un commit o un stash, lo cual a veces es bastante molesto.</p> <p>Con <code>git worktree</code> podemos crear un directorio de trabajo que contenga otra rama distinta, de forma temporal. No supone otro clon del repositorio porque ambos usan el mismo.</p>"},{"location":"Ud1/EGM/cheatsheet/#821-git-worktree-add","title":"8.2.1 git worktree add","text":"<p>Esta funci\u00f3n es la que crea el espacio de trabajo temporal. Imaginemos que estamos en una rama llamada <code>develop</code>:</p> <pre><code>$ git worktree add ../project-master master\n$ git worktree add -b fix ../project-fix master\n</code></pre> <p>La primera orden crea un directorio llamado <code>project-master</code> que contiene el estado de <code>master</code>. La segunda, que contiene el par\u00e1metro <code>-b</code> equivale a crear una nueva rama llamada <code>fix</code>, que se crea desde <code>master</code> (suponemos que no existe <code>fix</code>).</p>"},{"location":"Ud1/EGM/cheatsheet/#822-git-worktree-list","title":"8.2.2 git worktree list","text":"<p>Muestra el listado de directorios y espacios de trabajo.</p> <pre><code>$ git worktree list\n/home/sergio/taller-de-git  3b63b4b [master]\n/home/sergio/fix           3b63b4b [fix]\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#823-git-worktree-remove","title":"8.2.3 git worktree remove","text":"<p>Borra un espacio de trabajo. Hay que indicar el nombre entre corchetes que aparece en el listado.</p> <pre><code>$ git worktree delete fix\n</code></pre>"},{"location":"Ud1/EGM/cheatsheet/#824-git-worktree-prune","title":"8.2.4 git worktree prune","text":"<p>Una cuesti\u00f3n importante es que las ramas que est\u00e9n desplegadas en otro espacio de trabajo se encuentran bloqueadas y no se pueden desbloquear en otro distinto.</p> <p>Esto significa que si estamos trabajando en la rama <code>developer</code> y creamos otro <code>worktree</code> en otro directorio de la rama <code>master</code>, no podemos pasar a <code>master</code>. No es posible tener la misma rama en varios espacios de trabajo.</p> <p>Si se ha borrado el directorio a mano (en vez de usando <code>remove</code>), eso no implica que el bloqueo desparezca. Con esta orden podemos hacer que Git compruebe que los espacios de trabajo secundarios siguen existiendo y se elimine el bloqueo.</p>"},{"location":"Ud1/EGM/cheatsheet/#83-git-blame","title":"8.3 Git blame","text":"<p>Lo ideal en un equipo de desarrollo es que el c\u00f3digo pase por todas las manos para as\u00ed mejorar su calidad.</p> <p>Con <code>git blame</code> podemos saber qui\u00e9n fue el \u00faltimo en modificar una l\u00ednea concreta de c\u00f3digo, en qu\u00e9 commit y en qu\u00e9 fecha lo hizo.</p> <pre><code>$ git blame ejemplo.php\n33cdd02c (Sergio G\u00f3mez 2020-01-20 16:58:52 +0100  8)   name: \"material\"\n33cdd02c (Sergio G\u00f3mez 2020-01-20 16:58:52 +0100  9)   language: \"es\"\n</code></pre>"},{"location":"Ud1/EV/cheatsheet1/","title":"CH1 - Eduard Varga","text":"<p><code>git config --global user.name \"John Doe\"</code> -&gt; establecer nombre de usuario  <code>git config --global user.email johndoe@example.com</code> -&gt; establecer direcci\u00f3n de correo electr\u00f3nico</p> <p><code>git status</code> -&gt; consultar el estado de los archivos  <code>git init</code> -&gt; crear un nuevo repositorio  <code>nano [nombre_archivo]</code> -&gt; crear archivo y entrar en \u00e9l  <code>git add [nombre_archivo]</code> -&gt; a\u00f1adir el archivo al \u00e1rea de preparaci\u00f3n  <code>git commit -m \"[texto]\"</code> -&gt; el archivo pasa a local repository y se le asigna un c\u00f3digo de inserci\u00f3n  <code>git commit -a -m \"[texto]\"</code> -&gt; hace el add y despu\u00e9s el commit</p> <p><code>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"</code> -&gt; crear el alias hist con la configuraci\u00f3n establecida  <code>git hist --all</code> -&gt; listar los cambios en todas las ramas</p> <p><code>git checkout [hash]</code> -&gt; regresar al momento del estado del proyecto que se indica  <code>git checkout [rama]</code> -&gt; moverse a la rama  <code>git checkout -b [nombre]</code> -&gt; crear rama y acceder a ella  <code>git switch -</code> -&gt; volver a la rama anterior  <code>git branch</code> -&gt; listar las ramas que hay  <code>git branch [nombre]</code> -&gt; crear rama  <code>git tag [nombre]</code> -&gt; etiquetar versiones en la historia del repositorio  <code>git tag -d [nombre_etiqueta]</code> -&gt; borrar etiqueta</p> <p><code>git merge [nombre_rama]</code> -&gt; fusionar ramas  <code>git rebase [nombre_rama]</code> -&gt; fusionar ramas  <code>git rebase --continue</code> -&gt; continuar el rebase  <code>git merge --no-ff [nombre_rama]</code> -&gt; fusionar sin hacer fast-forward</p> <p><code>git restore [nombre_archivo]</code> -&gt; restaurar archivo  <code>git reset --hard [hash]</code> -&gt; mover el HEAD al hash indicado</p> <p><code>ssh-keygen -t rsa -C \"Cuenta GitHub\"</code> -&gt; crear una nueva clave Meterse en las claves de GitHub y al crear la clave, en el apartado key volcar lo que hay en el archivo <code>~/.ssh/id_rsa.pub</code></p> <p><code>git clone [url_repositorio]</code> (ej: <code>git@github.com:sgomez/taller-de-git.git</code>) -&gt; clonar el repositorio  <code>git remote add [nombre_repositorio_remoto] [url_repositorio_remoto]</code> -&gt; a\u00f1adir conexi\u00f3n remota  <code>git remote show [nombre_repositorio_remoto]</code> -&gt; ver configuraci\u00f3n del repositorio remoto  <code>git fetch</code> -&gt; traer la informaci\u00f3n desde el servidor remoto  <code>git pull</code> -&gt; hace un fetch y un merge a la vez (traer de GitHub y meterlo en nuestro local)  <code>git pull --autostash --rebase</code> -&gt; ejecutar si no funciona el git pull  <code>git push</code> -&gt; enviar cambios al repositorio remoto  <code>git push -u [repositorio] [rama]</code> (ej: origin main) -&gt; enviar los cambios de la rama del repositorio local al repositorio remoto</p> <p><code>git mv [archivo] [directorio]</code> -&gt; mover el archivo al directorio <code>cat [nombre_archivo]</code> -&gt; ver contenido de un archivo</p>"},{"location":"Ud1/MCG/CMCG/","title":"CheatSheet de Git - mauricio","text":""},{"location":"Ud1/MCG/CMCG/#setup-inicial","title":"Setup inicial","text":"<p>Antes de poder utilizar git, necesitamos git. En la amplia mayor\u00eda de sistemas GNU/Linux usaremos este comando:</p> <p><code>sudo apt-get install git <pre><code>Por \u00faltimo, necesitaremos especificar un **nombre** y un **correo electr\u00f3nico**.\n</code></pre> git config --global user.name \"nombre\" git config --global user.email abc@email.com <pre><code>## Manejo de repos.\nPara crear un repositorio local y consultar su estado usaremos:\n</code></pre> git init git status <pre><code>Podemos a\u00f1adir y borrar archivos o cambios al/del repo con: \n</code></pre> git add  git rm <pre><code>Antes de subir ning\u00fan cambio deber\u00edamos primero revisar si hay cambios, y si hay, bajarlos si asi lo queremos.\n</code></pre> git fetch git pull <pre><code>Para confirmar los cambios y subirlos:\n</code></pre> git commit -m \"comentario\" git push <pre><code>&gt; Con el argumento \"-m\" especificamos un comentario para el commit.\n\nSi quisieramos descartar los cambios hechos a un archivo y/o del commit m\u00e1s reciente estas son las instrucciones para hacerlo:\n</code></pre> git restore archivo.bin git revert HEAD --no-edit <pre><code>Podemos a\u00f1adir etiquetas al estado actual usando:\n</code></pre> git tag nombre <pre><code>Si quisieramos ver las diferencias entre commits, archivos e incluso ramas podemos usar el siguiente comando:\n</code></pre> git diff \"a\" \"b\" <pre><code>&gt;Por defecto este comando, compara los cambios del \u00faltimo commit con los actuales. Tambien podemos hacer uso de tags a la hora de comparar.\n***\n### Historial de cambios.\nPara poder ver el historico de todas nuestras ediciones a lo largo del tiempo usar\u00edamos el siguiente comando:\n</code></pre> git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short <pre><code>Como este comando es brutalmente largo, podemos facilitarnos la vida creando un alias:\n\n ```\ngit config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n ```\n\nDe esta forma solo hace falta que escribamos ***git hist*** para poder ver todos los cambios de forma bonita.\n***\nSi quisieramos volver a un estado anterior, basta con ejecutar la siguiente orden:\n</code></pre> git checkout \"hash\" <pre><code>&gt; Mucho ojo, pues \"hash\" debe remplazarse con el c\u00f3digo numerico correspondiente al commit que quisieramos restablecer. Se puede ver en el historico anterior.\n\n\nTambien cabe a\u00f1adir que si no hacemos un `git switch -` para volver al commit m\u00e1s reciente o cambiamos de rama, podemos liarla pard\u00edsima. Y hablando de ramas.\n\n## Manejo de ramas.\n\nPara crear una nueva rama de desarrollo en nuestro repositorio y situarnos dentro de ella usaremos los siguientes comandos:\n</code></pre> git branch nombreRama git checkout nombreRama <pre><code>Para fusionar los cambios de una rama a la otra usaremos: \n</code></pre> git merge MAIN <pre><code>Tambien podemos hacer un *rebase*, que nos permite cambiar la base de los commits hechos en la rama.\n</code></pre> git rebase MAIN <pre><code>&gt;Mucho ojo, pues con las dos instruci\u00f3nes anteriores le decimos a git que queremos aplicar los cambios de la rama actual en la que estamos trabajando a la rama main.\n&gt; Repito, rama actual ----&gt; MAIN.\n\n## GitHub o repos en linea.\nPara poder clonar un repositorio existente ya sea en Github o derivados podemos hacerlo con el siguiente comando.\n</code></pre> git clone \"url\" <pre><code>Si quisieramos sincronizar un repositorio local a uno en linea utilizariamos la siguiente instrucci\u00f3n:\n</code></pre> git remote add origin \"ssh\" <pre><code>***\nMientras trabajamos en local junto a un repo en linea, no es raro que a la hora de hacer commits haya problemas, especialmente porque hay que verificar que no estamos sobreescribiendo el trabajo de nadie.\n\nPara guardar nuestro trabajo local temporalmente podemos hacer:\n</code></pre> git stash save <pre><code>Nos bajamos los \u00faltimos cambios con los comando anteriormente vistos y restauramos nuestra sesi\u00f3n con: \n</code></pre> git stash pop</code></p>"},{"location":"Ud1/MIP/cheatsheet1/","title":"Cheatsheet git Marc Ib\u00e1\u00f1ez","text":""},{"location":"Ud1/MIP/cheatsheet1/#uso-basico-de-git","title":"Uso b\u00e1sico de git","text":""},{"location":"Ud1/MIP/cheatsheet1/#instalacion-de-github","title":"Instalaci\u00f3n de github","text":"<pre><code>$ apt-get install git\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#definir-identidad","title":"Definir identidad","text":"<pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ver-estado","title":"Ver estado","text":"<pre><code>$ git status\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#crear-un-proyecto","title":"Crear un proyecto","text":"<pre><code>$ mkdir curso-de-git\n$ cd curso-de-git\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#crear-repositorio","title":"Crear repositorio","text":"<pre><code>$ git init\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#anadir-y-commitear-los-cambios","title":"A\u00f1adir y commitear los cambios","text":"<pre><code>$ git commit -am \"Nombre del commit\"\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ignorar-archivos-globalmente","title":"Ignorar archivos globalmente","text":"<pre><code>$ git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ver-historial","title":"Ver historial","text":"<pre><code>$ git log\n\n$ git log --oneline\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#crear-alias-para-ver-el-historial","title":"Crear alias para ver el historial","text":"<pre><code>$ git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ver-historial-una-vez-hecho-el-alias","title":"Ver historial una vez hecho el alias","text":"<pre><code>$ git hist\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#recuperar-versiones","title":"Recuperar versiones","text":"<pre><code>$ git checkout 0000001\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#para-volver","title":"Para volver","text":"<pre><code>$ git switch -\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#volver-a-ultima-version-de-la-rama","title":"Volver a ultima versi\u00f3n de la rama","text":"<pre><code>$ git checkout master\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#etiquetar-versiones","title":"Etiquetar versiones","text":""},{"location":"Ud1/MIP/cheatsheet1/#ver-etiquetas","title":"Ver etiquetas","text":"<pre><code>$ git tag\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#etiquetar-version-actual","title":"Etiquetar versi\u00f3n actual","text":"<pre><code>$ git tag v1\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#etiquetar-version-inmediatamente-anterior","title":"Etiquetar versi\u00f3n inmediatamente anterior","text":"<pre><code>$ git checkout v1^\n$ git tag v1-beta\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#borrar-etiqueta","title":"Borrar etiqueta","text":"<pre><code>$ git tag -d nombre_etiqueta\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#uso-avanzado-de-git","title":"Uso avanzado de git","text":""},{"location":"Ud1/MIP/cheatsheet1/#deshacer-cambios","title":"Deshacer cambios","text":""},{"location":"Ud1/MIP/cheatsheet1/#despues-de-commit","title":"Despu\u00e9s de commit","text":"<pre><code>$ git restore hola.php\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#antes-de-commit","title":"Antes de commit","text":"<pre><code>$ git restore --staged hola.php\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#deshacer-commits-indeseados","title":"Deshacer commits indeseados","text":"<pre><code>$ git revert HEAD --no-edit\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#borrar-commits-de-una-rama","title":"Borrar commits de una rama","text":"<pre><code>$ git reset --hard v1\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#modificar-un-commit","title":"Modificar un commit","text":"<pre><code>$ git add hola.php\n$ git commit --amend -m \"A\u00f1adido el autor del programa y su email\"\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#mover-archivo-a-otro-directorio","title":"Mover archivo a otro directorio","text":"<pre><code>$ mkdir lib\n$ git mv hola.php lib\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ramas","title":"Ramas","text":""},{"location":"Ud1/MIP/cheatsheet1/#crear-rama","title":"Crear rama","text":"<pre><code>$ git branch nuevarama\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#moverse-entre-ramas","title":"Moverse entre ramas","text":"<pre><code>$ git checkout nuevarama\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#mezclar-ramas","title":"Mezclar ramas","text":""},{"location":"Ud1/MIP/cheatsheet1/#hacemos-modificacion-en-rama-master","title":"Hacemos modificaci\u00f3n en rama master","text":"<pre><code>$ git checkout master\n$ git add README.md\n$ git commit -m \"A\u00f1adido README.md a master\"\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#cambiamos-a-rama-nuevarama-y-hacemos-la-mezcla","title":"Cambiamos a rama nuevarama y hacemos la mezcla","text":"<pre><code>$ git checkout nuevarama\n$ git merge master\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#resolver-conflictos","title":"Resolver conflictos","text":""},{"location":"Ud1/MIP/cheatsheet1/#modificamos-el-archivo-holaphp-estando-en-rama-master-guardamos-los-cambios-y-hacemos-commit-y-una-vez-estamos-en-la-rama-nuevarama-hacemos-merge","title":"Modificamos el archivo hola.php estando en rama master, guardamos los cambios y hacemos commit, y una vez estamos en la rama nuevarama hacemos merge:","text":"<pre><code>$ git merge master\nAuto-merging lib/hola.php\nCONFLICT (content): Merge conflict in lib/hola.php\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ahora-debemos-editar-el-documento-para-resolver-los-conflictos-y-una-vez-resuelto-hacemos","title":"Ahora debemos editar el documento para resolver los conflictos y una vez resuelto hacemos:","text":"<pre><code>$git add lib/hola.php\n$ git commit -m \"Solucionado el conflicto al fusionar con la rama master\"\n[nuevarama a36af04] Solucionado el conflicto al fusionar con la rama master\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#github","title":"Github","text":""},{"location":"Ud1/MIP/cheatsheet1/#sincronizar-un-repositorio-ya-creado","title":"Sincronizar un repositorio ya creado","text":"<pre><code>$ git remote add origin git@github.com:sgomez/taller-de-git.git\n$ git branch -M main\n$ git push -u origin main\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#clonar-un-repositorio","title":"Clonar un repositorio","text":"<pre><code>$ git clone git@github.com:sgomez/taller-de-git.git\n$ cd taller-de-git\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#ramas-remotas","title":"Ramas remotas","text":"<pre><code>$ git remote show origin\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#enviar-actualizaciones","title":"Enviar actualizaciones","text":"<pre><code>$ git push\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#recibir-actualizaciones","title":"Recibir actualizaciones","text":"<pre><code>$ git fetch\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#importar-cambios-de-la-rama-remota-a-la-local","title":"Importar cambios de la rama remota a la local","text":"<pre><code>$ git merge origin/main\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#existe-una-funcion-que-nos-ayuda-a-hacer-fetch-y-merge-de-forma-simultanea","title":"Existe una funcion que nos ayuda a hacer fetch y merge de forma simultanea:","text":"<pre><code>$ git pull\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#problemas-de-sincronizacion","title":"Problemas de sincronizaci\u00f3n","text":""},{"location":"Ud1/MIP/cheatsheet1/#no-puedo-hacer-push","title":"No puedo hacer push:","text":"<pre><code>$ git fetch\n$ git rebase\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#o-tambien","title":"O tambi\u00e9n:","text":"<pre><code>$ git pull --rebase\n</code></pre>"},{"location":"Ud1/MIP/cheatsheet1/#no-puedo-hacer-pull","title":"No puedo hacer pull:","text":"<pre><code>$ git stash save # Guardamos los cambios en la pila\n$ git pull # Sincronizamos con el repositorio remoto, -r para hacer rebase puede ser requerido\n$ git stash pop # Sacamos los cambios de la pila\n</code></pre>"},{"location":"Ud1/MMC/cheatsheet1/","title":"Cheatsheet 1 de Marcel Ma\u00f1as","text":""},{"location":"Ud1/MMC/cheatsheet1/#ayuda","title":"Ayuda","text":"<p>Por si en alg\u00fan momento necesitas ayuda</p> <pre><code>$ git help &lt;verb&gt;\n$ git &lt;verb&gt; --help            Ej: $ git help config\n$ man git &lt;verb&gt;;\n</code></pre>"},{"location":"Ud1/MMC/cheatsheet1/#instalacion-y-configuracion-de-git","title":"Instalaci\u00f3n y configuraci\u00f3n de Git","text":"<ul> <li> <p>Instalar en distribuciones de Debian:</p> <pre><code>$ sudo apt-get install git\n</code></pre> </li> <li> <p>Configuraci\u00f3n:</p> <pre><code>$git config --global user.name \"Tu_nombre\"\n$git config --global user.email \"tu_email@aqu\u00ed.algo\"\n$git config --global push.default simple\n</code></pre> </li> <li> <p>Comprobar versi\u00f3n de Git:</p> <pre><code>$ git --version\n</code></pre> </li> <li> <p>Actualizar Git:</p> <pre><code>$ sudo apt update\n$ sudo apt upgrade git\n</code></pre> </li> </ul>"},{"location":"Ud1/MMC/cheatsheet1/#creacion-de-proyecto","title":"Creaci\u00f3n de proyecto","text":"<ul> <li> <p>Ver el estado del repositorio:</p> <pre><code>$ git status\n</code></pre> </li> <li> <p>Crear repositorio una vez ya creado el directorio y el archivo:</p> <pre><code>$ git init\nInitialized empty Git repository in /home/admin/nombre_del_directorio/.git/\n</code></pre> </li> </ul>"},{"location":"Ud1/MMC/cheatsheet1/#github","title":"GitHub","text":"<ul> <li> <p>Para crear las claves p\u00fablicas/privadas:</p> <pre><code>$ ssh-keygen -t rsa -C \"Cuenta GitHub\"\n</code></pre> </li> <li> <p>Para conectar Git con un repositorio existente GitHub:</p> <pre><code>$ git remote add origin c\u00f3digo_ssh_del_repositorio_GitHub\n</code></pre> <ul> <li> <p>Para cambiar el nombre a una rama:</p> <pre><code>$ git branch -M main\n</code></pre> </li> <li> <p>Para subir la info al repositorio remoto y decir que esa es la rama de seguimiento:</p> <pre><code>$ git push -u origin main\n</code></pre> </li> </ul> </li> <li> <p>Para clonar un repositorio existente:</p> <pre><code>$ git clone c\u00f3digo_ssh_GitHub\n</code></pre> </li> <li> <p>Para ver la configuraci\u00f3n del repositorio remoto:</p> <pre><code>$ git remote show origin\n</code></pre> </li> <li> <p>Traer la informaci\u00f3n de los cambios en GitHub al local:</p> <pre><code>$ git fetch\n</code></pre> <ul> <li> <p>Luego tendr\u00edas que a\u00f1adirlo a tu rama con:</p> <pre><code>$ git merge origin/main\n</code></pre> </li> </ul> </li> <li> <p>Traer la informaci\u00f3n de los cambios en GitHub al local y a\u00f1adirlos a tu rama:</p> <pre><code>$ git pull\n</code></pre> <ul> <li> <p>Un pull mas agresivo:</p> <pre><code>$ git pull --rebase\n</code></pre> </li> </ul> </li> <li> <p>Guardar cambios de forma temporal:</p> <pre><code>$ git stash save # Guardamos los cambios en la pila\n</code></pre> </li> <li> <p>Sacar los cambios temporales que tengamos guardados:</p> <pre><code>$ git stash pop # Sacamos los cambios de la pila\n</code></pre> </li> <li> <p>Para utilizar stash save y stash pop, adem\u00e1s de un pull:</p> <pre><code>$ git pull --autostash\n</code></pre> </li> </ul>"},{"location":"Ud1/MMC/cheatsheet1/#manejo-en-el-repositorio-git","title":"Manejo en el repositorio Git","text":"<ul> <li> <p>A\u00f1adir el archivo al repositorio:</p> <pre><code>$ git add hola.php\n</code></pre> <ul> <li> <p>Si quieres a\u00f1adir varios de golpe:</p> <pre><code>$ git add .\n</code></pre> </li> </ul> </li> <li> <p>Guardar los archivo a\u00f1adido al repositorio:</p> <pre><code>$git commit -m \"Comentario descriptivo del guardado\"\n</code></pre> <ul> <li> <p>Commit directo:</p> <pre><code>$git commit -a -m \"A\u00f1adido el autor del programa\"\n</code></pre> </li> </ul> </li> <li> <p>Comprobar el hist\u00f3rico:</p> <pre><code>$ git log\n</code></pre> <ul> <li> <p>Mostrar abreviado:</p> <pre><code>$ git log --oneline\n</code></pre> </li> <li> <p>Mostrar HEAD y master:</p> <pre><code>$ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n</code></pre> <ul> <li> <p>Si queremos adem\u00e1s, ver los cambios en todas las ramas:</p> <pre><code>$ git alias_que_hayamos_puesto --all\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Crear alias para evitar largos comandos:</p> <pre><code>git config --global alias.el_nombre_que_quieras \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> </li> <li> <p>Recuperar versiones anteriores:</p> <pre><code>$ git checkout identificador_del_commit\n</code></pre> </li> <li> <p>Etiquetar versiones:</p> <pre><code>$ git tag nombre_de_la_etiqueta\n</code></pre> <ul> <li> <p>Si quieres ver todas la etiquetas:</p> <pre><code>$ git tag\n</code></pre> </li> <li> <p>Si quieres borrar alguna etiquetas:</p> <pre><code>$ git tag -d nombre_etiqueta\n</code></pre> </li> </ul> </li> <li> <p>Para comparar versiones:</p> <pre><code>$ git diff nombre_version1 nombre_version2\n</code></pre> </li> <li> <p>Para deshacer cambios antes del add:</p> <pre><code>$ git restore nombre_archivo\n</code></pre> <ul> <li> <p>Para deshacer antes del commit:</p> <pre><code>$ git restore --staged nombre_archivo\n</code></pre> </li> </ul> </li> <li> <p>Deshacer el \u00faltimo commit:</p> <pre><code>$ git revert HEAD --no-edit\n</code></pre> </li> <li> <p>Borrar commits de una rama:</p> <pre><code>$ git reset --hard version_commit\n</code></pre> </li> <li> <p>Mover archivos:</p> <pre><code>$ git mv nombre_archivo lugar_a_mover\n</code></pre> </li> <li> <p>Borrar archivos:</p> <pre><code>$ git rm nombre-archivo\n</code></pre> </li> </ul>"},{"location":"Ud1/MMC/cheatsheet1/#ramas","title":"Ramas","text":"<ul> <li> <p>Crear rama:</p> <pre><code>$ git branch nombre_rama\n</code></pre> </li> <li> <p>Cambiar de rama:</p> <pre><code>$ git checkout nombre_rama\n</code></pre> <ul> <li> <p>Crear y cambiar a una rama:</p> <pre><code>$ git checkout nombre_rama\n</code></pre> </li> </ul> </li> <li> <p>Incorporar cambios de una rama a otra:</p> <pre><code>$ git checkout nombre_rama_donde_quieres_los_cambios\n$ git merge nombre_rama_que_tiene_los_cambios\n</code></pre> </li> <li> <p>Para mover el HEAD donde queramos (\u201drevertir\u201d commits):</p> <pre><code>$ git reset --hard hash_del_commit\n</code></pre> </li> <li> <p>Fusionar ramas dejando solo 1 rama:</p> <pre><code>$ git checkout nombre_rama_que_tiene_los_cambios\n$ git rebase nombre_rama_donde_quieres_los_cambios\n</code></pre> </li> </ul>"},{"location":"Ud1/MMC/cheatsheet1/#ignorando-archivos-globalmente","title":"Ignorando archivos globalmente","text":"<ul> <li> <p>Para crear un archivo global para Git y que ignore ciertos archivos al hacer el manejo en el repositorio:</p> <pre><code>$ git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre> <p>Creamos el archivo <code>.gitignore_global</code> en la ra\u00edz y a\u00f1adimos: </p> <pre><code># Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n*~\n*.swp\n\n# IDEs               #\n######################\n.idea\n.settings/\n.classpath\n.project\n</code></pre> </li> </ul>"},{"location":"Ud1/PPE/CPPE/","title":"Cheatsheet UD1 - Despliegue de Aplicaciones","text":"<p>Este documento resume los comandos esenciales de Git y GitHub utilizados en la l\u00ednea de comandos Linux, principalmente para la Unidad 1 del curso de Despliegue de Aplicaciones.</p>"},{"location":"Ud1/PPE/CPPE/#instalacion-de-git","title":"Instalaci\u00f3n de Git","text":""},{"location":"Ud1/PPE/CPPE/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>$ sudo apt update\n$ sudo apt upgrade\n$ sudo apt install git\n</code></pre> <ul> <li>Actualiza la lista de paquetes, actualiza los paquetes instalados y luego instala Git.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#fedora","title":"Fedora","text":"<pre><code>$ sudo yum install git\n</code></pre> <ul> <li>Instala Git en distribuciones Fedora.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":""},{"location":"Ud1/PPE/CPPE/#configuracion-del-usuario","title":"Configuraci\u00f3n del Usuario","text":"<pre><code>$ git config --global user.name \"Tu Nombre\"\n$ git config --global user.email usuario@example.com\n</code></pre> <ul> <li>Configura tu nombre y correo electr\u00f3nico para que Git los asocie con tus commits.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#configuracion-de-push-y-branch","title":"Configuraci\u00f3n de Push y Branch","text":"<pre><code>$ git config --global push.default simple\n$ git config --global init.defaultBranch main\n</code></pre> <ul> <li>Define el comportamiento por defecto del comando git push y establece la rama principal como main.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#configuracion-de-exclusiones","title":"Configuraci\u00f3n de Exclusiones","text":"<pre><code>$ git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre> <ul> <li>Establece un archivo .gitignore global para excluir archivos espec\u00edficos en todos tus proyectos.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#comandos-basicos","title":"Comandos B\u00e1sicos","text":""},{"location":"Ud1/PPE/CPPE/#estado-y-preparacion","title":"Estado y Preparaci\u00f3n","text":"<pre><code>$ git status\n</code></pre> <ul> <li>Muestra el estado del repositorio.</li> </ul> <pre><code>$ git init\n</code></pre> <ul> <li>Inicializa un nuevo repositorio Git.</li> </ul> <pre><code>$ git add &lt;file-name&gt;\n$ git add .\n</code></pre> <ul> <li>A\u00f1ade archivos al \u00e1rea de preparaci\u00f3n.</li> </ul> <pre><code>$ git commit -m \"Creaci\u00f3n del proyecto\"\n$ git commit -am \"Creaci\u00f3n del proyecto\"\n</code></pre> <ul> <li>Crea un commit con los cambios a\u00f1adidos al area de preparaci\u00f3n</li> </ul>"},{"location":"Ud1/PPE/CPPE/#historial-de-cambios","title":"Historial de Cambios","text":"<pre><code>$ git log\n$ git log --oneline\n$ git log --oneline --max-count=2\n$ git log --oneline --since='5 minutes ago'\n$ git log --oneline --until='5 minutes ago'\n$ git log --oneline --author=usuario\n$ git log --oneline --all\n$ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n</code></pre> <ul> <li>Revisa el historial de commits con diferentes formatos y filtros.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#alias-utiles","title":"Alias \u00datiles","text":"<pre><code>$ git config --global alias.br branch\n$ git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> <ul> <li>Crea alias para acceder f\u00e1cilmente a comandos recurrentes como branch y log con formato largo.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#manejo-de-etiquetas","title":"Manejo de Etiquetas","text":"<pre><code>$ git tag\n$ git tag &lt;version-name&gt;\n$ git tag -d &lt;tag-name&gt;\n</code></pre> <ul> <li>Lista, crea o elimina etiquetas (tags) a las versiones del proyecto.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#mostrar-diferencias","title":"Mostrar diferencias","text":"<pre><code>$ git diff\n$ git diff --staged\n</code></pre> <ul> <li>Muestra las diferencias entre el directorio de trabajo y el \u00e1rea de preparaci\u00f3n.</li> </ul> <pre><code>$ git diff &lt;branch-name&gt;\n$ git diff &lt;current-tag&gt; &lt;diff-tag&gt;\n</code></pre> <ul> <li>Muestra las diferencias entre el dictorio de trabajo y una rama, o entre dos etiquetas.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#comandos-avanzados","title":"Comandos Avanzados","text":"<pre><code>$ git cherry-pick &lt;commit-hash&gt;\n</code></pre> <ul> <li>Aplica los cambios de un commit espec\u00edfico en la rama actual.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#restaurar-cambios","title":"Restaurar Cambios","text":"<pre><code>$ git add &lt;file-name&gt;\n$ git restore --staged &lt;file-name&gt;\n</code></pre> <ul> <li>Restaura archivos del \u00e1rea de preparaci\u00f3n.</li> </ul> <pre><code>$ git restore &lt;file-name&gt;\n</code></pre> <ul> <li>Restaura archivos del directorio de trabajo.</li> </ul> <pre><code>$ git commit -am \"Commit mal\"\n$ git revert HEAD --no-edit\n</code></pre> <ul> <li>Revierte el \u00faltimo commit realizado.</li> </ul> <pre><code>$ git reset --hard &lt;branch-tag&gt;\n</code></pre> <ul> <li>Resetea el repositorio al estado de una rama o etiqueta espec\u00edfica.</li> </ul> <pre><code>$ git commit --amend -m \"A\u00f1adido el autor del programa y su email\"\n</code></pre> <ul> <li>Modifica el contenido del \u00faltimo commit.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#mover-y-eliminar-archivos","title":"Mover y Eliminar Archivos","text":"<pre><code>$ git mv &lt;old-file&gt; &lt;new-file&gt;\n$ git rm &lt;file-name&gt;\n</code></pre> <ul> <li>Mueve o elimina archivos en el repositorio.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#comandos-de-ramas","title":"Comandos de Ramas","text":""},{"location":"Ud1/PPE/CPPE/#gestion-de-ramas","title":"Gesti\u00f3n de Ramas","text":"<pre><code>$ git branch\n$ git branch -r\n</code></pre> <ul> <li>Listar las ramas locales, y las remotas.</li> </ul> <pre><code>$ git branch &lt;branch-name&gt;\n$ git branch -d &lt;branch-name&gt;\n</code></pre> <ul> <li>Crear y eliminar una rama.</li> </ul> <pre><code>$ git checkout &lt;branch-name&gt;\n$ git checkout -b &lt;branch-name&gt;\n</code></pre> <ul> <li>Cambiar a una rama espec\u00edfica, o crea y cambia a una nueva rama</li> </ul> <pre><code>$ git switch -\n$ git switch -c &lt;new-branch-name&gt;\n</code></pre> <ul> <li>Cambia a la rama anterior, o crea y cambia a una nueva rama.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#fusionar-ramas","title":"Fusionar Ramas","text":"<pre><code>$ git merge &lt;branch-name&gt;\n$ git merge -m \"Nombre commit\" --no-ff &lt;branch-name&gt;\n</code></pre> <ul> <li>Fusiona una rama en la actual. Usa --no-ff para conservar el historial de la rama fusionada.</li> </ul> <pre><code>$ git rebase &lt;branch-name&gt;\n$ git rebase --continue\n</code></pre> <ul> <li>Integra cambios de una rama en otra reescribiendo el historial.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#comandos-para-trabajar-en-remoto","title":"Comandos para Trabajar en Remoto","text":""},{"location":"Ud1/PPE/CPPE/#generar-clave-ssh","title":"Generar Clave SSH","text":"<pre><code>$ ssh-keygen -t rsa -C \"Cuenta GitHub\"\n</code></pre> <ul> <li>Genera una clave SSH para autenticarse en GitHub.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#clonar-repositorio","title":"Clonar Repositorio","text":"<pre><code>$ git clone git@github.com:github-user/repository-name.git\n$ cd repository-name/\n</code></pre> <ul> <li>Clona un repositorio de GitHub y navega al directorio del mismo.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#configuracion-remota","title":"Configuraci\u00f3n Remota","text":"<pre><code>$ git remote add origin git@github.com:github-user/repository-name.git\n$ git branch -M main\n$ git push -u origin main\n</code></pre> <ul> <li>A\u00f1ade un repositorio remoto, cambia el nombre de la rama principal y env\u00eda los cambios al Hub.</li> </ul> <pre><code>$ git remote show origin\n</code></pre> <ul> <li>Muestra informaci\u00f3n sobre el repositorio remoto.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#sincronizacion-con-remoto","title":"Sincronizaci\u00f3n con Remoto","text":"<pre><code>$ git fetch\n$ git remote update\n</code></pre> <ul> <li>Descarga objetos y referencias desde el repositorio remoto.</li> </ul> <pre><code>$ git push\n$ git pull\n</code></pre> <ul> <li>Env\u00eda y recibe de cambios desde el repositorio remoto.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#caja-de-cambios","title":"Caja de cambios","text":"<pre><code>$ git stash save\n$ git pull\n$ git stash pop\n</code></pre> <ul> <li>Guarda cambios no confirmados en el stash, recibe la nueva informaci\u00f3n y aplica los cambios guardados en el stash.</li> </ul> <pre><code>$ git stash list\n</code></pre> <ul> <li>Listar los cambios guardados en el stash.</li> </ul> <pre><code>$ git stash drop\n</code></pre> <ul> <li>Eliminar los cambios guardados en el stash.</li> </ul> <pre><code>$ git pull --autostash\n$ git pull --autostash --rebase\n</code></pre> <ul> <li>Recibe de cambios del remoto y guarda autom\u00e1ticamente los cambios no confirmados en el stash.</li> </ul>"},{"location":"Ud1/PPE/CPPE/#gestion-de-ramas-remotas","title":"Gesti\u00f3n de ramas remotas","text":"<pre><code>$ git push --set-upstream origin &lt;branch-name&gt;\n</code></pre> <ul> <li>Empuja una rama y establece la rama en el directorio remoto.</li> </ul> <pre><code>$ git merge --squash &lt;branch-name&gt;\n</code></pre> <ul> <li>Fusiona los commits de una rama en un solo commit.</li> </ul> <pre><code>$ git push origin --delete add-license\n</code></pre> <ul> <li>Env\u00edar los cambios y eliminar la rama remota.</li> </ul>"},{"location":"Ud1/RPE/cheatsheet1/","title":"Cheatsheet de comandos Git","text":""},{"location":"Ud1/RPE/cheatsheet1/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar git tendremos que tener el sistema y los directorios actualizados. Para ello utilizaremos el comando:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre> <p>Una vez actualizado, para instalar git ejecutaremos el siguiente comando:</p> <pre><code>apt-get install git\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#configuracion","title":"Configuraci\u00f3n","text":""},{"location":"Ud1/RPE/cheatsheet1/#identidad","title":"Identidad","text":"<p>Si queremos configurar un nombre de usuario, utilizaremos la siguiente orden:</p> <pre><code>git config --global user.name \"[nombre del usuario]\"\n</code></pre> <p>Si lo que queremos es establecer el email del usuario, usaremos:</p> <pre><code>git config --global user.email [email del usuario]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#recomendaciones","title":"Recomendaciones","text":"<p>Se recomienda configurar el push por defecto a simple con el comando:</p> <pre><code>git config --global push.default simple\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#crear-y-gestionar-un-proyecto","title":"Crear y gestionar un proyecto","text":"<p>El comando para crear un repositorio en el directorio actual es:</p> <pre><code>git init\n</code></pre> <p>Para a\u00f1adir el archivo deseado al repositorio o agregar los cambios del mismo al \u00e1rea de preparaci\u00f3n, usaremos el comando:</p> <pre><code>git add [nombre del archivo]\n</code></pre> <p>Para comprobar el estado de los archivos en el repositorio utilizaremos:</p> <pre><code>git status\n</code></pre> <p>El comando utilizado para guardar los cambios en el repositorio es (se recomienda poner la opci\u00f3n -m ya que as\u00ed puedes especificar el mensaje directamente en la orden):</p> <pre><code>git commit -m \"[mensaje]\"\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#alias","title":"Alias","text":"<p>Para crear un alias, usaremos:</p> <pre><code>git config --global alias.[nombre del alias] \"ordenes del alias\"\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#utilizar-el-historial","title":"Utilizar el historial","text":"<p>Para poder observar los cambios que hemos hecho, m\u00e1s espec\u00edficamente los commits, ejecutaremos el comando (para salir, pulsar <code>q</code>):</p> <pre><code>git log\n</code></pre> <p>Para verlo de una forma m\u00e1s abreviada, usaremos:</p> <pre><code>git log --oneline\n</code></pre> <p>Si lo que queremos es regresar a alguna versi\u00f3n anterior, utilizaremos el comando:</p> <pre><code>git checkout [commit id]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#etiquetas","title":"Etiquetas","text":"<p>Para etiquetar versiones del repositorio, ejecutaremos la orden:</p> <pre><code>git tag [nombre etiqueta]\n</code></pre> <p>Si queremos borrar una etiqueta creada, utilizaremos:</p> <pre><code>git tag -d [nombre_etiqueta]\n</code></pre> <p>El comando utilizado para ver los cambios entre dos commits es:</p> <pre><code>git diff [commit1] [commit2]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#deshacer-cambios","title":"Deshacer cambios","text":"<p>Si queremos deshacer los cambios que hemos a\u00f1adido al Staging Area, usaremos el comando:</p> <pre><code>git restore --staged [archivo]\n</code></pre> <p>Para volver a la \u00faltima versi\u00f3n del archivo, utilizaremos:</p> <pre><code>git restore [archivo]\n</code></pre> <p>En el caso que queramos deshacer un commit, ejecutaremos:</p> <pre><code>git revert HEAD --no-edit\n</code></pre> <p>El comando utilizado para deshacer un commit sin dejar rastro de ello ser\u00e1:</p> <pre><code>git reset --hard [commit1]\n</code></pre> <p>Si lo que queremos es modificar el \u00faltimo commit, el comando a utilizar es:</p> <pre><code>git commit --amend -m [Mensaje nuevo]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#mover-archivos","title":"Mover archivos","text":"<p>Para mover archivos, usaremos el comando:</p> <pre><code>git mv [archivo] [nueva localizaci\u00f3n]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#eliminar-archivos","title":"Eliminar archivos","text":"<p>Si queremos eliminar un archivo de git, es:</p> <pre><code>git rm [archivo]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#ramas","title":"Ramas","text":"<p>El comando utilizado para listar todas las ramas es:</p> <pre><code>git branch\n</code></pre> <p>Para crear una rama sin entrar en ella, utilizaremos:</p> <pre><code>git branch [nombre rama]\n</code></pre> <p>Una vez creada, para cambiar a esa rama ejecutaremos:</p> <pre><code>git checkout [nombre rama]\n</code></pre> <p>Si queremos hacer las dos a la vez, usaremos:</p> <pre><code>git checkout -b [nombre rama]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#fusion-de-ramas","title":"Fusi\u00f3n de ramas","text":"<p>El comando utilizado para fusionar ramas es (se fusionar\u00e1n la rama seleccionada con la actual):</p> <pre><code>git merge [nombre rama con la que nos queremos fusionar]\n</code></pre> <p>Si queremos que quede un registro de la fusi\u00f3n, tendremos que utilizar:</p> <pre><code>git merge -m \"[mensaje]\" --no-ff [nombre de la rama]\n</code></pre> <p>Si no queremos mantener el historial de ambas ramas, utilizaremos el comando:</p> <pre><code>git rebase [nombre rama con la que nos queremos fusionar]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#configuracion-ssh","title":"Configuraci\u00f3n SSH","text":"<p>Para crear una clave ssh, utilizaremos el comando:</p> <pre><code>ssh-keygen -t rsa -C \"[nombre]\"\n</code></pre> <p>Para vincular a un repositorio de GitHub ya existente, usaremos:</p> <pre><code>git remote add origin git@github.com:[usuario]/[nombre-repositorio.git]\n</code></pre> <p>Si queremos cambiar el nombre de la rama principal, utilizaremos:</p> <pre><code>git branch -M [nombre]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#subir-el-proyecto-a-github","title":"Subir el proyecto a GitHub","text":"<p>El siguiente comando env\u00eda los cambios locales al repositorio de GitHub (la opci\u00f3n -u establece una relaci\u00f3n entre la rama main local y remota):</p> <pre><code>git push -u [repositorio] [rama destino]\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#clonar-un-repositorio-de-github","title":"Clonar un repositorio de GitHub","text":"<p>Para clonar un repositorio, usaremos el comando:</p> <pre><code>git clone git@github.com:[usuario]/[nombre-repositorio.git]\n</code></pre> <p>Si queremos ver la configuraci\u00f3n del repositorio remoto, utilizaremos:</p> <pre><code>git remote show [nombre del remoto]\n</code></pre> <p>Usaremos este comando para traer la informaci\u00f3n de los cambios, pero no los cambios del servidor en s\u00ed:</p> <pre><code>git fetch\n</code></pre> <p>Para traer los cambios, necesitaremos el comando:</p> <pre><code>git merge [nombre del remoto]/[rama remota]\n</code></pre> <p>Tambi\u00e9n est\u00e1 la opci\u00f3n de combinar las dos acciones con el comando:</p> <pre><code>git pull\n</code></pre> <p>Si queremos que sea rebase, ejecutaremos lo siguiente (ya que por defecto hace un merge):</p> <pre><code>git pull --rebase\n</code></pre> <p>Para guardar los cambios no confirmados temporalmente, usaremos:</p> <pre><code>git stash save\n</code></pre> <p>Si queremos restaurar los cambios guardados en el stash, ejecutaremos:</p> <pre><code>git stash pop\n</code></pre> <p>Hay un comando que hace los tres comandos a la vez:</p> <pre><code>git pull --autostash\n</code></pre>"},{"location":"Ud1/RPE/cheatsheet1/#colaboracion-en-github","title":"Colaboraci\u00f3n en GitHub","text":"<p>Para crear la rama remota que hace referencia al repositorio original, se utiliza el siguiente comando:</p> <pre><code>git remote add upstream [enlace github]\n</code></pre> <p>Si queremos enviar una rama al repositorio origin, tendremos que ejecutar:</p> <pre><code>git push --set-upstream origin [nombre de nuestra rama]\n</code></pre> <p>```</p>"},{"location":"Ud1/RRLL/cheatsheet/","title":"Cheatsheet GIT de Rommel","text":""},{"location":"Ud1/RRLL/cheatsheet/#configurar-git","title":"Configurar GIT","text":""},{"location":"Ud1/RRLL/cheatsheet/#configurar-nombre","title":"Configurar nombre","text":"<pre><code>git config --global user.name \"nombre\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#configurar-email","title":"Configurar email","text":"<pre><code>git config --global user.email \"email\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#uso-basico-de-git","title":"Uso b\u00e1sico de git","text":""},{"location":"Ud1/RRLL/cheatsheet/#inicializar-un-repositorio-git","title":"Inicializar un repositorio Git","text":"<pre><code>git init\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#comandos-basicos-de-git","title":"Comandos b\u00e1sicos de Git","text":""},{"location":"Ud1/RRLL/cheatsheet/#consultar-el-estado-de-un-proyecto","title":"Consultar el estado de un proyecto","text":"<pre><code>git status\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#anadir-el-archivo-o-sus-cambios-al-area-de-preparacion-staging-area","title":"A\u00f1adir el archivo o sus cambios al \u00e1rea de preparaci\u00f3n (staging area)","text":"<pre><code>git add nombre_del_archivo\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#anadir-los-archivos-de-forma-recursiva-al-area-de-preparacion-staging-area","title":"A\u00f1adir los archivos de forma recursiva al \u00e1rea de preparaci\u00f3n (staging area)","text":"<pre><code>git add .\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#confirmar-los-cambios","title":"Confirmar los cambios","text":"<pre><code>git commit -m \"mensaje del commit\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#git-ignore-global","title":"Git ignore global","text":"<p>Primero debes configurar el archivo .gitignore_global, una vez lo tenegas dependiendo de donde est\u00e9 ubicado el archivo, $HOME puede ser sustituido.</p>"},{"location":"Ud1/RRLL/cheatsheet/#aplicar-el-archivo-gitignore_global","title":"Aplicar el archivo .gitignore_global","text":"<pre><code>git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#historial-de-los-commits","title":"Historial de los commits","text":"<pre><code>git log\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#crear-un-alias","title":"Crear un alias","text":"<pre><code>git config --global alias.nombre_del_alias \"Orden que realiza\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#volver-a-un-commit-anterior","title":"Volver a un commit anterior","text":"<pre><code>git checkout hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#guardar-los-cambios-en-una-nueva-rama","title":"Guardar los cambios en una nueva rama","text":"<p>Antes hay que realizar un git add y un git commit como hemos visto previamente</p> <pre><code>git switch -c nombre_rama\n</code></pre> <pre><code>git checkout -b nueva_rama\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#volver-a-la-rama-anterior","title":"Volver a la rama anterior","text":"<pre><code>git switch -\n</code></pre> <pre><code>git checkout master\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#volver-el-estado-del-proyecto-al-commit-deseado","title":"Volver el estado del proyecto al commit deseado","text":"<pre><code>git reset hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#variaciones","title":"Variaciones","text":""},{"location":"Ud1/RRLL/cheatsheet/#soft","title":"Soft","text":"<p>Al aplicar esta opcion los cambios de los commits se mantienen en la \u00e1rea de preparaci\u00f3n (staging area) y los cambios realizados en el working directory siguen intactos.</p> <pre><code>git reset --soft hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#mixed","title":"Mixed","text":"<p>Al aplicar esta opcion los cambios de los commits se quitan del \u00e1rea de preparaci\u00f3n (staging area) y los cambios realizados en el working directory siguen intactos, es el que se aplica por defecto.</p> <pre><code>git reset --mixed hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#hard","title":"Hard","text":"<p>Al aplicar esta opcion los cambios de los commits se quitan del \u00e1rea de preparaci\u00f3n (staging area) y los cambios realizados en el working directory tambi\u00e9n se pierden.</p> <pre><code>git reset --hard hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#etiquetas","title":"Etiquetas","text":""},{"location":"Ud1/RRLL/cheatsheet/#anadir-etiqueta","title":"A\u00f1adir etiqueta","text":"<pre><code>git tag nombre_etiqueta\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#ver-etiquetas-existentes","title":"Ver etiquetas existentes","text":"<pre><code>git tag\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#borrar-etiqueta","title":"Borrar etiqueta","text":"<pre><code>git tag -d nombre_etiqueta\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#visualizar-cambios","title":"Visualizar cambios","text":""},{"location":"Ud1/RRLL/cheatsheet/#cambios-entre-el-ultimo-commit-y-el-area-de-trabajo-working-directory","title":"Cambios entre el \u00faltimo commit y el \u00e1rea de trabajo (working directory)","text":"<pre><code>git diff\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#cambios-entre-un-commit-y-el-work-direcotry","title":"Cambios entre un commit y el work direcotry","text":"<pre><code>git diff hash_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#cambios-entre-dos-commits","title":"Cambios entre dos commits","text":"<pre><code>git diff hash_commit has_commit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#uso-avanzado-de-git","title":"Uso avanzado de Git","text":""},{"location":"Ud1/RRLL/cheatsheet/#desacer-cambios","title":"Desacer cambios","text":""},{"location":"Ud1/RRLL/cheatsheet/#deshaciendo-cambios-antes-de-la-fase-de-staging","title":"Deshaciendo cambios antes de la fase de staging","text":"<pre><code>git restore nombre_archivo\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#deshaciendo-cambios-antes-del-commit","title":"Deshaciendo cambios antes del commit","text":"<pre><code>git restore --staged nombre_archivo\n</code></pre> <pre><code>git restore nombre_archivo\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#deshacer-commits","title":"Deshacer commits","text":"<pre><code>git revert hash_commit --no-edit\n</code></pre> <p>Si quieres revertir al \u00faltimo comit donde head est\u00e1 apuntando</p> <pre><code>git revert HEAD --no-edit\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#modificar-un-commit","title":"Modificar un commit","text":"<pre><code>git commit --amend -m \"mensaje del commit\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#renombrar-y-mover-archivos","title":"Renombrar y mover archivos","text":""},{"location":"Ud1/RRLL/cheatsheet/#renombrar","title":"Renombrar","text":"<pre><code>git mv nombre_archivo nuevo_nombre\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#mover","title":"Mover","text":"<pre><code>git mv nombre_archivo carpeta\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#ramas","title":"Ramas","text":""},{"location":"Ud1/RRLL/cheatsheet/#crear-una-nueva-rama","title":"Crear una nueva rama","text":"<pre><code>git branch nombre_rama\n</code></pre> <p>Si queremos crear la rama y situarnos en ella directamente podemos usar cualquiera de estos dos comandos.</p> <pre><code>git switch -c nombre_rama\n</code></pre> <pre><code>git checkout -b nombre_rama\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#ver-nuestras-ramas","title":"Ver nuestras ramas","text":"<pre><code>git branch\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#cambiar-de-ramas","title":"Cambiar de ramas","text":"<pre><code>git switch nombre_rama\n</code></pre> <pre><code>git checkout nombre_rama\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#fusion-de-ramas","title":"Fusi\u00f3n de ramas","text":"<pre><code>git merge nombre_rama\n</code></pre> <pre><code>git rebase nombre_rama\n</code></pre> <p>Los dos comandos sirven para fusionar ramas, la principal diferencia es que merge mantiene el historial completo de ambas ramas y se a\u00f1ade un nuevo commit que representa la fusi\u00f3n y rebase convierte el historial en una \u00fanica linea sin bifurcaciones, no crea un commit de fusi\u00f3n.</p>"},{"location":"Ud1/RRLL/cheatsheet/#fast-forward-y-squash","title":"fast-forward y Squash","text":"<pre><code>git merge --no-ff nombre_rama \n</code></pre> <p>Por defecto es fast-forward, esto lo que signifca es que no deja rastro de la fusi\u00f3n, por ello es recomendable usar el parametro --no-ff para que quede constancia de que una rama se ha fusionado con otra.</p> <pre><code>git merge --squash nombre_rama \n</code></pre> <p>B\u00e1sicamente lo que hace es combinar todos los commits de la rama fusionada en un solo commit. Despu\u00e9s de eso tenemos que hacer un commit manualmente.</p> <p></p>"},{"location":"Ud1/RRLL/cheatsheet/#github","title":"GitHub","text":""},{"location":"Ud1/RRLL/cheatsheet/#crear-clave-publicaprivada","title":"Crear clave P\u00fablica/Privada","text":"<pre><code>ssh-keygen -t rsa -C \"Cuenta GitHub\"\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#anadir-ssh-a-github","title":"A\u00f1adir SSH a GitHub","text":"<p>Copias el contenido de tu clave p\u00fablica y lo a\u00f1ades en GitHub.</p> <pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#crear-el-repositorio-remoto","title":"Crear el repositorio remoto","text":"<p>Previamente tienes que tener creado el repositorio en GitHub.</p> <pre><code>git remote add origin enlace_repositorio_GitHub\n</code></pre> <p>Si queires modificar la URL usa este comando</p> <pre><code>git remote set-url origin enlace_repositorio_GitHub\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#ver-la-configuracion-de-nuestro-repositorio-remoto","title":"Ver la configuraci\u00f3n de nuestro repositorio remoto","text":"<pre><code>git remote show origin\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#clonar-un-repositorio-de-github","title":"Clonar un repositorio de GitHub","text":"<pre><code>git clone enlace_repositorio_GitHub\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#subir-archivos-a-github","title":"Subir archivos a GitHub","text":"<pre><code>git push origin master\n</code></pre> <p>Si usas el comando de abajo gracias al parametro -u vinculamos nuestra rama local con una rama remota, de tal manera que no tengamos que estar siempre indic\u00e1ndolo cuando hagamos un pull o push</p> <pre><code>git push -u origin master\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#actualizar-nuestro-repositorio-local","title":"Actualizar nuestro repositorio local","text":"<p>Hay dos formas de realizarlo.</p>"},{"location":"Ud1/RRLL/cheatsheet/#fetch-y-mergerebase","title":"Fetch y merge/rebase","text":"<pre><code>git fetch\n</code></pre> <pre><code>git merge origin/master\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#pull","title":"Pull","text":"<pre><code>git pull \n</code></pre> <p>Por defecto git pull lo que hace es un git merge, si queremos hacer git rebase deberemos especificarlos con el par\u00e1metro -r o --rebase.</p> <pre><code>git pull --rebase \n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#guardar-los-cambios-no-confirmados-temporalmente","title":"Guardar los cambios no confirmados temporalmente","text":"<p>Esto generalmente es usado para solucionar conflictos que surgen cuando queremos hacer un git pull y no nos deja debido a que tenemos archivos son confirmar en local.</p> <ul> <li>Guardar los archivos sin confirmar.</li> </ul> <pre><code>git stash save\n</code></pre> <ul> <li>Hacemos un push.</li> </ul> <pre><code>git stash save\n</code></pre> <ul> <li>Recuperamos los archivos sin confirmar.</li> </ul> <pre><code>git stash pop\n</code></pre> <p>Git te permite hacer esto con un solo comando.</p> <pre><code>git pull --autostash\n</code></pre> <p>Y si quieres que adem\u00e1s te haga un rebase, le a\u00f1adimos lo que hemos visto anteriormente.</p> <pre><code>git pull --autostash --rebase\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#ramas-en-github","title":"Ramas en GitHub","text":""},{"location":"Ud1/RRLL/cheatsheet/#subir-una-nueva-rama-a-github","title":"Subir una nueva rama a GitHub","text":"<ul> <li>Creamos la rama en local</li> </ul> <pre><code>git branch nombre_rama\n</code></pre> <ul> <li>Hacemos un push de la rama</li> </ul> <pre><code>git push origin nombre_rama\n</code></pre>"},{"location":"Ud1/RRLL/cheatsheet/#borrar-una-rama-en-github","title":"Borrar una rama en GitHub","text":"<pre><code>git push origin -d nombre_rama\n</code></pre>"},{"location":"Ud1/RSN/cheatsheet1/","title":"Cheatsheet git","text":""},{"location":"Ud1/RSN/cheatsheet1/#uso-basico-de-git","title":"Uso b\u00e1sico de Git","text":"<ul> <li> <p>git status -&gt; Saber el estado de los archivos(d\u00f3nde se encuentran)</p> </li> <li> <p>git init -&gt; Inicializar git(\u00fanicamente se debe realizar una vez)</p> </li> <li> <p>git add -&gt; A\u00f1adir a Staging area</p> </li> <li> <p>git commit -m \"Nombre del commit\" -&gt; Pasar al repositorio local</p> </li> <li> <p>.gitignore -&gt; Archivo que se crea para ignorar archivos</p> </li> <li> <p>git config --global core.excludesfile $HOME/.gitignore_global -&gt; Fichero gitignore global</p> </li> <li> <p>git log -&gt; Observar todos los cambios realizados anteriormente</p> </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#git-log","title":"Git log","text":"<ol> <li> <p>git log --online --max-count=2 -&gt; Muestra m\u00e1ximo 2 lineas</p> </li> <li> <p>git log --oneline --since='5 minutes ago' -&gt; Muestra a partir de 5 min</p> </li> <li> <p>git log --oneline --until='5 minutes ago' -&gt; Muestra hasta 5 min.</p> </li> <li> <p>git log --oneline --author=rauls -&gt; Muestra los del autor</p> </li> <li> <p>git log --oneline --all -&gt; Muestra todos</p> </li> <li> <p>git log --online -&gt; Muestra \u00fanicamente una l\u00ednea</p> </li> <li> <p>git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short -&gt; Nos permite ver d\u00f3nde estan master y HEAD y m\u00e1s</p> </li> </ol>"},{"location":"Ud1/RSN/cheatsheet1/#crear-alias","title":"Crear alias","text":"<ul> <li> <p>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\" -&gt; Nos perimte crear un alias para comandos</p> </li> <li> <p>git hist -&gt; Se ejecuta el alias</p> </li> <li> <p>git hist master --all -&gt; Muestra todo el historial</p> </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#checkout","title":"Checkout","text":"<ul> <li> <p>git checkout \"hash\" -&gt; Se utiliza para regresar al estado del proyecto</p> </li> <li> <p>git switch - -&gt; Vuelve al estado final</p> </li> <li> <p>git checkout \"tag\"^ -&gt; Nos lleva al ancestro</p> </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#tag","title":"Tag","text":"<ul> <li> <p>git tag -&gt; Crea una etiqueta concreta</p> </li> <li> <p>git tag -d \"etiqueta\" -&gt; Borra la etiqueta</p> </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#ver-cambios","title":"Ver cambios","text":"<ul> <li>git diff \"nombre etiqueta\"-\"nombre etiqueta\" -&gt; Ver cambios que se han realizado</li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#deshacer-cambios","title":"Deshacer cambios","text":"<ul> <li>git restore \"nombre archivo\" -&gt; Deshacer cambios</li> </ul> <p>-git restore --staged \"nombre archivo\" -&gt; Sacar del \u00e1rea de staging</p>"},{"location":"Ud1/RSN/cheatsheet1/#deshacer-commits","title":"Deshacer commits","text":"<ul> <li>git revert HEAD --no-edit -&gt; Revertir \u00faltimo commit que apunta a HEAD</li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#borar-commits-de-una-rama","title":"Borar commits de una rama","text":"<ul> <li>git reset --hard \"nombre\" -&gt; Eliminar commit</li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#modificar-commit","title":"Modificar commit","text":"<ul> <li>git commit --amend -m \"Descripcion\"-&gt; Permite modificar el \u00faltimo estado confirmado</li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#mover-y-borrar-archivos","title":"Mover y borrar archivos","text":"<ul> <li>git mv \"Nombre\" \"Carpeta\"-&gt; Mover a la carpeta</li> <li>git rm \"Nombre\" -&gt; Eliminar archivo </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#ramas","title":"Ramas","text":"<ul> <li> <p>git branch \"Nombre\" -&gt; Crear rama</p> </li> <li> <p>git checkout \"Nombre\" -&gt; Moverse a la rama</p> </li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#fusion-de-ramas","title":"Fusion de ramas","text":"<ul> <li> <p>git merge \"Nombre\" -&gt; Se ejecuta en la rama cuyos cambios queremos incorprar a la actual</p> </li> <li> <p>git rebase \"Nombre rama\" -&gt; Es otra forma de fusionar</p> </li> </ul> <p>(Se recomienda el uso de --no-ff, para dejar rastro de fusi\u00f3n)</p>"},{"location":"Ud1/RSN/cheatsheet1/#github","title":"Github","text":""},{"location":"Ud1/RSN/cheatsheet1/#creacion-de-clave-ssh","title":"Creaci\u00f3n de clave ssh","text":"<ul> <li>ssh-keygen -t rsa -C \"Cuenta GitHub\" -&gt; Crea una clave ssh</li> </ul>"},{"location":"Ud1/RSN/cheatsheet1/#comandos-para-repositorio-en-la-nube","title":"Comandos para repositorio en la nube","text":"<ul> <li> <p>git remote add origin \"Enlace ssh github\" -&gt; A\u00f1ade un repositorio remoto</p> </li> <li> <p>git branch -M main -&gt; Se utiliza para renombrar a una rama</p> </li> <li> <p>git push -u origin main -&gt; Envia los cambios de locala la nube</p> </li> <li> <p>git clone \"Enlace github\" -&gt; Clona el repositorio en local</p> </li> <li> <p>git fetch -&gt; Trae informaci\u00f3n del remoto</p> </li> <li> <p>git pull -&gt; Descarga el contenido del remoto y lo fusiona con la rama local</p> </li> <li> <p>git stash save -&gt; Se guardan los cambios en la pila</p> </li> <li> <p>git stash pop -&gt; Se sacan los cambios de la pila</p> </li> </ul>"},{"location":"Ud1/VATC/cheatsheet/","title":"\ud83c\udf1f UD1 - Cheatsheet","text":"<p>\u270d\ufe0f Victor Alexandru Teleanu Covaci</p>"},{"location":"Ud1/VATC/cheatsheet/#instalacion-de-git","title":"\ud83d\ude80 Instalaci\u00f3n de Git","text":"\ud83d\udcbb Sistema Operativo / \ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n \ud83d\udc27 Linux <code>yum install git-core</code> Instalar Git en Linux (instalador binario) <code>apt-get install git</code> Instalar Git en distribuci\u00f3n basada en Debian \ud83e\ude9f Windows \ud83d\udd17 Git para Windows Descargar Git para Windows \ud83c\udf4f MacOS <code>brew install git</code> Instalar Git en MacOS"},{"location":"Ud1/VATC/cheatsheet/#recomendaciones","title":"\ud83d\udd0d Recomendaciones","text":"<ul> <li>Con <code>git version</code> puedes comprobar la versi\u00f3n instalada de Git.</li> <li>Con <code>git help &lt;comando&gt;</code> podemos ver ayuda detallada sobre el comando deseado.</li> </ul>"},{"location":"Ud1/VATC/cheatsheet/#configuracion-git","title":"\u2699\ufe0f Configuraci\u00f3n Git","text":""},{"location":"Ud1/VATC/cheatsheet/#tu-identidad","title":"\ud83e\uddd1\u200d\ud83d\udcbb Tu identidad","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git config --global user.name \"John Doe\"</code> Establece tu nombre de usuario global <code>git config --global user.email johndoe@example.com</code> Establece tu correo electr\u00f3nico global <code>git config --global push.default simple</code> Env\u00eda solo la rama actual al repositorio remoto <code>git config --global core.excludesfile $HOME/.gitignore_global</code> Configura un fichero gitignore global"},{"location":"Ud1/VATC/cheatsheet/#uso-basico-de-git","title":"\ud83d\udcda Uso b\u00e1sico de Git","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git init</code> Crea un nuevo repositorio <code>git status</code> Consulta el estado de los archivos del proyecto <code>git add archivo.txt</code> Almacena el archivo en el repositorio; pasa a la \"Staging area\" <code>git add .</code> A\u00f1ade todos los archivos y directorios al proyecto <code>git commit -m \"mensaje del commit\"</code> Guarda los cambios en el repositorio con un mensaje de commit <code>git push origin &lt;rama&gt;</code> Env\u00eda los cambios de la rama local al repositorio remoto <code>git switch &lt;rama&gt;</code> Cambia a la rama especificada"},{"location":"Ud1/VATC/cheatsheet/#estados-de-un-archivo-en-git","title":"\ud83d\udcc1 Estados de un archivo en Git","text":"<ul> <li>Sin seguimiento (untracked): Archivos no rastreados por Git.</li> <li>Modificado (modified): Archivos con cambios desde el \u00faltimo commit.</li> <li>Preparado (staged): Archivos listos para ser confirmados.</li> <li>Confirmado (committed): Archivos guardados en el historial del repositorio.</li> </ul>"},{"location":"Ud1/VATC/cheatsheet/#historial","title":"\ud83d\udcdc Historial","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git log</code> Muestra todos los cambios realizados <code>git log --oneline</code> Muestra el historial en una sola l\u00ednea <code>git config --global alias.hist \"log --pretty=format:'%h %ad / %s%d [%an]' --graph --date=short\"</code> Crea un alias para ver el historial de forma personalizada <code>git hist</code> Ejecuta el alias creado <code>git diff \"v1\" \"v2\"</code> Muestra los cambios entre versiones"},{"location":"Ud1/VATC/cheatsheet/#versionado","title":"\ud83d\udce6 Versionado","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git tag</code> Muestra todas las etiquetas existentes <code>git tag v1</code> Etiqueta una versi\u00f3n espec\u00edfica <code>git tag -d nombre_etiqueta</code> Borra la etiqueta especificada"},{"location":"Ud1/VATC/cheatsheet/#deshacer-cambios","title":"\ud83d\udee0\ufe0f Deshacer cambios","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git restore archivo.txt</code> Revierte los cambios a la \u00faltima versi\u00f3n que se encuentra en el \u00faltimo commit <code>git restore --staged archivo.txt</code> Mueve el archivo del Staging Area al Working Directory <code>git revert HEAD --no-edit</code> Crea un nuevo commit que deshace los cambios realizados en el commit actual <code>git reset --hard v1</code> Revierte un commit sin dejar rastro en el historial"},{"location":"Ud1/VATC/cheatsheet/#ramas","title":"\ud83c\udf3f Ramas","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git branch</code> Lista todas las ramas <code>git branch nombre_rama</code> Crea una nueva rama <code>git checkout nombre_rama</code> Cambia a una rama espec\u00edfica <code>git checkout -b &lt;nombre_rama&gt;</code> Crea y cambia a una nueva rama <code>git merge &lt;rama&gt;</code> Incorpora los cambios de una rama a la actual sin dejar rastro de fusi\u00f3n <code>git merge &lt;rama&gt; --no-ff</code> Incorpora cambios de una rama a la actual dejando rastro de fusi\u00f3n <code>git rebase &lt;rama&gt;</code> Aplica los commits de una rama a otra"},{"location":"Ud1/VATC/cheatsheet/#github","title":"\ud83c\udf10 GitHub","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git clone git@github.com:usuario/repositorio.git</code> Clona un repositorio remoto en local <code>git remote</code> Muestra la configuraci\u00f3n del repositorio remoto <code>git fetch</code> Trae la informaci\u00f3n del servidor remoto <code>git pull &lt;remoto&gt; &lt;rama&gt;</code> Actualiza el repositorio local con los cambios del remoto <code>git pull --rebase &lt;remoto&gt; &lt;rama&gt;</code> Actualiza el repositorio local con rebase desde el remoto"},{"location":"Ud1/VATC/cheatsheet/#git-flow","title":"\ud83c\udf00 Git Flow","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git flow init</code> Inicializa el espacio de trabajo <code>git flow feature</code> Crea y trabaja con ramas de funcionalidades <code>git flow release</code> Crea y trabaja con ramas de versiones <code>git flow hotfix</code> Crea y trabaja con ramas de parches"},{"location":"Ud1/VATC/cheatsheet/#git-stash","title":"\ud83d\udce6 Git Stash","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git stash</code> Guarda temporalmente los cambios en el espacio de trabajo <code>git stash save</code> Permite guardar con un mensaje espec\u00edfico <code>git stash list</code> Muestra la lista de elementos guardados en stash <code>git stash apply</code> Aplica el stash m\u00e1s reciente en el espacio de trabajo <code>git stash pop</code> Aplica y elimina el stash m\u00e1s reciente <code>git stash show</code> Muestra un resumen de los archivos modificados en ese stash <code>git stash branch</code> Crea una nueva rama desde el \u00faltimo stash <code>git stash clear</code> Elimina todos los elementos guardados en stash (acci\u00f3n destructiva) <code>git stash drop</code> Elimina un stash espec\u00edfico o el m\u00e1s reciente si no se indica ninguno"},{"location":"Ud1/VATC/cheatsheet/#git-worktree","title":"\ud83c\udf33 Git Worktree","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git worktree add /directorio master</code> Crea un directorio con el estado de la rama master <code>git worktree list</code> Muestra la lista de directorios y espacios de trabajo <code>git worktree delete fix</code> Elimina un espacio de trabajo"},{"location":"Ud1/VATC/cheatsheet/#git-blame","title":"\ud83d\udd0d Git Blame","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>git blame archivo.txt</code> Muestra qui\u00e9n modific\u00f3 una l\u00ednea espec\u00edfica de c\u00f3digo, en qu\u00e9 commit y cu\u00e1ndo"},{"location":"Ud2/Ch2_ABM/","title":"\ud83d\udea2 Cheatsheet Docker","text":""},{"location":"Ud2/Ch2_ABM/#comandos-basicos","title":"\ud83d\udd27 Comandos B\u00e1sicos","text":"<pre><code>docker --version            # Verificar la versi\u00f3n de Docker\ndocker run hello-world      # Ejecutar un contenedor de prueba para verificar la configuraci\u00f3n de Docker\nusermod -aG docker [usuario]   # A\u00f1adir un usuario al grupo Docker (para no usar sudo)\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#instalacion-de-docker-compose","title":"\ud83d\udee0 Instalaci\u00f3n de Docker Compose","text":"<pre><code>apt install docker-compose  # Instalar Docker Compose\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#gestion-de-contenedores","title":"\ud83d\udce6 Gesti\u00f3n de Contenedores","text":"<pre><code>docker exec -d [contenedor] touch /tmp/example  # Ejecutar un comando dentro de un contenedor en ejecuci\u00f3n\ndocker attach [contenedor]                     # Adjuntar a un contenedor en vivo\ndocker logs -f --since=5s [contenedor]         # Ver los logs del contenedor en tiempo real\ndocker stop $(docker ps -q)                    # Detener todos los contenedores en ejecuci\u00f3n\ndocker rm [nombre_o_id_contenedor]             # Eliminar un contenedor espec\u00edfico\ndocker commit -a \"Nombre\" -m \"Registro de cambios\" [contenedor] [usuario/imagen:etiqueta]  # Guardar un contenedor como una nueva imagen\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#gestion-de-imagenes","title":"\ud83d\uddbc Gesti\u00f3n de Im\u00e1genes","text":"<pre><code>docker pull alpine:latest                     # Descargar una imagen desde Docker Hub\ndocker history nginx                          # Ver el historial de capas de la imagen\ndocker rmi ubuntu:18.04                       # Eliminar una imagen espec\u00edfica\ndocker images                                 # Listar todas las im\u00e1genes de Docker\ndocker tag [imagen:etiqueta] [nueva_imagen:latest]  # A\u00f1adir una nueva etiqueta a una imagen existente\ndocker save -o backup_image.tar [imagen]      # Guardar una imagen en un archivo\ndocker load -i backup_image.tar               # Cargar una imagen desde un archivo\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#flujo-de-trabajo-en-docker-hub","title":"\ud83c\udf10 Flujo de Trabajo en Docker Hub","text":"<pre><code>docker login                                  # Iniciar sesi\u00f3n en Docker Hub\ndocker push [usuario/repositorio:etiqueta]    # Subir una imagen a Docker Hub\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#gestion-de-volumenes-de-docker","title":"\ud83d\udcbe Gesti\u00f3n de Vol\u00famenes de Docker","text":"<pre><code>docker volume create [nombre_volumen]         # Crear un volumen de Docker\ndocker volume ls                              # Listar todos los vol\u00famenes\ndocker volume inspect [nombre_volumen]        # Ver detalles de un volumen\ndocker volume rm [nombre_volumen]             # Eliminar un volumen espec\u00edfico\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#uso-de-docker-compose","title":"\u2699 Uso de Docker Compose","text":"<pre><code>docker-compose up -d                          # Iniciar contenedores en segundo plano\ndocker-compose stop                           # Detener los servicios en ejecuci\u00f3n\ndocker-compose down                           # Detener y eliminar contenedores, redes, vol\u00famenes\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#limpieza-del-sistema","title":"\ud83e\uddf9 Limpieza del Sistema","text":"<pre><code>docker system prune                           # Limpiar contenedores, im\u00e1genes, vol\u00famenes y redes no utilizados\ndocker system prune -a                        # Limpiar agresivamente todos los contenedores detenidos e im\u00e1genes no utilizadas\n</code></pre>"},{"location":"Ud2/Ch2_ABM/#miscelanea","title":"\ud83d\udcdd Miscel\u00e1nea","text":"<pre><code>docker ps                                     # Listar todos los contenedores en ejecuci\u00f3n\n</code></pre>"},{"location":"Ud2/Ch2_ACF/","title":"\ud83d\udc33 Docker Cheatsheet","text":""},{"location":"Ud2/Ch2_ACF/#1-comandos-de-instalacion-y-comprobacion","title":"1. \ud83d\udee0\ufe0f Comandos de instalaci\u00f3n y comprobaci\u00f3n","text":"Comando Explicaci\u00f3n <code>apt-get install docker-compose</code> \ud83d\udda5\ufe0f Comando para instalar Docker Compose en Ubuntu o Debian <code>docker --version</code> \ud83d\udd0d Ver la versi\u00f3n de Docker instalada <code>docker run hello-world</code> \ud83d\ude80 Comprobar el funcionamiento de Docker <code>usermod -aG docker $USER</code> \ud83d\udc64 A\u00f1adir usuario al grupo Docker"},{"location":"Ud2/Ch2_ACF/#2-principales-acciones-con-docker","title":"2. \ud83d\ude80 Principales acciones con Docker","text":"Comando Explicaci\u00f3n <code>docker exec -d (contenedor) touch /tmp/prueba</code> \ud83d\udd27 Ejecutar un comando dentro de un contenedor <code>docker attach (contenedor)</code> \ud83d\udcce Adjuntar a un contenedor en ejecuci\u00f3n <code>docker logs -f --until=2s (contenedor)</code> \ud83d\udcdc Ver registros del contenedor <code>docker ps</code> \ud83d\udccb Listar contenedores en ejecuci\u00f3n <code>docker start (contenedor)</code> \u25b6\ufe0f Iniciar un contenedor <code>docker stop (contenedor)</code> \u23f9\ufe0f Parar un contenedor <code>docker rm (contenedor)</code> \ud83d\uddd1\ufe0f Borrar un contenedor <code>docker system prune -a</code> \ud83e\uddf9 Eliminar todos los contenedores no utilizados <code>docker network create (nombre-red)</code> \ud83c\udf10 Crear red compartida entre contenedores"},{"location":"Ud2/Ch2_ACF/#3-comandos-de-imagenes","title":"3. \ud83d\uddbc\ufe0f Comandos de Im\u00e1genes","text":"Comando Explicaci\u00f3n <code>docker images</code> \ud83d\udcc2 Ver im\u00e1genes almacenadas <code>docker search (imagen)</code> \ud83d\udd0e Buscar informaci\u00f3n sobre una imagen <code>docker pull (imagen)</code> \u2b07\ufe0f Descargar una imagen localmente <code>docker history (imagen)</code> \ud83d\udcdc Ver historial de una imagen <code>docker rmi (imagen)</code> \ud83d\uddd1\ufe0f Eliminar una imagen almacenada <code>docker tag</code> \ud83c\udff7\ufe0f Etiquetar una imagen <code>docker save</code> \ud83d\udcbe Guardar una copia de una imagen <code>docker load</code> \ud83d\udce5 Importar archivo para crear una imagen <code>docker commit -m \u201ccomentario\u201d IDCONTENEDOR usuario/imagen:version</code> \ud83d\udcf8 Crear una imagen de un contenedor existente <code>docker build -t ubuntunano ./</code> \ud83d\udee0\ufe0f Crear una imagen desde un Dockerfile"},{"location":"Ud2/Ch2_ACF/#4-comandos-de-volumenes","title":"4. \ud83d\udcc2 Comandos de Vol\u00famenes","text":"Comando Explicaci\u00f3n <code>docker volume create (nombre-volumen)</code> \ud83c\udd95 Crear un volumen <code>docker volume ls</code> \ud83d\udccb Listar vol\u00famenes <code>docker volume inspect (nombre-volumen)</code> \ud83d\udd0d Ver metadatos de un volumen <code>docker volume rm (nombre-volumen)</code> \ud83d\uddd1\ufe0f Borrar un volumen"},{"location":"Ud2/Ch2_ACF/#5-comandos-docker-compose","title":"5. \ud83e\udde9 Comandos Docker Compose","text":"Comando Explicaci\u00f3n <code>docker-compose up -d</code> \ud83d\ude80 Iniciar contenedores en segundo plano"},{"location":"Ud2/Ch2_AEM/","title":"Docker y Docker Compose Cheatsheet","text":""},{"location":"Ud2/Ch2_AEM/#comandos-docker-basicos","title":"Comandos Docker b\u00e1sicos","text":"<ul> <li> <p>Listar contenedores en ejecuci\u00f3n: <pre><code>docker ps\n</code></pre></p> </li> <li> <p>Listar todas las im\u00e1genes: <pre><code>docker images\n</code></pre></p> </li> <li> <p>Listar una imagen concreta (ejemplo: busybox): <pre><code>docker images busybox\n</code></pre></p> </li> <li> <p>Filtrar im\u00e1genes por referencia (<code>*04</code>): <pre><code>docker images -f=reference=\"u*:*04\"\n</code></pre></p> </li> <li> <p>Descargar una imagen espec\u00edfica de Docker Hub (ejemplo: <code>ubuntu:14.04</code>): <pre><code>docker pull ubuntu:14.04\n</code></pre></p> </li> <li> <p>Buscar im\u00e1genes en Docker Hub que empiecen con \"ubuntu\": <pre><code>docker search ubuntu\n</code></pre></p> </li> <li> <p>Buscar im\u00e1genes en Docker Hub con l\u00edmite de resultados (ejemplo: 100): <pre><code>docker search --limit=100 ubuntu\n</code></pre></p> </li> <li> <p>Ver el historial de una imagen (lo que se ha hecho para crearla, ejemplo: <code>nginx:latest</code>): <pre><code>docker history nginx:latest\n</code></pre></p> </li> </ul>"},{"location":"Ud2/Ch2_AEM/#manejo-de-imagenes-y-contenedores","title":"Manejo de im\u00e1genes y contenedores","text":"<ul> <li> <p>Eliminar una imagen espec\u00edfica (ejemplo: <code>ubuntu:14.04</code>): <pre><code>docker rmi ubuntu:14.04\n</code></pre></p> </li> <li> <p>Detener todos los contenedores (pasando solo los IDs): <pre><code>docker stop $(docker ps -a -q)\n</code></pre></p> </li> <li> <p>Eliminar todos los contenedores detenidos: <pre><code>docker rm $(docker ps -a -q)\n</code></pre></p> </li> <li> <p>Eliminar todo lo creado en Docker (im\u00e1genes, contenedores, etc.): <pre><code>docker system prune -a\n</code></pre></p> </li> </ul>"},{"location":"Ud2/Ch2_AEM/#crear-y-gestionar-contenedores","title":"Crear y gestionar contenedores","text":"<ul> <li> <p>Ejecutar un contenedor interactivo (ejemplo: <code>alpine</code>): <pre><code>docker run -it --name=alpine alpine /bin/sh\n</code></pre></p> </li> <li> <p>Guardar cambios en un contenedor como una nueva imagen: <pre><code>docker commit -a \"AlexM\" -m \"Alpine upgraded\" alpine alexillo98/alpinemod:2024\n</code></pre></p> </li> <li> <p>Ejecutar un contenedor con una imagen modificada: <pre><code>docker run -it alexillo98/alpinemod:2024\n</code></pre></p> </li> <li> <p>Guardar una imagen en un archivo <code>.tar</code>: <pre><code>docker save -o copiaAlpineMod.tar alexillo98/alpinemod\n</code></pre></p> </li> <li> <p>Cargar una imagen desde un archivo <code>.tar</code>: <pre><code>docker load -i copiaAlpineMod.tar\n</code></pre></p> </li> <li> <p>Construir una imagen desde un Dockerfile en el directorio actual: <pre><code>docker build -t ubuntunano .\n</code></pre></p> </li> </ul>"},{"location":"Ud2/Ch2_AEM/#manejo-de-volumenes","title":"Manejo de vol\u00famenes","text":"<ul> <li> <p>Crear un volumen (ejemplo: <code>wordpress-db</code>): <pre><code>docker volume create wordpress-db\n</code></pre></p> </li> <li> <p>Inspeccionar un volumen (ejemplo: <code>wordpress-db</code>): <pre><code>docker volume inspect wordpress-db\n</code></pre></p> </li> <li> <p>Eliminar un volumen (ejemplo: <code>wordpress-db</code>): <pre><code>docker volume rm wordpress-db\n</code></pre></p> </li> <li> <p>Listar todos los vol\u00famenes: <pre><code>docker volume ls\n</code></pre></p> </li> <li> <p>Eliminar todas las im\u00e1genes (pasando solo los IDs): <pre><code>docker rmi $(docker images -q)\n</code></pre></p> </li> </ul>"},{"location":"Ud2/Ch2_AEM/#comandos-docker-compose","title":"Comandos Docker Compose","text":"<ul> <li> <p>Listar contenedores gestionados por Docker Compose: <pre><code>docker-compose ps\n</code></pre></p> </li> <li> <p>Levantar servicios en segundo plano: <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Detener todos los servicios: <pre><code>docker-compose stop\n</code></pre></p> </li> <li> <p>Detener y eliminar todos los servicios, incluyendo vol\u00famenes: <pre><code>docker-compose down -v\n</code></pre></p> </li> </ul>"},{"location":"Ud2/Ch2_BO/","title":"\ud83d\udea2 Unidad 2 - Docker Cheatsheet","text":""},{"location":"Ud2/Ch2_BO/#instalacion-de-docker","title":"\ud83d\udc0b Instalaci\u00f3n de docker","text":""},{"location":"Ud2/Ch2_BO/#instalacion-basica","title":"Instalaci\u00f3n b\u00e1sica","text":"<pre><code>$sudo apt install docker #Instala docker\n\n$sudo apt install docker-compose #Instala docker compose\n</code></pre>"},{"location":"Ud2/Ch2_BO/#post-instalacion","title":"Post-Instalaci\u00f3n","text":"<pre><code>$sudo usermod -aG docker $USER #A\u00f1ade tu usuario al grupo docker\n\n$sudo systemctl start docker #Inicia el servicio de docker\n\n$sudo systemctl enable docker #Habilita el servicio de docker al iniciar siempre el pc\n</code></pre>"},{"location":"Ud2/Ch2_BO/#comandos-informativos","title":"\u2753 Comandos inform\u00e1tivos","text":"<pre><code>$docker --version #Muestra la versi\u00f3n de docker\n\n$docker images #Muestra todas las im\u00e1genes descargadas\n\n$docker ps #Muestra todos los contenedores en ejecuci\u00f3n\n\n$docker ps -a #Muestra un historial de contenedores ejecutados\n</code></pre>"},{"location":"Ud2/Ch2_BO/#comandos-para-gestionar-imagenes","title":"\ud83d\udcbf Comandos para gestionar im\u00e1genes","text":"<pre><code>$docker search &lt;imagen&gt; #Busca una im\u00e1gen en dockerhub\n\n$docker pull &lt;imagen&gt; #Descarga una im\u00e1gen desde dockerhub\n\n$docker tag &lt;imagen&gt; &lt;nombre:tag&gt; #Etiqueta una im\u00e1gen\n\n$docker history &lt;imagen&gt; #Muestra el historial de c\u00f3mo se cre\u00f3 la im\u00e1gen\n</code></pre>"},{"location":"Ud2/Ch2_BO/#comandos-para-gestionar-contenedores","title":"\ud83d\udcbc Comandos para gestionar contenedores","text":"<pre><code>$docker inspect &lt;id-contenedor&gt; #Muestra informaci\u00f3n del contenedor\n\n$docker start &lt;id-contenedor&gt; #Inicia un contenedor creado con antelaci\u00f3n\n\n$docker stop &lt;id-contenedor&gt; #Detiene un contenedor\n\n$docker rename &lt;id-contenedor&gt; &lt;nombre&gt; #Renombra el contenedor\n\n$docker run &lt;id-contenedor&gt; #Inicia el contenedor y si no tiene la im\u00e1gen, la descarga\n\n$docker exec -d &lt;id-contenedor&gt; touch hola.php #Ejecuta un comando dentro de un contenedor ya iniciado, ejemplo con touch\n\n$docker attach &lt;id-contenedor&gt; #Permite adjuntarse a un contenedor en ejecuci\u00f3n y ver su salida\n\n$docker logs &lt;id-contenedor&gt; #Permite ver los logs \"registros\" del contenedor\n</code></pre>"},{"location":"Ud2/Ch2_BO/#comandos-para-gestionar-volumenes","title":"\ud83d\udcc2 Comandos para gestionar volumenes","text":"<pre><code>$docker volume create &lt;nombre&gt; #Crea un volumen con cierto nombre\n\n$docker volume inspect &lt;nombre&gt; #Muestra informaci\u00f3n del volumen\n\n$docker volume ls #Lista todos los volumenes\n</code></pre>"},{"location":"Ud2/Ch2_BO/#comandos-para-gestionar-la-limpieza-en-docker","title":"\ud83d\udec0 Comandos para gestionar la limpieza en docker","text":"<pre><code>$docker rmi &lt;imagen&gt; #Borra una im\u00e1gen descargada\n\n$docker rm &lt;id-contenedor&gt; #Elimina un contenedor si est\u00e1 detenido\n\n$docker volume rm &lt;nombre&gt; #Elimina un volumen\n\n$docker stop $(docker ps -q) #Detiene todos los contenedores en ejecuci\u00f3n\n\n$docker image prune #Elimina todas las im\u00e1genes no etiquetadas\n\n$docker image prune -a #Elimina todas las im\u00e1genes, incluyendo las etiquetadas\n\n$docker container prune #Elimina todos los contenedores detenidos\n\n$docker volume prune #Elimina todos los volumenes sin utilizar no asociados a un contenedor\n\n$docker network prune #Elimina todas las redes sin utilizar no asociadas a un contenedor\n\n$docker system prune -a #Elimina TODO a la vez\n</code></pre>"},{"location":"Ud2/Ch2_BO/#docker-compose-y-dockerfile","title":"\ud83d\udcd0 Docker Compose y Dockerfile","text":"<pre><code>$docker build -t nombre:tag . #Contruye una im\u00e1gen d\u00e1ndole un nombre a partir de un Dockerfile\n\n$docker-compose ps #Lista los contenedores en ejecuci\u00f3n por compose\n\n$docker-compose ps -a #Lista todos contenedores de compose\n\n$docker-compose up #Inicia el docker compose en primer plano\n\n$docker-compose up -d #Inicia el docker compose en segundo plano\n\n$docker-compose stop #Detiene el docker compose\n\n$docker-compose down #Detiene y elimina los contenedores, redes y volumenes definidos en el yml\n\n$docker-compose down -v #Hace lo mismo que el anterior pero tambi\u00e9n elimina los volumenes asociados a los contenedores\n</code></pre>"},{"location":"Ud2/Ch2_BO/#copias-de-seguridad","title":"\ud83d\udcbe Copias de seguridad","text":"<pre><code>$docker save -o backup.tar &lt;imagen:tag&gt; #Guarda una copia de una im\u00e1gen en formato .tar\n\n$docker load -i backup.tar #Carga la copia a partir de un archivo tar\n\n$docker commit -a \"nombre\" -m \"descripci\u00f3n\" &lt;id-contenedor&gt; &lt;user/imagen:tag&gt; #Permite crear una nueva im\u00e1gen a partir de un contenedor\n</code></pre>"},{"location":"Ud2/Ch2_DGD/","title":"Cheatsheet 2 Docker Darius Gabriel Dobre","text":"<p>Administrar DOCKER sin privilegios</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre>"},{"location":"Ud2/Ch2_DGD/#comandos-para-imagenes","title":"\ud83c\udf9e\ufe0f Comandos para im\u00e1genes","text":"Comando Descripci\u00f3n <code>docker images</code> Ver im\u00e1genes locales. <code>docker pull &lt;imagen&gt;</code> Descargar imagen desde Docker Hub. <code>docker push &lt;nombre_imagen&gt;</code> Subir imagen a Docker Hub. <code>docker build -t &lt;nombre_imagen&gt; &lt;ruta_dockerfile&gt;</code> Construir imagen a partir de Dockerfile. <code>docker rmi &lt;nombre_imagen&gt;</code> Borrar imagen. <code>docker history &lt;nombre_imagen&gt;</code> Ver historial de la imagen. <code>docker inspect &lt;nombre_imagen&gt;</code> Ver detalle de la imagen."},{"location":"Ud2/Ch2_DGD/#ejemplos-para-imagenes","title":"Ejemplos para im\u00e1genes","text":"<ul> <li>Borrar todas las im\u00e1genes:</li> </ul> <p>```bash docker rmi $(docker images -q) <pre><code>- Crear imagen a partir de contenedor\n\n ```bash\ndocker commit servernginx nginx\n</code></pre></p> <ul> <li>Exportar imagen</li> </ul> <p>```bash docker save -o copiaseguridad.tar darius/ubuntunano <pre><code>- Importar imagen\n\n```bash\ndocker load -i copiaseguridad.tar\n</code></pre></p>"},{"location":"Ud2/Ch2_DGD/#comandos-para-contenedores","title":"\ud83d\udea2 Comandos para contenedores","text":"Comando Descripci\u00f3n <code>docker ps</code> Mostrar contenedores en ejecuci\u00f3n. <code>docker start &lt;nombre_contenedor&gt;</code> Iniciar contenedor. <code>docker stop &lt;nombre_contenedor&gt;</code> Detener contenedor en ejecuci\u00f3n. <code>docker rm &lt;nombre_contenedor&gt;</code> Borrar contenedor. <code>docker inspect &lt;nombre_contenedor&gt;</code> Ver detalles del contenedor. <code>docker run</code> Crear y ejecutar un contenedor. <code>docker container prune</code> Eliminar contenedores detenidos"},{"location":"Ud2/Ch2_DGD/#ejemplos-para-contenedores","title":"Ejemplos para contenedores","text":"<ul> <li>Crear un contenedor interactivo:</li> </ul> <pre><code>docker run -it ubuntu bash\n</code></pre> <ul> <li>Contenedor en segundo plano:</li> </ul> <pre><code>docker run -d nginx\n</code></pre> <ul> <li>Ejecutar comandos en contenedor en ejecucion:</li> </ul> <pre><code>docker exec -it ubuntu bash\n</code></pre> <ul> <li>Detener todos los contenedores en ejecucion:</li> </ul> <pre><code>docker stop $(docker ps -q)\n</code></pre>"},{"location":"Ud2/Ch2_DGD/#comandos-para-volumenes","title":"\ud83d\uddc4\ufe0f Comandos para Vol\u00famenes","text":"Comando Descripci\u00f3n <code>docker volume create &lt;nombre_volumen&gt;</code> Crear un nuevo volumen. <code>docker volume ls</code> Listar todos los vol\u00famenes. <code>docker volume inspect &lt;nombre_volumen&gt;</code> Ver detalles de un volumen espec\u00edfico. <code>docker volume rm &lt;nombre_volumen&gt;</code> Borrar un volumen. <code>docker volume prune</code> Eliminar todos los vol\u00famenes no utilizados. <code>docker run -v &lt;nombre_volumen&gt;:&lt;ruta_en_contenedor&gt; &lt;imagen&gt;</code> Montar un volumen en un contenedor."},{"location":"Ud2/Ch2_DGD/#ejemplos-para-volumenes","title":"Ejemplos para Vol\u00famenes","text":"<ul> <li>Crear un volumen:</li> </ul> <pre><code>docker volume create mi_volumen\n</code></pre> <ul> <li>Montar un volumen en un contenedor:</li> </ul> <pre><code>docker run -d -v mi_volumen:/data nginx\n</code></pre> <ul> <li>Inspeccionar un volumen:</li> </ul> <pre><code>docker volume inspect mi_volumen\n</code></pre> <ul> <li>Borrar un volumen:</li> </ul> <pre><code>docker volume rm mi_volumen\n</code></pre> <ul> <li>Eliminar todos los vol\u00famenes no utilizados:</li> </ul> <pre><code>docker volume prune\n</code></pre>"},{"location":"Ud2/Ch2_DGD/#otras-opciones","title":"\u2699\ufe0f Otras opciones","text":"Comando Descripci\u00f3n <code>docker network</code> Comandos para administrar redes de contenedores. <code>docker system prune</code> Elimina recursos no utilizados de Docker. <code>docker-compose up -d</code> Arrancar aplicacion con Compose. <code>docker-compose down</code> Detener y eliminar contenedores. <code>docker-compose stop</code> Detener contenedores. <code>docker-compose down -v</code> Borra tambien vol\u00famenes."},{"location":"Ud2/Ch2_DMP/","title":"\ud83d\udcdd UD2 - Docker Cheatsheet","text":"<p>David Maratrat Pons</p>"},{"location":"Ud2/Ch2_DMP/#instalacion-de-docker","title":"\ud83d\udc33 Instalaci\u00f3n de Docker","text":"Comando Descripci\u00f3n \ud83d\udc27 Linux <code>sudo apt-get remove docker docker-engine docker.io containerd runc</code> Elimina las versiones antiguas de docker para que no interfieran <code>sudo apt-get update</code> Actualiza el \u00edndice de paquetes <code>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code> Instala paquetes necesarios para poder usar repositorios con HTTPS <code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\| sudo apt-key add -</code> Descarga la clave GPG de Docker CE y la a\u00f1adimos <code>sudo apt-key fingerprint 0EBFCD88</code> Comprueba que se ha a\u00f1adido la clave <code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"</code> A\u00f1ades el repositorio de docker a nuestros repositorios <code>sudo apt-get update</code> Actualiza repositorios <code>sudo apt-get install docker-ce docker-ce-cli containerd.io</code> Instala Docker <code>sudo usermod -aG docker $USER</code> A\u00f1ade el usuario actual al grupo docker para no usar sudo \ud83e\ude9f  Windows &amp; \ud83c\udf4f MacOS https://docs.docker.com/get-started/get-docker/ URL de descarga de Docker"},{"location":"Ud2/Ch2_DMP/#comandos-basicos","title":"\ud83d\udcc1 Comandos b\u00e1sicos","text":"Comando Descripci\u00f3n <code>docker version</code> Permite ver la versi\u00f3n de docker instalada <code>docker ps</code> Muestra una lista de los contenedores en ejecuci\u00f3n <code>docker ps -a</code> Muestra una lista de todos los contenedores dentro del sistema"},{"location":"Ud2/Ch2_DMP/#contenedores","title":"\ud83d\udce6 Contenedores","text":"Comando Descripci\u00f3n <code>docker run &lt;imagen&gt;</code> Crea y arranca un contenedor desde una imagen <code>docker run -it &lt;imagen&gt;</code> Crea y arranca un contenedor desde una imagen con una consola interactiva <code>docker start &lt;id&gt;</code> Arranca un contenedor ya creado <code>docker stop &lt;id&gt;</code> Para un contenedor en ejecuci\u00f3n <code>docker restart &lt;id&gt;</code> Reinicia un contenedor en ejecuci\u00f3n <code>docker inspect &lt;id&gt;</code> Muestra informaci\u00f3n del contenedor <code>docker exec &lt;id&gt;</code> Permite ejecutar un comando dentro de un contenedor en ejecuci\u00f3n <code>docker cp &lt;path&gt; &lt;path&gt;</code> Permite copiar ficheros/directorios de la m\u00e1quina anfitri\u00f3n al contenedor y viceversa <code>docker attach</code> Conecta la consola al proceso en ejecuci\u00f3n de un contenedor <code>docker logs &lt;id&gt;</code> Muestra los registros de salida de un contenedor <code>docker rename &lt;id&gt; &lt;nuevo_nombre&gt;</code> Permite cambiar el nombre asociado a un contenedor <code>docker rm &lt;id&gt;</code> Elimina un contenedor detenido"},{"location":"Ud2/Ch2_DMP/#imagenes","title":"\ud83d\uddbc\ufe0f Im\u00e1genes","text":"Comando Descripci\u00f3n <code>docker pull &lt;imagen&gt;</code> Descarga una imagen desde Docker Hub <code>docker build -t &lt;nombre&gt;</code> Construye una imagen a partir de un Dockerfile <code>docker history &lt;imagen&gt;</code> Muestra el historial de una imagen <code>docker images</code> Muestra todas las im\u00e1genes locales <code>docker rmi &lt;imagen&gt;</code> Elimina una imagen local <code>docker tag &lt;imagen&gt; &lt;nombre:etiqueta&gt;</code> Etiqueta una imagen para que sea m\u00e1s f\u00e1cil de identificar <code>docker save -o &lt;archivo&gt; &lt;imagen&gt;</code> Guarda una imagen como un archivo tar <code>docker load -i &lt;archivo&gt;</code> Carga una imagen desde un archivo tar"},{"location":"Ud2/Ch2_DMP/#volumenes","title":"\ud83d\udce6 Vol\u00famenes","text":"Comando Descripci\u00f3n <code>docker volume create &lt;name&gt;</code> Crea un volumen <code>docker volume ls</code> Lista todos los vol\u00famenes disponibles <code>docker volume inspect &lt;name&gt;</code> Muestra informaci\u00f3n detallada de un volumen <code>docker volume rm &lt;name&gt;</code> Elimina un volumen <code>docker volume prune</code> Elimina todos los vol\u00famenes que no estan en uso por ning\u00fan contenedor <code>docker run -v &lt;volumen&gt;:&lt;path&gt;</code> Monta un volumen en un contenedor durante su ejecuci\u00f3n"},{"location":"Ud2/Ch2_DMP/#compose","title":"\ud83d\udcdc Compose","text":"Comando Descripci\u00f3n <code>docker-compose up</code> Arranca todos los servicios definidos en el archivo <code>docker-compose.yml</code> <code>docker-compose down</code> Detiene y elimina los contenedores de <code>docker-compose.yml</code> <code>docker-compose build</code> Construye o reconstruye los servicios <code>docker-compose logs</code> Muestra los registros de salida de los servicios <code>docker-compose ps</code> Lista los contenedores administrados por Compose <code>docker-compose exec &lt;service&gt; &lt;command&gt;</code> Ejecuta un comando en un servicio en ejecuci\u00f3n"},{"location":"Ud2/Ch2_DMP/#docker-hub","title":"\ud83c\udf10 Docker HUB","text":"Comando Descripci\u00f3n <code>docker pull &lt;imagen&gt;</code> Descarga una imagen desde Docker Hub <code>docker push &lt;imagen&gt;</code> Sube una imagen local a Docker Hub <code>docker search &lt;filtro&gt;</code> Busca im\u00e1genes en Docker Hub utilizando un filtro <code>docker login</code> Inicia sesi\u00f3n en Docker Hub para poder subir im\u00e1genes <code>docker logout</code> Cierra sesi\u00f3n en Docker Hub"},{"location":"Ud2/Ch2_DMP/#otros","title":"\ud83d\udd27 Otros","text":"Comando Descripci\u00f3n <code>sudo systemctl enable/start/stop/disable/restart docker.service</code> Permite habilitar/iniciar/parar/deshabilitar/reiniciar el servicio de docker <code>sudo systemctl enable/start/stop/disable/restart container.service</code> Permite habilitar/iniciar/parar/deshabilitar/reiniciar el servicio de container <code>docker network ls</code> Lista las redes creadas en Docker <code>docker network create &lt;name&gt;</code> Crea una red entre contenedores <code>docker stats</code> Muestra los recursos en tiempo real de los contenedores en ejecuci\u00f3n <code>docker system prune</code> Limpia contenedores, redes y vol\u00famenes no utilizados"},{"location":"Ud2/Ch2_DMP/#desinstalacion-de-docker-linux","title":"\u274c Desinstalaci\u00f3n de Docker (Linux)","text":"Comando Descripci\u00f3n <code>sudo apt-get purge docker-ce docker-ce-cli containerd.io</code> Elimina docker del sistema <code>sudo rm -rf /var/lib/docker</code> Borra el directorio de Docker"},{"location":"Ud2/Ch2_MIP/","title":"Docker Cheatsheet","text":""},{"location":"Ud2/Ch2_MIP/#instalacion-y-configuracion-basica","title":"Instalaci\u00f3n y Configuraci\u00f3n B\u00e1sica","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\nsudo docker version\nsudo usermod -aG docker $USER\nsudo apt install docker-compose\n</code></pre>"},{"location":"Ud2/Ch2_MIP/#comandos-basicos-de-docker","title":"Comandos B\u00e1sicos de Docker","text":"Comando Descripci\u00f3n <code>docker run -it --name=ubuntu_pruebas ubuntu /bin/bash</code> Crea y accede a un contenedor interactivo. <code>docker exec -d ubuntu_pruebas touch /tmp/prueba</code> Ejecuta un comando en un contenedor existente. <code>docker exec -it ubuntu_pruebas bash</code> Accede a un contenedor en ejecuci\u00f3n. <code>docker exec -it -e VAR=1 ubuntu_pruebas bash</code> Ejecuta en contenedor con variable de entorno."},{"location":"Ud2/Ch2_MIP/#logs-y-visualizacion","title":"Logs y Visualizaci\u00f3n","text":"Comando Descripci\u00f3n <code>docker run -d --name=muchotexto busybox sh -c \"while true; do $(echo date) ; sleep 1; done\"</code> Ejecuta comando en bucle dentro del contenedor. <code>docker attach muchotexto</code> Adjunta a un contenedor en ejecuci\u00f3n. <code>docker logs -f --until=2s muchotexto</code> Visualiza logs recientes del contenedor."},{"location":"Ud2/Ch2_MIP/#manejo-de-volumenes","title":"Manejo de Vol\u00famenes","text":"Comando Descripci\u00f3n <code>docker volume create wordpress-db</code> Crea un volumen Docker. <code>docker volume ls</code> Lista vol\u00famenes existentes. <code>docker volume inspect wordpress-db</code> Inspecciona un volumen espec\u00edfico. <code>docker volume rm wordpress-db</code> Elimina un volumen. <code>docker run -d -it --name appcontainer -v /home/sergi/target:/app nginx:latest</code> Crea contenedor con volumen \u201cbinding mount\u201d. <code>docker run -d -it --name appcontainer -v micontenedor:/app nginx:latest</code> Crea contenedor con volumen Docker. <code>docker run -d -it --tmpfs /app nginx</code> Crea un contenedor con volumen tmpfs. <code>docker run --rm --volumes-from contenedor1 -v /home/sergi/backup:/backup ubuntu bash -c \"cd /datos &amp;&amp; tar cvf /backup/copiaseguridad.tar .\"</code> Backup de vol\u00famenes."},{"location":"Ud2/Ch2_MIP/#docker-compose-para-wordpress","title":"Docker Compose para WordPress","text":"<ol> <li> <p>Crear el directorio de trabajo:    <pre><code>mkdir -p ~/Sites/wordpress/target &amp;&amp; cd ~/Sites/wordpress\n</code></pre></p> </li> <li> <p>Crear <code>docker-compose.yaml</code> en <code>~/Sites/wordpress</code>:    <pre><code>version: '3'\nservices:\n  db:\n    image: mariadb:10.3.9\n    volumes:\n      - data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=manager\n      - MYSQL_PASSWORD=secret\n  web:\n    image: wordpress:4.9.8\n    depends_on:\n      - db\n    volumes:\n      - ./target:/var/www/html\n    environment:\n      - WORDPRESS_DB_USER=manager\n      - WORDPRESS_DB_PASSWORD=secret\n      - WORDPRESS_DB_HOST=db\n    ports:\n      - 8080:80\nvolumes:\n  data:\n</code></pre></p> </li> <li> <p>Comandos b\u00e1sicos de Docker Compose:    <pre><code>docker-compose up -d\ndocker-compose ps\ndocker-compose stop\ndocker-compose down\ndocker-compose down -v\n</code></pre></p> </li> </ol>"},{"location":"Ud2/Ch2_MIP/#docker-compose-para-portainer","title":"Docker Compose para Portainer","text":"<ol> <li> <p>Crear el directorio de trabajo:    <pre><code>mkdir -p ~/Sites/portainer &amp;&amp; cd ~/Sites/portainer\n</code></pre></p> </li> <li> <p>Crear <code>docker-compose.yaml</code> en <code>~/Sites/portainer</code>:    <pre><code>version: '2'\nservices:\n  portainer:\n    image: portainer/portainer\n    command: -H unix:///var/run/docker.sock\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    ports:\n      - 9000:9000\nvolumes:\n  portainer_data:\n</code></pre></p> </li> <li> <p>Iniciar Portainer:    <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"Ud2/Ch2_MIP/#limpieza-del-sistema","title":"Limpieza del Sistema","text":"Comando Descripci\u00f3n <code>docker system prune</code> Elimina contenedores, vol\u00famenes y redes no utilizados. <code>docker volume rm $(docker volume ls -q -f \"dangling=true\")</code> Elimina vol\u00famenes no utilizados. <code>docker rm $(docker ps -q -f \"status=exited\")</code> Elimina contenedores detenidos. <code>docker rmi $(docker images -q -f \"dangling=true\")</code> Elimina im\u00e1genes no etiquetadas."},{"location":"Ud2/Ch2_MIP/#backup-y-restauracion-de-volumenes","title":"Backup y Restauraci\u00f3n de Vol\u00famenes","text":"Comando Descripci\u00f3n <code>docker run --rm -v /tmp:/backup --volumes-from &lt;container-name&gt; busybox tar -cvf /backup/backup.tar &lt;path-to-data&gt;</code> Backup de datos en contenedor. <code>docker run --rm -v /tmp:/backup --volumes-from &lt;container-name&gt; busybox tar -xvf /backup/backup.tar &lt;path-to-data&gt;</code> Restaurar datos en contenedor."},{"location":"Ud2/Ch2_MIP/#docker-compose-para-wordpress_1","title":"Docker Compose para WordPress","text":"<ol> <li> <p>Crear el directorio de trabajo:    <pre><code>mkdir -p ~/Sites/wordpress/target &amp;&amp; cd ~/Sites/wordpress\n</code></pre></p> </li> <li> <p>Crear <code>docker-compose.yaml</code> en <code>~/Sites/wordpress</code>:    <pre><code>version: '3'\nservices:\n  db:\n    image: mariadb:10.3.9\n    volumes:\n      - data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=manager\n      - MYSQL_PASSWORD=secret\n  web:\n    image: wordpress:4.9.8\n    depends_on:\n      - db\n    volumes:\n      - ./target:/var/www/html\n    environment:\n      - WORDPRESS_DB_USER=manager\n      - WORDPRESS_DB_PASSWORD=secret\n      - WORDPRESS_DB_HOST=db\n    ports:\n      - 8080:80\nvolumes:\n  data:\n</code></pre></p> </li> <li> <p>Comandos b\u00e1sicos de Docker Compose:    <pre><code>docker-compose up -d\ndocker-compose ps\ndocker-compose stop\ndocker-compose down\ndocker-compose down -v\n</code></pre></p> </li> </ol>"},{"location":"Ud2/Ch2_MIP/#docker-compose-para-portainer_1","title":"Docker Compose para Portainer","text":"<ol> <li> <p>Crear el directorio de trabajo:    <pre><code>mkdir -p ~/Sites/portainer &amp;&amp; cd ~/Sites/portainer\n</code></pre></p> </li> <li> <p>Crear <code>docker-compose.yaml</code> en <code>~/Sites/portainer</code>:    <pre><code>version: '2'\nservices:\n  portainer:\n    image: portainer/portainer\n    command: -H unix:///var/run/docker.sock\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    ports:\n      - 9000:9000\nvolumes:\n  portainer_data:\n</code></pre></p> </li> <li> <p>Iniciar Portainer:    <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"Ud2/Ch2_MIP/#limpieza-del-sistema_1","title":"Limpieza del Sistema","text":"Comando Descripci\u00f3n <code>docker system prune</code> Elimina contenedores, vol\u00famenes y redes no utilizados. <code>docker volume rm $(docker volume ls -q -f \"dangling=true\")</code> Elimina vol\u00famenes no utilizados. <code>docker rm $(docker ps -q -f \"status=exited\")</code> Elimina contenedores detenidos. <code>docker rmi $(docker images -q -f \"dangling=true\")</code> Elimina im\u00e1genes no etiquetadas."},{"location":"Ud2/Ch2_MIP/#backup-y-restauracion-de-volumenes_1","title":"Backup y Restauraci\u00f3n de Vol\u00famenes","text":"Comando Descripci\u00f3n <code>docker run --rm -v /tmp:/backup --volumes-from &lt;container-name&gt; busybox tar -cvf /backup/backup.tar &lt;path-to-data&gt;</code> Backup de datos en contenedor. <code>docker run --rm -v /tmp:/backup --volumes-from &lt;container-name&gt; busybox tar -xvf /backup/backup.tar &lt;path-to-data&gt;</code> Restaurar datos en contenedor."},{"location":"Ud2/Ch2_MMC/","title":"CheatSheet Docker MMC","text":"<p>Tipo: Apuntes Estado: No empezado Tema: Despliegue</p>"},{"location":"Ud2/Ch2_MMC/#post-instalacion","title":"Post Instalaci\u00f3n \u2699\ufe0f","text":"sudo usermod -aG docker $USER A\u00f1ade tu usuario al grupo de docker. sudo apt install docker-compose Instalaci\u00f3n de Docker Compose"},{"location":"Ud2/Ch2_MMC/#comandos-basicos","title":"Comandos B\u00e1sicos \ud83d\udddd\ufe0f","text":"docker run  Crea y arranca un controlador docker ps Listado de contenedores en ejecuci\u00f3n docker ps -a Listado de todos los contenedores docker start  Inicia un contenedor docker stop  Detiene de manera ordenada un contenedor docker restart  Reinicia un contenedor docker rename contenedor1 contenedor2 Cambiar el nombre asociado a un contenedor. docker rm  Elimina un contenedor (solo se puede borrar si est\u00e1 parado) docker rm $(docker ps -a -q) Elimina todos los contenedores"},{"location":"Ud2/Ch2_MMC/#consultar-informacion","title":"Consultar informaci\u00f3n \ud83d\udd0d","text":"docker inspect  Proporciona diversos detalles de la configuraci\u00f3n de un contenedor docker logs  [OPCIONES]  Consultar la informaci\u00f3n de la salida est\u00e1ndar y de error"},{"location":"Ud2/Ch2_MMC/#movimientos-en-contenedores","title":"Movimientos en contenedores \ud83e\udea9","text":"docker exec  [OPCIONES]  COMANDO [ARGUMENTOS] Permite ejecutar un comando dentro de un contenedor docker cp idcontainer:/tmp/prueba ./ Permite copiar ficheros y directorios del anfitriona un contenedor o viceversa. docker attach  [OPCIONES]  Enlazar la entrada o salida est\u00e1ndar del terminal a un contenedor"},{"location":"Ud2/Ch2_MMC/#trato-de-imagenes","title":"Trato de im\u00e1genes \ud83d\udcfa","text":"docker images Listado de im\u00e1genes almacenadas docker search  Obtener informaci\u00f3n de im\u00e1genes descargables docker pull  Obtener im\u00e1genes sin ponerlo en un contenedor docker history  Hist\u00f3rico de una imagen descargada docker rmi  Elimina la imagen localmente docker rmi $(docker images -q) Elimina todas las im\u00e1genes locales docker system prune -a Elimina todas las im\u00e1genes y contenedores docker commit -a \"autor\" -m \"comentario\"  usuario/imagen:[version] Crear una propia imagen docker tag  usuario/imagen:[version] A\u00f1adir una etiqueta a una imagen docker save -o copiaSeguridad.tar sergi/ubuntumod Copia de seguridad, exportar docker load -i copiaSeguridad.tar Importar una imagen exportada previamente docker import http://ejemplo.com/mi-imagen.tar Crea una nueva imagen a partir del enlace"},{"location":"Ud2/Ch2_MMC/#dockerhub","title":"DockerHub \ud83d\udc33","text":"docker login Loguearnos al repositorio remoto docker push Subir im\u00e1genes al repositorio remoto"},{"location":"Ud2/Ch2_MMC/#dockerfile","title":"DockerFile \ud83d\udcc4","text":"docker build -t ubuntunano ./ Crea una imagen a partir de un DockerFile"},{"location":"Ud2/Ch2_MMC/#comandos-dentro-del-dockerfile","title":"Comandos dentro del DockerFile \ud83d\udcdd","text":"FROM ubuntu:latest Define la imagen base desde la cual construir la imagen RUN apt update Ejecuta el comando escrito CMD /bin/bash Define un comando predeterminado que se ejecutar\u00e1 cuando el contenedor inicie EXPOSE 80 443 8080 Expone los puertos determinados ADD ./mifichero.zip /var/www/html Copia el archivo y lo descomprime si es un archivo comprimido. COPY ./mifichero.zip /var/www/html Copia el archivo pero sin descomprimirlo ENTRYPOINT [\"cat\"] Define el comando que siempre se ejecutar\u00e1 al iniciar el contenedor USER sergi Establece un usuario como el usuario predeterminado WORKDIR /root Define el directorio de trabajo predeterminado ENV v1=\u201dvalor1\u201d v2=\u201dvalor2\u201d Define variables de entorno con sus variables ARG version=1.0 <p>| Define variables de construcci\u00f3n | | VOLUME /data | Crea un volumen donde se almacenan datos persistentes | | LABEL maintainer=\"tu_email@example.com\" | A\u00f1ade metadatos a la imagen | | HEALTHCHECK CMD curl --fail http://localhost || exit 1 | Define un comando para verificar la salud del contenedor |</p>"},{"location":"Ud2/Ch2_MMC/#volumen","title":"Volumen \ud83d\udd0a","text":"docker volume create  Crear volumen docker volume ls Listar vol\u00famenes docker volume inspect  Ver metadatos del volumen docker volume rm  Borrar volumen docker run -d --name wordpress-db \\ --mount source=vol-wordpress-db,target=/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=wordpress \\ -e MYSQL_USER=manager \\ -e MYSQL_PASSWORD=secret \\ mariadb:10.3.9 Ejemplo de crear un contenedor con un volumen espec\u00edfico"},{"location":"Ud2/Ch2_MMC/#docker-compose","title":"Docker Compose \ud83d\udcda","text":"docker-compose up -d Iniciar los servicios definidos en un archivo docker-compose.yml en segundo plano docker-compose ps Listar los contenedores docker-compose stop Detener servicios docker-compose down Borrar servicios pero no vol\u00famenes docker-compose down -v Borrar tanto contenedores como vol\u00famenes"},{"location":"Ud2/Ch2_RPE/","title":"Cheatsheet Contenedores Docker \ud83d\udc0b","text":""},{"location":"Ud2/Ch2_RPE/#1-instalacion","title":"1. Instalaci\u00f3n \ud83d\udd27","text":""},{"location":"Ud2/Ch2_RPE/#instalacion-en-linux","title":"Instalaci\u00f3n en Linux","text":"\ud83d\udee0\ufe0f Paso \ud83d\udcdc Comando \ud83d\udce5 Incluir el repositorio <code>sudo apt update</code> \u27a1\ufe0f Instalar dependencias <code>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code> \ud83d\udd11 Descargar clave GPG e incluirla <code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg / sudo apt-key add -</code> \u2795 A\u00f1adir el repositorio <code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"</code> \ud83d\udc0b Instalar Docker Engine CE <code>sudo apt-get install docker-ce docker-ce-cli containerd.io</code> \ud83d\udc0b Instalar Docker Compose <code>sudo apt install docker-compose</code> \ud83d\udc64 Uso sin privilegios <code>sudo usermod -aG docker $USER</code> \ud83d\uddd1\ufe0f Desinstalar Docker <code>sudo apt-get purge docker-ce docker-ce-cli containerd.io</code>"},{"location":"Ud2/Ch2_RPE/#2-imagenes","title":"2. Im\u00e1genes \ud83d\uddbc\ufe0f","text":"Acci\u00f3n Comando \ud83d\udcdc Listar im\u00e1genes <code>docker images</code> \ud83d\udce5 Descargar imagen <code>docker pull &lt;nombre_imagen&gt;</code> \ud83d\uddd1\ufe0f Eliminar imagen <code>docker rmi &lt;nombre_imagen&gt;</code> \ud83c\udfd7\ufe0f Crear imagen <code>docker build -t &lt;nombre_imagen&gt;:&lt;tag&gt; &lt;directorio_dockerfile&gt;</code>"},{"location":"Ud2/Ch2_RPE/#3-contenedores","title":"3. Contenedores \ud83d\udce6","text":"Acci\u00f3n Comando \u25b6\ufe0f Ejecutar contenedor nuevo <code>docker run &lt;nombre_imagen&gt;</code> \u25b6\ufe0f Ejecutar en segundo plano <code>docker run -d &lt;nombre_imagen&gt;</code> \ud83d\udda5\ufe0f Modo interactivo <code>docker run -it &lt;nombre_imagen&gt;</code> \ud83d\udd0c Asignar puerto <code>docker run -p &lt;puerto_local&gt;:&lt;puerto_contenedor&gt; &lt;nombre_imagen&gt;</code> \ud83d\udcdc Listar contenedores activos <code>docker ps</code> \ud83d\udcdc Listar todos los contenedores <code>docker ps -a</code> \ud83d\udd75\ufe0f Inspeccionar contenedor <code>docker inspect &lt;id_contenedor&gt;</code> \ud83d\udcdd Mostrar logs <code>docker logs &lt;id_contenedor&gt;</code> \ud83d\udd04 Iniciar contenedor detenido <code>docker start &lt;nombre_contenedor&gt;</code> \u23f9\ufe0f Detener contenedor <code>docker stop &lt;nombre_contenedor&gt;</code> \ud83d\uddd1\ufe0f Eliminar contenedor <code>docker rm &lt;id_contenedor&gt;</code> \u2328\ufe0f Ejecutar comando en contenedor <code>docker exec -it &lt;nombre_contenedor&gt; &lt;comando&gt;</code> \ud83d\udd04 Reiniciar contenedor <code>docker restart &lt;nombre_contenedor&gt;</code>"},{"location":"Ud2/Ch2_RPE/#4-volumenes","title":"4. Vol\u00famenes \ud83d\udcc2","text":"Acci\u00f3n Comando \u2795 Crear volumen <code>docker volume create &lt;nombre_volumen&gt;</code> \ud83d\udcc2 Montar volumen <code>docker run -v &lt;nombre_volumen&gt;:&lt;directorio_contenedor&gt; &lt;nombre_imagen&gt;</code> \ud83d\udcdc Listar vol\u00famenes <code>docker volume ls</code> \ud83d\udd0d Inspeccionar volumen <code>docker volume inspect &lt;nombre_volumen&gt;</code> \ud83d\uddd1\ufe0f Eliminar volumen <code>docker volume rm &lt;nombre_volumen&gt;</code>"},{"location":"Ud2/Ch2_RPE/#5-redes-en-docker","title":"5. Redes en Docker \ud83c\udf10","text":"Acci\u00f3n Comando \ud83d\udcdc Listar redes <code>docker network ls</code> \u2795 Crear red <code>docker network create &lt;nombre_red&gt;</code> \ud83d\uddd1\ufe0f Eliminar red <code>docker network rm &lt;nombre_red&gt;</code> \ud83d\udd0c Conectar contenedor a red <code>docker run --network &lt;nombre_red&gt; &lt;nombre_imagen&gt;</code>"},{"location":"Ud2/Ch2_RPE/#6-docker-compose","title":"6. Docker Compose \ud83d\udccb","text":"Acci\u00f3n Comando \u25b6\ufe0f Iniciar servicios <code>docker-compose up</code> \u25b6\ufe0f Iniciar en segundo plano <code>docker-compose up -d</code> \ud83d\udd04 Reconstruir y reiniciar servicios <code>docker-compose up --build</code> \u23f9\ufe0f Detener servicios <code>docker-compose stop</code> \ud83d\uddd1\ufe0f Eliminar servicios <code>docker-compose down</code> \ud83d\uddd1\ufe0f Eliminar servicios y vol\u00famenes <code>docker-compose down -v</code> \ud83d\udcdc Ver logs de servicios <code>docker-compose logs</code>"},{"location":"Ud2/Ch2_RPE/#7-limpieza","title":"7. Limpieza \ud83e\uddf9","text":"Acci\u00f3n Comando \ud83d\uddd1\ufe0f Eliminar objetos sin uso <code>docker system prune</code> \ud83d\uddd1\ufe0f Eliminar contenedores parados <code>docker container prune</code> \ud83d\uddd1\ufe0f Eliminar im\u00e1genes no usadas <code>docker image prune</code> \ud83d\uddd1\ufe0f Eliminar vol\u00famenes no usados <code>docker volume prune</code>"},{"location":"Ud2/Ch2_RSN/","title":"CHEATSHEET COMANDOS DOCKER","text":""},{"location":"Ud2/Ch2_RSN/#instalacion","title":"Instalaci\u00f3n","text":"<ul> <li>sudo docker version -&gt; Se utiliza para comprobar la versi\u00f3n de docker y verificar su instalaci\u00f3n.</li> <li>sudo usermod -aG $USER -&gt; Permite utilizar docker sin la necesidad de sudo.</li> <li>sudo apt install docker-compose -&gt; Instala la versi\u00f3n compose de docker.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#principales-acciones-de-docker","title":"Principales acciones de Docker","text":""},{"location":"Ud2/Ch2_RSN/#docker-run","title":"Docker run","text":"<ul> <li>docker run -it --name=cont1 ubuntu /bin/bash -&gt; Crea un contenedor con la imagen Ubuntu, le establece el nombre cont1 y lo lanza en modo terminal.</li> <li>docker run -d -p 1200:80 nginx -&gt; Crea una imagen de nginx y lo lanza aen \"background\", exponiendo el puerto 80 del contenedor en el puerto 1200 del anfitri\u00f3n.</li> <li>docker run -it -e MENSAJE=HOLA ubuntu:14.04 bash -&gt; Crea la imagen Ubuntu con la versi\u00f3n 14.04 y establece la variable de entorno como \"MENSAJE\".</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-ps","title":"Docker ps","text":"<ul> <li>docker ps -&gt; Muestra la informaci\u00f3n de los contenedores en ejecuci\u00f3n.</li> <li>docker ps -a -&gt; Muestra la informaci\u00f3n de todos los contenedores, los parados y en ejecuci\u00f3n.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-startstoprestart","title":"Docker Start/Stop/Restart","text":"<ul> <li>docker start \"id\" -&gt; Arranca el contenedor</li> <li>docker start -ai \"id\" -&gt; Arranca el contenedor, ejecutando el arranque a la entrada y salida est\u00e1ndar de la terminal.</li> <li>docker stop \"id\" -&gt; Se utiliza para detener un contenedor en ejecuci\u00f3n.</li> <li>docker restart \"id\" -&gt; Reinicia el contenedor que se encuentra en ejecuci\u00f3n.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-exec","title":"Docker exec","text":"<ul> <li>docker exec -it -e FICHERO=prueba cont bash -&gt; Lanza en el contenedor \u201ccont\u201d (que debe estar arrancado) el comando \u201cbash\u201d, estableciendo la variable de entorno  \u201cFICHERO\u201d y enlazando la ejecuci\u00f3n de forma interactiva a la entrada y salida est\u00e1ndar del anfitri\u00f3n.</li> <li>docker exec -d cont touch /tmp/prueba -&gt; Lanza en el contenedor \u201ccont\u201d (que debe estar arrancado) el comando \u201ctouch /tmp/prueba\u201d. Este comando se ejecuta en segundo plano, generando el fichero \u201c/tmp/prueba\u201d.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-attach","title":"Docker attach","text":"<ul> <li>docker attach idcontainer -&gt; Enlaza nuestra terminal la entrada/salida de nuestra al proceso en segundo plano del contenedor \u201cidcontainer\u201d.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-logs","title":"Docker logs","text":"<ul> <li>docker logs -n 10 idcontainer -&gt; Muestra las 10 \u00faltimas l\u00edneas de la salida estandar producida por el proceso en ejecuci\u00f3n en el contendor.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-cp","title":"Docker cp","text":"<ul> <li>docker cp idcontainer:/tmp/prueba ./ -&gt; Copia el fichero \u201c/tmp/prueba\u201d del contenedor \u201cidcontainer\u201d al directorio actual del anfitri\u00f3n.</li> <li>docker cp ./miFichero idcontainer:/tmp -&gt; Copia el fichero \u201cmiFichero\u201d del directorio actual del anfitri\u00f3n a la carpeta \u201c/tmp\u201d del contenedor.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#imagenes-docker","title":"Im\u00e1genes Docker","text":""},{"location":"Ud2/Ch2_RSN/#gestion-de-imagenes","title":"Gesti\u00f3n de im\u00e1genes","text":"<ul> <li>docker images -&gt; Informaci\u00f3n de las im\u00e1genes locales disponibles</li> <li>docker search ubuntu -&gt; Busca la imagen \u201cubuntu\u201d en el repositorio remoto (por defecto Docker Hub).Busca la imagen \u201cubuntu\u201d en el repositorio remoto  (por defecto Docker Hub).</li> <li>docker pull alpine -&gt; Descarga localmente imagen \u201calpine\u201d.</li> <li>docker history alpine -&gt; Muestra la historia de creaci\u00f3n de la imagen \u201calpine\u201d.</li> <li>docker rmi ubuntu:14.04 -&gt; Elimina localmente la imagen \u201cubuntu\u201d con tag \u201c14.04\u201d.</li> <li>docker rmi $(docker images -q) -&gt; Borra toda imagen local que no est\u00e9 siendo usada por un contenedor.</li> <li>docker rm IDCONTENEDO -&gt;  Borra un contenedor con IDCONTENEDOR.</li> <li>docker stop $(docker ps -a -q) -&gt; Para todos los contenedores del sistema.</li> <li>docker rm $docker ps -a -q) -&gt; Borra todos los contenedores parados del sistema.</li> <li>docker system prune -a -&gt; Borra todas las im\u00e1genes y contenedores parados del sistema.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#creacion-de-imagenes-a-partir-de-contenedores","title":"Creaci\u00f3n de im\u00e1genes a partir de contenedores","text":"<ul> <li>docker commit -m \u201ccomentario\u201d IDCONTENEDOR usuario/imagen:version -&gt; Hace commit de un contenedor existente a una imagen local.</li> <li>docker save -o copiaSeguridad.tar imagenA -&gt; Guarda una copia de seguridad de una imagen en fichero \u201c.tar\u201d.</li> <li>docker load -i copiaSeguridad.tar -&gt; Restaura una copia de seguridad de una imagen en fichero \u201c.tar\u201d.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-hub","title":"Docker hub","text":"<ul> <li>docker login -&gt; Permite introducir credenciales del registro (por defecto \u201cDocker Hub\u201d).</li> <li>docker push usuario/imagen:version -&gt; Permite subir al repositorio una imagen mediante \u201cpush\u201d.</li> </ul>"},{"location":"Ud2/Ch2_RSN/#volumenes-docker","title":"Vol\u00famenes Docker","text":"<ul> <li>docker volume create wordpress-db -&gt; Crea el volumen wordpress-db</li> <li>docker volume ls -&gt; Lista todos los vol\u00famenes</li> <li>docker volume inspect wordpress-db -&gt; Visualiza el vol\u00famen especificado</li> <li>docker volume rm wordpress-db -&gt; Borra todo le vol\u00famen</li> </ul>"},{"location":"Ud2/Ch2_RSN/#docker-compose","title":"Docker Compose","text":"<ul> <li>docker-compose up -d -&gt; Arranca la aplicaci\u00f3n compose</li> <li>docker-compose stop -&gt; Detiene los servicios</li> <li>docker-compose down -&gt; Se borra el servicio</li> <li>docker-compose down -v -&gt; Se borra el servicio y el vol\u00famen</li> <li>docker-compose build/pull -&gt; Construye/descarga las im\u00e1genes de contenedores seg\u00fan la configuraci\u00f3n de \u201cdocker-compose.yml\u201d.</li> <li>docker-compose ps -&gt; Muestra informaci\u00f3n de los contenedores seg\u00fan la configuraci\u00f3n de \u201cdocker-compose.yml\u201d.</li> <li>docker-compose up -d --scale web=3 -&gt; Similar a \u201cdocker-compose up -d\u201d solo que adem\u00e1s, el servicio definido como \u201cweb\u201d en el fichero \u201cdocker-compose.yml\u201d lo escala creando 3 copias y realizando balanceo autom\u00e1tico si se realiza una petici\u00f3n al host llamado como el servicio \u201cweb\u201d.</li> </ul>"},{"location":"Ud2/Ch2_VATC/","title":"\ud83c\udf1f UD2 - Cheatsheet","text":"<p>\u270d\ufe0f Victor Alexandru Teleanu Covaci</p>"},{"location":"Ud2/Ch2_VATC/#instalacion-y-configuracion-de-docker","title":"\ud83d\ude80 Instalaci\u00f3n y Configuraci\u00f3n de Docker","text":""},{"location":"Ud2/Ch2_VATC/#instalacion-en-diferentes-sistemas-operativos","title":"\ud83d\udd27 Instalaci\u00f3n en diferentes sistemas operativos","text":"\ud83d\udcbb Sistema Operativo / \ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n \ud83d\udc27 Linux (Debian/Ubuntu) <code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code> Actualizar paquetes antes de instalar Docker <code>sudo apt install docker-ce</code> Instalar Docker Community Edition en Debian/Ubuntu \ud83e\ude9f Windows \ud83d\udd17 Instrucciones para Windows Instalaci\u00f3n de Docker Desktop para Windows \ud83c\udf4f MacOS \ud83d\udd17 Instrucciones para MacOS Instalaci\u00f3n de Docker Desktop para MacOS"},{"location":"Ud2/Ch2_VATC/#comprobacion-de-instalacion-y-prueba","title":"\ud83d\udd0d Comprobaci\u00f3n de instalaci\u00f3n y prueba","text":"<ul> <li>Con <code>sudo docker version</code> podemos verificar la instalaci\u00f3n.</li> <li>Para probar, ejecutamos <code>sudo docker run hello-world</code>. Esto ejecutar\u00e1 un contenedor a partir de la imagen \"hello-world\".</li> </ul>"},{"location":"Ud2/Ch2_VATC/#configuracion-basica-de-docker","title":"\u2699\ufe0f Configuraci\u00f3n B\u00e1sica de Docker","text":""},{"location":"Ud2/Ch2_VATC/#configurar-usuario-sin-sudo","title":"\ud83e\uddd1\u200d\ud83d\udcbb Configurar usuario sin sudo","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>sudo usermod -aG docker $USER</code> A\u00f1ade el usuario al grupo \"docker\""},{"location":"Ud2/Ch2_VATC/#configuracion-de-docker-compose","title":"\ud83e\udde9 Configuraci\u00f3n de Docker Compose","text":"<ul> <li>Con <code>sudo apt install docker-compose</code> instalamos Docker Compose en Debian/Ubuntu.</li> <li>Con <code>docker-compose --version</code> verificamos la versi\u00f3n instalada.</li> </ul>"},{"location":"Ud2/Ch2_VATC/#comandos-basicos-de-docker","title":"\ud83d\udcda Comandos B\u00e1sicos de Docker","text":""},{"location":"Ud2/Ch2_VATC/#creacion-y-gestion-de-contenedores","title":"\ud83d\ude80 Creaci\u00f3n y gesti\u00f3n de contenedores","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker run</code> Crea y arranca un contenedor <code>docker run -it --name=mi_contenedor ubuntu /bin/bash</code> Crear y acceder a un contenedor con Ubuntu <code>docker exec -it mi_contenedor bash</code> Ejecutar un comando en un contenedor en ejecuci\u00f3n <code>docker stop mi_contenedor</code> Detiene un contenedor <code>docker start mi_contenedor</code> Inicia un contenedor detenido <code>docker restart mi_contenedor</code> Reinicia un contenedor <code>docker rm mi_contenedor</code> Elimina un contenedor detenido"},{"location":"Ud2/Ch2_VATC/#gestion-de-imagenes","title":"\ud83d\udcc2 Gesti\u00f3n de Im\u00e1genes","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker images</code> Muestra todas las im\u00e1genes disponibles <code>docker rmi nombre_imagen</code> Elimina una imagen de Docker <code>docker pull nombre_imagen</code> Descarga una imagen del repositorio de Docker <code>docker build -t nombre_imagen .</code> Crea una imagen a partir de un Dockerfile <code>docker tag imagen nombre:etiqueta</code> Etiqueta una imagen para identificarla m\u00e1s f\u00e1cil ### \ud83d\udcd1 Informaci\u00f3n \ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker ps</code> Muestra los contenedores en ejecuci\u00f3n <code>docker ps -a</code> Muestra todos los contenedores, en ejecuci\u00f3n o no <code>docker inspect nombre</code> Detalla la configuraci\u00f3n del contenedor <code>docker logs nombre_contenedor</code> Muestra los logs de un contenedor en ejecuci\u00f3n"},{"location":"Ud2/Ch2_VATC/#gestion-de-volumenes","title":"\ud83d\udce6 Gesti\u00f3n de Vol\u00famenes","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker volume create nombre_volumen</code> Crea un volumen <code>docker volume ls</code> Lista todos los vol\u00famenes existentes <code>docker volume rm nombre_volumen</code> Elimina un volumen si no est\u00e1 en uso <code>docker volume inspect nombre_volumen</code> Muestra informaci\u00f3n detallada sobre un volumen <code>docker volume prune</code> Elimina todos los vol\u00famenes no utilizados"},{"location":"Ud2/Ch2_VATC/#redes-en-docker","title":"\ud83c\udf10 Redes en Docker","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker network create nombre_red</code> Crea una red personalizada <code>docker network ls</code> Lista todas las redes <code>docker network inspect nombre_red</code> Muestra detalles de la red especificada <code>docker network connect nombre_red contenedor</code> Conecta un contenedor a una red <code>docker network disconnect nombre_red contenedor</code> Desconecta un contenedor de una red"},{"location":"Ud2/Ch2_VATC/#docker-compose","title":"\ud83e\uddd1\u200d\ud83d\udcbb Docker Compose","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker-compose up -d</code> Arranca la aplicaci\u00f3n con Docker Compose <code>docker-compose down</code> Borra servicios <code>docker-compose ps</code> Muestra informaci\u00f3n de los contenedores <code>docker-compose logs -f</code> Muestra los registros <code>docker-compose stop</code> Detiene el servicio <code>docker-compose start</code> Inicia el servicio <code>docker-compose restart</code> Reinicia los servicios <p>Estos comandos dependen de los servicios que est\u00e9n definidos en \"docker-compose.yaml\"</p>"},{"location":"Ud2/Ch2_VATC/#mantenimiento-y-limpieza","title":"\ud83d\udee0\ufe0f Mantenimiento y Limpieza","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker system prune</code> Borra contenedores, im\u00e1genes y redes sin uso <code>docker volume rm $(docker volume ls -q -f \"dangling=true\")</code> Elimina vol\u00famenes no asociados a ning\u00fan contenedor <code>docker rm $(docker ps -q -f \"status=exited\")</code> Borra contenedores que han finalizado su ejecuci\u00f3n <code>docker rmi $(docker images -q -f \"dangling=true\")</code> Borra im\u00e1genes no etiquetadas y sin uso"},{"location":"Ud2/Ch2_VATC/#copias-de-seguridad","title":"\ud83d\udcc2 Copias de Seguridad","text":"\ud83d\udee0\ufe0f Comando \ud83d\udcdd Descripci\u00f3n <code>docker run --rm -v /tmp:/backup --volumes-from contenedor busybox tar -cvf /backup/backup.tar /data</code> Realiza un backup de los datos de un contenedor <code>docker run --rm -v /tmp:/backup --volumes-from contenedor busybox tar -xvf /backup/backup.tar /data</code> Restaura un backup de los datos al contenedor"},{"location":"Ud3/Ch3_JMJ/","title":"CH3 - JMJ","text":"<p>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p>"}]}